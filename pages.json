[{ "href":"/",
  "html":"<div data-render-page=\"default\"><div data-render-html=\"/\"><h2 id=\"lodash\">lodash</h2>\n<p>一个 JavaScript 的实用工具库, 表现一致性, <a href=\"https://www.npmjs.com/browse/keyword/lodash-modularized\" target=\"_blank\">模块化</a>, 高性能, 以及 <a href=\"#features\">可扩展</a></p>\n<iframe style=\"width:105px;height:25px\" allowtransparency=\"\" frameborder=\"0\" scrolling=\"no\" src=\"./github-btn.html?user=lodash&amp;repo=lodash&amp;count=true&amp;type=watch\"></iframe>\n<iframe style=\"width:105px; height:25px\" allowtransparency=\"\" frameborder=\"0\" scrolling=\"no\" src=\"./github-btn.html?user=lodash&amp;repo=lodash&amp;count=true&amp;type=fork\"></iframe>\n\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >assign</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> <span class=\"token string\" >'a'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'b'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'c'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >3</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// → { 'a': 1, 'b': 2, 'c': 3 }</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> <span class=\"token keyword\" >function</span><span class=\"token punctuation\" >(</span>n<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span> <span class=\"token keyword\" >return</span> n <span class=\"token operator\" >*</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >;</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// → [3, 6, 9]</span>\n</code></pre>\n<h2 id=\"-\">特点</h2>\n<ul>\n<li>~100% <a href=\"https://coveralls.io/github/lodash\" target=\"_blank\">代码覆盖率</a></li>\n<li>遵循 <a href=\"http://semver.org/\" target=\"_blank\">语义化版本控制规范</a></li>\n<li><a href=\"http://filimanjaro.com/blog/2014/introducing-lazy-evaluation/\" target=\"_blank\">延迟计算链</a></li>\n<li><a href=\"./_\">_(…)</a> 支持隐式链</li>\n<li><a href=\"./ary\">_.ary</a> &amp; <a href=\"./rearg\">_.rearg</a> 改变函数的实参个数和顺序</li>\n<li><a href=\"./at\">_.at</a> 更方便的获取数组或对象的值</li>\n<li><a href=\"./attempt\">_.attempt</a> 无需 try-catch 来处理可能会出错的执行函数</li>\n<li><a href=\"./before\">_.before</a> 与 <a href=\"./after\">_.after</a> 互补</li>\n<li><a href=\"./bindKey\">_.bindKey</a> 实现 <a href=\"http://michaux.ca/articles/lazy-function-definition-pattern\" target=\"_blank\"><em>“懒传参”</em></a></li>\n<li><a href=\"./chunk\">_.chunk</a> 按给定个数来拆分数组</li>\n<li><a href=\"./clone\">_.clone</a> 支持对 <code>Date</code> &amp; <code>RegExp</code> 对象的浅拷贝</li>\n<li><a href=\"./cloneDeep\">_.cloneDeep</a> 深拷贝数组或对象</li>\n<li><a href=\"./curry\">_.curry</a> &amp; <a href=\"./curryRight\">_.curryRight</a> 用于创建 <a href=\"http://hughfdjackson.com/javascript/why-curry-helps/\" target=\"_blank\">柯里化</a> 函数</li>\n<li><a href=\"./debounce\">_.debounce</a> &amp; <a href=\"./throttle\">_.throttle</a> 处理函数防抖和节流</li>\n<li><a href=\"./defaultsDeep\">_.defaultsDeep</a> 深分配对象的可枚举属性</li>\n<li><a href=\"./fill\">_.fill</a> 指定值填充数组</li>\n<li><a href=\"./findKey\">_.findKey</a> 按 keys 查找对象</li>\n<li><a href=\"./flow\">_.flow</a> 与 <a href=\"./flowRight\">_.flowRight</a> (即 <code>_.compose</code>) 搭配</li>\n<li><a href=\"./forEach\">_.forEach</a> 支持提前中断</li>\n<li><a href=\"./forIn\">_.forIn</a> 遍历对象所有的可枚举属性</li>\n<li><a href=\"./forOwn\">_.forOwn</a> 遍历对象的所有属性</li>\n<li><a href=\"./get\">_.get</a> &amp; <a href=\"./set\">_.set</a> 以 path 的方式获取和设置对象属性</li>\n<li><a href=\"./gt\">_.gt</a>, <a href=\"./gte\">_.gte</a>, <a href=\"./lt\">_.lt</a>, &amp; <a href=\"./lte\">_.lte</a> 关系比较方法</li>\n<li><a href=\"./inRange\">_.inRange</a> 检测给定的数值是否在指定范围内</li>\n<li><a href=\"./isNative\">_.isNative</a> 检测是否是原生函数</li>\n<li><a href=\"./isPlainObject\">_.isPlainObject</a> &amp; <a href=\"./toPlainObject\">_.toPlainObject</a> 检测是否是普通对象以及转换为普通对象</li>\n<li><a href=\"./isTypedArray\">_.isTypedArray</a> 检测是否是类型数组</li>\n<li><a href=\"./mapKeys\">_.mapKeys</a> 按对象的 key 迭代，并返回新 key 的对象</li>\n<li><a href=\"./matches\">_.matches</a> 支持深匹配对象</li>\n<li><a href=\"./matchesProperty\">_.matchesProperty</a> &amp; <a href=\"./matches\">_.matches</a> &amp; <a href=\"./property\">_.property</a> 互补</li>\n<li><a href=\"./merge\">_.merge</a> 相当于递归版 <a href=\"./extend\">_.extend</a></li>\n<li><a href=\"./method\">_.method</a> &amp; <a href=\"./methodOf\">_.methodOf</a> 创建一个调用方法的函数</li>\n<li><a href=\"./modArgs\">_.modArgs</a> 更高级的功能组合</li>\n<li><a href=\"./parseInt\">_.parseInt</a> 兼容各环境</li>\n<li><a href=\"./pull\">_.pull</a>, <a href=\"./pullAt\">_.pullAt</a>, &amp; <a href=\"./remove\">_.remove</a> 方便调整数组</li>\n<li><a href=\"./random\">_.random</a> 支持返回浮点数</li>\n<li><a href=\"./restParam\">_.restParam</a> &amp; <a href=\"./spread\">_.spread</a> 应用一个 rest arguments 和 Spread operator 参数传递给函数</li>\n<li><a href=\"./runInContext\">_.runInContext</a> 无影响的 mixins 且更方便模拟</li>\n<li><a href=\"./slice\">_.slice</a> 支持裁剪类数组</li>\n<li><a href=\"./sortByAll\">_.sortByAll</a> &amp; <a href=\"./sortByOrder\">_.sortByOrder</a> 多个属性排序</li>\n<li><a href=\"./support\">_.support</a> 标记环境功能</li>\n<li><a href=\"./template\">_.template</a> 支持 <a href=\"./templateSettings-imports\"><em>“imports”</em></a> 方式 &amp; <a href=\"http://people.mozilla.org/%7Ejorendorff/es6-draft.html#sec-template-literal-lexical-components\" target=\"_blank\">ES 字符串模板</a></li>\n<li><a href=\"./transform\">_.transform</a> 更强大的 <a href=\"./reduce\">_.reduce</a> 代替方法</li>\n<li><a href=\"./unzipWith\">_.unzipWith</a> &amp; <a href=\"./zipWith\">_.zipWith</a> 指定如何重组分解后的数组</li>\n<li><a href=\"./valuesIn\">_.valuesIn</a> 获取所有可枚举属性的值</li>\n<li><a href=\"./xor\">_.xor</a> &amp; <a href=\"./difference\">_.difference</a>, <a href=\"./intersection\">_.intersection</a>, &amp; <a href=\"./union\">_.union</a> 互补</li>\n<li><a href=\"./add\">_.add</a>, <a href=\"./round\">_.round</a>, <a href=\"./sum\">_.sum</a>, <a href=\"./doc\" title=\"_.ceil, _.floor\">及更多</a> 数学方法</li>\n<li><a href=\"./bind\">_.bind</a>, <a href=\"./curry\">_.curry</a>, <a href=\"./partial\">_.partial</a>, &amp; <a href=\"./docs\" title=\"_.bindKey, _.curryRight, _.partialRight\">及更多</a> 支持自定参数占位</li>\n<li><a href=\"./capitalize\">_.capitalize</a>, <a href=\"./trim\">_.trim</a>, &amp; <a href=\"./docs\" title=\"_.camelCase, _.deburr, _.endsWith, _.escapeRegExp, _.kebabCase, _.pad, _.padLeft, _.padRight, _.repeat, _.snakeCase, _.startsWith, _.trimLeft, _.trimRight, _.trunc, _.words\">及更多</a> string 方法</li>\n<li><a href=\"./clone\">_.clone</a>, <a href=\"./isEqual\">_.isEqual</a>, &amp; <a href=\"./docs\" title=\"_.assign, _.cloneDeep, _.merge\">及更多</a> 接受自定回调函数</li>\n<li><a href=\"./dropWhile\">_.dropWhile</a>, <a href=\"./takeWhile\">_.takeWhile</a>, &amp; <a href=\"./docs\" title=\"_.drop, _.dropRight, _.dropRightWhile, _.take, _.takeRight, _.takeRightWhile\">及更多</a> 互补 <a href=\"./first\">_.first</a>, <a href=\"./initial\">_.initial</a>, <a href=\"./last\">_.last</a>, &amp; <a href=\"./rest\">_.rest</a></li>\n<li><a href=\"./findLast\">_.findLast</a>, <a href=\"./findLastKey\">_.findLastKey</a>, &amp; <a href=\"./docs\" title=\"_.curryRight, _.dropRight, _.dropRightWhile, _.flowRight, _.forEachRight, _.forInRight, _.forOwnRight, _.padRight, partialRight, _.takeRight, _.trimRight, _.takeRightWhile\">及更多</a> 右结合方法</li>\n<li><a href=\"./includes\">_.includes</a>, <a href=\"./toArray\">_.toArray</a>, &amp; <a href=\"./docs\" title=\"_.at, _.countBy, _.every, _.filter, _.find, _.findLast, _.findWhere, _.forEach, _.forEachRight, _.groupBy, _.indexBy, _.invoke, _.map, _.max, _.min, _.partition, _.pluck, _.reduce, _.reduceRight, _.reject, _.shuffle, _.size, _.some, _.sortBy, _.sortByAll, _.sortByOrder, _.sum, _.where\">及更多</a> 接受字符串方式</li>\n<li><a href=\"./prototype-commit\">_#commit</a> &amp; <a href=\"./prototype-plant\">_#plant</a> 配合链式队列</li>\n<li><a href=\"./thru\">_#thru</a> 传递链式队列的值</li>\n</ul>\n<h2 id=\"-\">关于翻译</h2>\n<ul>\n<li>该文档由 <a href=\"https://github.com/think2011/\" target=\"_blank\">think2011</a> 翻译，遵循 <a href=\"https://github.com/jldec/lodash-doc-src/blob/master/LICENSE\" target=\"_blank\">MIT协议</a>，翻译质量可能没法特别好，但会保证尽可能反复细心。</li>\n<li>如果您有任何建议，或者意见，<a href=\"https://github.com/think2011/lodash-zh/issues\" target=\"_blank\">欢迎在此讨论，及时更正 ;-)</a>。</li>\n</ul>\n</div>\n</div>" }
,{ "href":"/getting-started",
  "html":"<div data-render-page=\"default\"><div data-render-html=\"/getting-started\"><h2 id=\"-\">下载</h2>\n<p>查看 <a href=\"https://github.com/lodash/lodash/wiki/build-differences\" target=\"_blank\">版本区别</a> 来选择适合你的版本</p>\n<ul>\n<li><a href=\"https://raw.githubusercontent.com/lodash/lodash/4.5.0/dist/lodash.core.js\" target=\"_blank\">核心版</a> (gzip压缩后 ~4kB)</li>\n<li><a href=\"https://raw.githubusercontent.com/lodash/lodash/4.5.0/dist/lodash.js\" target=\"_blank\">完整版</a> (gzip压缩后 ~22kB)</li>\n</ul>\n<h2 id=\"-\">引入</h2>\n<p>浏览器中使用:</p>\n<pre><code>&lt;script src=&quot;lodash.js&quot;&gt;&lt;/script&gt;\n</code></pre><p>AMD 规范中使用:</p>\n<pre><code>require([&#39;lodash&#39;], function(_) {});\n</code></pre><p>使用 npm 安装:</p>\n<pre><code>$ {sudo -H} npm i -g npm$ npm i --save lodash\n</code></pre><p>Node.js/io.js 中使用:</p>\n<pre><code>// 直接引用现代版本\nvar _ = require(&#39;lodash&#39;);\n\n// 或引用某分类下的所有方法\nvar array = require(&#39;lodash/array&#39;);\n\n// 或者引用具体方法 (很适合在 browserify/webpack 中做最小化打包)\nvar chunk = require(&#39;lodash/array/chunk&#39;);\n</code></pre><p>查看 <a href=\"https://github.com/lodash/lodash/tree/4.5.0-npm\" target=\"_blank\">源码包</a> 了解更多详情</p>\n<p><strong>注意:</strong>\n在 REPL 中不要声明 <a href=\"http://nodejs.org/api/repl.html#repl_repl_features\" target=\"_blank\">特殊变量</a> &quot;<code>_</code>&quot;，安装 <a href=\"https://www.npmjs.com/package/n_\" target=\"_blank\">n_</a> 来代替。</p>\n<h2 id=\"-\">模块格式</h2>\n<p>lodash 还有多种构建模块的格式</p>\n<ul>\n<li>npm 构建格式: <a href=\"https://www.npmjs.com/package/lodash\" target=\"_blank\">现代</a>, <a href=\"https://www.npmjs.com/package/lodash-compat\" target=\"_blank\">兼容</a>, &amp; <a href=\"https://www.npmjs.com/browse/keyword/lodash-modularized\" target=\"_blank\">单个方法</a></li>\n<li>AMD 构建格式: <a href=\"https://github.com/lodash/lodash/tree/4.5.0-amd\" target=\"_blank\">现代</a> &amp; <a href=\"https://github.com/lodash/lodash-compat/tree/4.5.0-amd\" target=\"_blank\">兼容</a></li>\n<li>ES 构建格式: <a href=\"https://github.com/lodash/lodash/tree/4.5.0-es\" target=\"_blank\">现代</a></li>\n</ul>\n<p>CDN 服务在 <a href=\"https://cdnjs.com/\" target=\"_blank\">cdnjs</a> &amp; <a href=\"http://www.jsdelivr.com/\" target=\"_blank\">jsDelivr</a>，通过 <a href=\"./custom-builds\">版本定制</a> 构建你需要的模块，在找更多的功能用法? 试试 <a href=\"https://www.npmjs.com/package/lodash-fp\" target=\"_blank\">lodash-fp</a></p>\n<h2 id=\"-\">深入了解</h2>\n<p>查看我们的 <a href=\"https://github.com/lodash/lodash/wiki/Changelog\" target=\"_blank\">更新日志</a>, <a href=\"https://github.com/lodash/lodash/wiki/Roadmap\" target=\"_blank\">路线图</a>, 以及 <a href=\"https://github.com/lodash/lodash/wiki/Resources\" target=\"_blank\">社区里的播客、文章、视频</a>.</p>\n<h2 id=\"-\">兼容性</h2>\n<p>在 Chrome 43-44, Firefox 38-39, IE 6-11, MS Edge, Safari 5-8, ChakraNode 0.12.2, Node.js 0.8.28, 0.10.40, 0.12.7, &amp; 4.0.0, PhantomJS 1.9.8, RingoJS 0.11, &amp; Rhino 1.7.6 测试通过</p>\n<p><a href=\"https://saucelabs.com/u/lodash\" target=\"_blank\">自动化测试</a> &amp; <a href=\"https://travis-ci.org/lodash/\" target=\"_blank\">持续集成</a> 已在运作， 特别感谢 <a href=\"https://saucelabs.com/\" target=\"_blank\">Sauce Labs</a> 提供的浏览器自动化测试。</p>\n</div>\n</div>" }
,{ "href":"/custom-builds",
  "html":"<div data-render-page=\"default\"><div data-render-html=\"/custom-builds\"><h2 id=\"-\">版本定制</h2>\n<p>通过版本定制可以很轻松的定制仅包含你所需功能的 lodash 版本 。更棒的是，我们已经帮你处理好了函数依赖和别名对应，查看 <a href=\"https://github.com/lodash/lodash/wiki/build-differences\" target=\"_blank\">版本区别</a> &amp; 选择一个适合你的版本。</p>\n<p>使用 Grunt? 我们准备了 <a href=\"https://npmjs.org/package/grunt-lodash\" target=\"_blank\">Grunt plugin</a> 协助构建 lodash。</p>\n<p>安装 <a href=\"https://npmjs.org/package/lodash-cli\" target=\"_blank\">lodash-cli</a> 来作为 <code>lodash</code> 全局命令行工具:</p>\n<pre><code>$ {sudo -H} npm i -g npm\n$ {sudo -H} npm i -g lodash-cli\n$ lodash -h\n</code></pre><p><strong>注意:</strong> 请先卸载旧版本，再安装 <code>lodash-cli</code>。</p>\n<ul>\n<li>兼容版本构建，同时支持新旧运行环境，使用 <code>compat</code> 修饰。 <em>(默认)</em></li>\n</ul>\n<pre><code>lodash compat\n</code></pre><ul>\n<li>现代版本构建，针对新的环境，包括 <a href=\"https://es5.github.io/\" target=\"_blank\">ES5</a>/<a href=\"ttps://people.mozilla.org/~jorendorff/es6-draft.html\">ES6</a> 支持，使用 <code>modern</code> 修饰。</li>\n</ul>\n<pre><code>lodash modern\n</code></pre><ul>\n<li>严格模式版本构建, 开启 <a href=\"https://es5.github.io/#C\" target=\"_blank\">ES 严格模式</a>，使用 <code>strict</code> 修饰。</li>\n</ul>\n<pre><code>lodash strict\n</code></pre><ul>\n<li>模块化版本构建，拆散 lodash 为各个模块，使用 <code>modularize</code> 修饰。</li>\n</ul>\n<pre><code>lodash modularize\n</code></pre><p>构建命令:</p>\n<ul>\n<li>使用 <code>category</code> 命令以逗号分隔的方式传入需要的函数分类。可用的函数分类有： <em>“array”</em>, <em>“chain”</em>, <em>“collection”</em>, <em>“date”</em>, <em>“function”</em>, <em>“lang”</em>, <em>“object”</em>, <em>“number”</em>, <em>“string”</em>, &amp; <em>“utility”</em>=。</li>\n</ul>\n<pre><code>lodash category=collection,function\n</code></pre><ul>\n<li>使用 <code>exports</code> 命令以逗号分隔的方式传入导出 <code>lodash</code> 函数的方式，可用的方式有： <em>“amd”</em>, <em>“commonjs”</em>, <em>“es”</em>, <em>“global”</em>, <em>“iojs”</em>, <em>“node”</em>, <em>“npm”</em>, <em>“none”</em>, &amp; <em>“umd”</em>.</li>\n</ul>\n<pre><code>lodash exports=amd,commonjs,iojs\n</code></pre><ul>\n<li>使用 <code>iife</code> 命令指定代码替换 包裹 lodash 的 <a href=\"http://benalman.com/news/2010/11/immediately-invoked-function-expression/\" target=\"_blank\">IIFE</a>。</li>\n</ul>\n<pre><code>lodash iife=&quot;!function(window,undefined){%output%}(this)&quot;\n</code></pre><ul>\n<li>使用 <code>include</code> 命令以逗号分隔的方式传入需要包含的函数。</li>\n</ul>\n<pre><code>lodash include=each,filter,map\n</code></pre><ul>\n<li>使用 <code>minus</code> 命令以逗号分隔的方式传入需要删减的函数/分类。</li>\n</ul>\n<pre><code>lodash modern minus=result,shuffle\n</code></pre><ul>\n<li>使用 <code>plus</code> 命令以逗号分隔的方式传入需要补充的函数/分类。</li>\n</ul>\n<pre><code>lodash category=array plus=random,template\n</code></pre><ul>\n<li>使用 <code>template</code> 命令传入路径相匹配的文件生成预编译模板。 <strong>注意:</strong> 预编译模板分配在 <code>_.templates</code> 对象上。</li>\n</ul>\n<pre><code>lodash template=&quot;./*.jst&quot;\n</code></pre><ul>\n<li>使用 <code>settings</code> 命令设置预编译模板时的模板语法。</li>\n</ul>\n<pre><code>lodash settings=&quot;{interpolate:/\\{\\{([\\s\\S]+?)\\}\\}/g}&quot;\n</code></pre><ul>\n<li>使用 <code>moduleId</code> 命令指定 lodash 的 AMD module ID 或 包含 lodash 的编译模板的 module ID。指定为 <code>none</code> 表示创建编译模板不依赖 lodash。</li>\n</ul>\n<pre><code>lodash moduleId=underscore\n</code></pre><p><strong>注意:</strong></p>\n<ul>\n<li>所有命令可以组合（除了 <code>compat</code> &amp; <code>modern</code>）</li>\n<li><code>exports</code> 的值 <em>“es”</em> &amp; <em>“npm”</em> 只能与 <code>modularize</code> 命令联用。</li>\n<li><code>modularize</code> 命令使用最先的 <code>exports</code> 的值作为模块格式，忽略后续的值。</li>\n<li>除非指定 <code>-o</code> 或 <code>--output</code>，不然所有文件会保存在当前工作目录。</li>\n<li>Node.js 0.10.8-0.10.11 <a href=\"https://github.com/joyent/node/issues/5622\" target=\"_blank\">存在</a> <a href=\"https://github.com/joyent/node/issues/5688\" target=\"_blank\">bugs</a> 导致无法最小化构建。</li>\n</ul>\n<p>另外还支持以下选项：</p>\n<pre><code>-c, --stdout .......... 输出到stdout(译注：类似直接输出在终端那样)\n-d, --development ..... 输出非最小化的开发代码\n-h, --help ............ 显示帮助信息\n-m, --source-map ...... 生成source-map文件\n-o, --output .......... 指定输出的路径/文件名\n-p, --production ...... 输出最小化后的产品代码\n-s, --silent .......... 不显示常规的日志输出\n-V, --version ......... 显示当前的 lodash 版本号\n</code></pre></div>\n</div>" }
,{ "href":"/chunk",
  "html":"<div data-render-page=\"entry\"><h2>chunk <a class=\"fa-link\" href=\"./chunk\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L5508\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.chunk\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.chunk(array, [size&#x3D;0])</div>\n\n<div data-render-html=\"/chunk\"><p>将数组拆分成多个 size 长度的块，并组成一个新数组。\n如果数组无法被分割成全部等长的块，那么最后剩余的元素将组成一个块。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">array</span> <span class=\"param-type\">(Array)</span> <div data-render-html=\"/#synthetic\"><p>需要被处理的数组 </p>\n</div></li>\n<li><span class=\"param-name\">[size&#x3D;0]</span> <span class=\"param-type\">(number)</span> <div data-render-html=\"/#synthetic\"><p>每个块的长度 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Array)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回一个拆分好的新数组</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >chunk</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token string\" >'a'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'b'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'c'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'d'</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => [['a', 'b'], ['c', 'd']]</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >chunk</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token string\" >'a'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'b'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'c'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'d'</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => [['a', 'b', 'c'], ['d']]</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/compact",
  "html":"<div data-render-page=\"entry\"><h2>compact <a class=\"fa-link\" href=\"./compact\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L5539\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.compact\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.compact(array)</div>\n\n<div data-render-html=\"/compact\"><p>创建一个移除了所有假值的数组。例如：<code>false</code>、<code>null</code>、\n<code>0</code>、<code>&quot;&quot;</code>、<code>undefined</code>， 以及<code>NaN</code> 都是 “假值”.</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">array</span> <span class=\"param-type\">(Array)</span> <div data-render-html=\"/#synthetic\"><p>需要被处理的数组。 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Array)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回移除了假值的数组。</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >compact</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token number\" >0</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token keyword\" >false</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >''</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => [1, 2, 3]</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/concat",
  "html":"<div data-render-page=\"entry\"><h2>concat <a class=\"fa-link\" href=\"./concat\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L5574\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.concat\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.concat(array, [values])</div>\n\n<div data-render-html=\"/concat\"><p>创建一个用任何数组 或 值连接的新数组。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">array</span> <span class=\"param-type\">(Array)</span> <div data-render-html=\"/#synthetic\"><p>需要被连接的数组 </p>\n</div></li>\n<li><span class=\"param-name\">[values]</span> <span class=\"param-type\">(...*)</span> <div data-render-html=\"/#synthetic\"><p>需要被连接的值的队列 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Array)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回连接后的新数组</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token keyword\" >var</span> array <span class=\"token operator\" >=</span> <span class=\"token punctuation\" >[</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >;</span>\n<span class=\"token keyword\" >var</span> other <span class=\"token operator\" >=</span> _<span class=\"token punctuation\" >.</span><span class=\"token function\" >concat</span><span class=\"token punctuation\" >(</span>array<span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >[</span><span class=\"token number\" >3</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >[</span><span class=\"token punctuation\" >[</span><span class=\"token number\" >4</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n\nconsole<span class=\"token punctuation\" >.</span><span class=\"token function\" >log</span><span class=\"token punctuation\" >(</span>other<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => [1, 2, 3, [4]]</span>\n\nconsole<span class=\"token punctuation\" >.</span><span class=\"token function\" >log</span><span class=\"token punctuation\" >(</span>array<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => [1]</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/difference",
  "html":"<div data-render-page=\"entry\"><h2>difference <a class=\"fa-link\" href=\"./difference\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L5596\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.difference\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.difference(array, [values])</div>\n\n<div data-render-html=\"/difference\"><p>创建一个差异化后的数组，不包括使用 <a href=\"http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero\" target=\"_blank\"><code>SameValueZero</code></a> 方法提供的数组。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">array</span> <span class=\"param-type\">(Array)</span> <div data-render-html=\"/#synthetic\"><p>需要处理的数组 </p>\n</div></li>\n<li><span class=\"param-name\">[values]</span> <span class=\"param-type\">(...Array)</span> <div data-render-html=\"/#synthetic\"><p>用于对比差异的数组 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Array)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回一个差异化后的新数组</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >difference</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token number\" >3</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >[</span><span class=\"token number\" >4</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => [3, 1]</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/differenceBy",
  "html":"<div data-render-page=\"entry\"><h2>differenceBy <a class=\"fa-link\" href=\"./differenceBy\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L5621\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.differenceby\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.differenceBy(array, [values], [iteratee&#x3D;_.identity])</div>\n\n<div data-render-html=\"/differenceBy\"><p>这个方法类似 <code>_.difference</code>，除了它接受一个 iteratee 调用每一个数组和值。iteratee 会传入一个参数：(value)。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">array</span> <span class=\"param-type\">(Array)</span> <div data-render-html=\"/#synthetic\"><p>需要处理的数组 </p>\n</div></li>\n<li><span class=\"param-name\">[values]</span> <span class=\"param-type\">(...Array)</span> <div data-render-html=\"/#synthetic\"><p>用于对比差异的数组 </p>\n</div></li>\n<li><span class=\"param-name\">[iteratee&#x3D;_.identity]</span> <span class=\"param-type\">(Function|Object|string)</span> <div data-render-html=\"/#synthetic\"><p>这个函数会处理每一个元素 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Array)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回一个差异化后的新数组</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >differenceBy</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token number\" >3.1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2.2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >1.3</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >[</span><span class=\"token number\" >4.4</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2.5</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> Math<span class=\"token punctuation\" >.</span>floor<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => [3.1, 1.3]</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 使用了 `_.property` 的回调结果</span>\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >differenceBy</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token punctuation\" >{</span> <span class=\"token string\" >'x'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'x'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >[</span><span class=\"token punctuation\" >{</span> <span class=\"token string\" >'x'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'x'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => [{ 'x': 2 }]</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/differenceWith",
  "html":"<div data-render-page=\"entry\"><h2>differenceWith <a class=\"fa-link\" href=\"./differenceWith\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L5648\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.differencewith\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.differenceWith(array, [values], [comparator])</div>\n\n<div data-render-html=\"/differenceWith\"><p>这个方法类似 <code>_.difference</code>，除了它接受一个 comparator 调用每一个数组元素的值。 comparator 会传入2个参数：(arrVal, othVal)。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">array</span> <span class=\"param-type\">(Array)</span> <div data-render-html=\"/#synthetic\"><p>需要处理的数组 </p>\n</div></li>\n<li><span class=\"param-name\">[values]</span> <span class=\"param-type\">(...Array)</span> <div data-render-html=\"/#synthetic\"><p>用于对比差异的数组 </p>\n</div></li>\n<li><span class=\"param-name\">[comparator]</span> <span class=\"param-type\">(Function)</span> <div data-render-html=\"/#synthetic\"><p>这个函数会处理每一个元素 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Array)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回一个差异化后的新数组</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token keyword\" >var</span> objects <span class=\"token operator\" >=</span> <span class=\"token punctuation\" >[</span><span class=\"token punctuation\" >{</span> <span class=\"token string\" >'x'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'y'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'x'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'y'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >;</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >differenceWith</span><span class=\"token punctuation\" >(</span>objects<span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >[</span><span class=\"token punctuation\" >{</span> <span class=\"token string\" >'x'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'y'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> _<span class=\"token punctuation\" >.</span>isEqual<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => [{ 'x': 2, 'y': 1 }]</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/drop",
  "html":"<div data-render-page=\"entry\"><h2>drop <a class=\"fa-link\" href=\"./drop\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L5682\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.drop\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.drop(array, [n&#x3D;1])</div>\n\n<div data-render-html=\"/drop\"><p>裁剪数组中的前 N 个数组，返回剩余的部分。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">array</span> <span class=\"param-type\">(Array)</span> <div data-render-html=\"/#synthetic\"><p>需要处理的数组 </p>\n</div></li>\n<li><span class=\"param-name\">[n&#x3D;1]</span> <span class=\"param-type\">(number)</span> <div data-render-html=\"/#synthetic\"><p>裁剪的个数 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Array)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回数组的剩余的部分。</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >drop</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => [2, 3]</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >drop</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => [3]</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >drop</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >5</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => []</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >drop</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => [1, 2, 3]</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/dropRight",
  "html":"<div data-render-page=\"entry\"><h2>dropRight <a class=\"fa-link\" href=\"./dropRight\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L5715\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.dropright\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.dropRight(array, [n&#x3D;1])</div>\n\n<div data-render-html=\"/dropRight\"><p>从右边开始裁剪数组中的 N 个数组，返回剩余的部分。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">array</span> <span class=\"param-type\">(Array)</span> <div data-render-html=\"/#synthetic\"><p>需要处理的数组 </p>\n</div></li>\n<li><span class=\"param-name\">[n&#x3D;1]</span> <span class=\"param-type\">(number)</span> <div data-render-html=\"/#synthetic\"><p>裁剪的个数 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Array)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回数组的剩余的部分。</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >dropRight</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => [1, 2]</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >dropRight</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => [1]</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >dropRight</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >5</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => []</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >dropRight</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => [1, 2, 3]</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/dropRightWhile",
  "html":"<div data-render-page=\"entry\"><h2>dropRightWhile <a class=\"fa-link\" href=\"./dropRightWhile\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L5759\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.droprightwhile\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.dropRightWhile(array, [predicate&#x3D;_.identity])</div>\n\n<div data-render-html=\"/dropRightWhile\"><p>从右边开始裁剪数组，起点从 <code>predicate</code> 返回假值开始。<code>predicate</code> 会传入3个参数：(value, index, array)。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">array</span> <span class=\"param-type\">(Array)</span> <div data-render-html=\"/#synthetic\"><p>需要处理的数组 </p>\n</div></li>\n<li><span class=\"param-name\">[predicate&#x3D;_.identity]</span> <span class=\"param-type\">(Function|Object|string)</span> <div data-render-html=\"/#synthetic\"><p>这个函数会在每一次迭代调用 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Array)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回裁剪后的数组</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token keyword\" >var</span> resolve <span class=\"token operator\" >=</span> _<span class=\"token punctuation\" >.</span><span class=\"token function\" >partial</span><span class=\"token punctuation\" >(</span>_<span class=\"token punctuation\" >.</span>map<span class=\"token punctuation\" >,</span> _<span class=\"token punctuation\" >,</span> <span class=\"token string\" >'user'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n\n<span class=\"token keyword\" >var</span> users <span class=\"token operator\" >=</span> <span class=\"token punctuation\" >[</span>\n  <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'user'</span><span class=\"token punctuation\" >:</span> <span class=\"token string\" >'barney'</span><span class=\"token punctuation\" >,</span>  <span class=\"token string\" >'active'</span><span class=\"token punctuation\" >:</span> <span class=\"token keyword\" >true</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'user'</span><span class=\"token punctuation\" >:</span> <span class=\"token string\" >'fred'</span><span class=\"token punctuation\" >,</span>    <span class=\"token string\" >'active'</span><span class=\"token punctuation\" >:</span> <span class=\"token keyword\" >false</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'user'</span><span class=\"token punctuation\" >:</span> <span class=\"token string\" >'pebbles'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'active'</span><span class=\"token punctuation\" >:</span> <span class=\"token keyword\" >false</span> <span class=\"token punctuation\" >}</span>\n<span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >;</span>\n\n<span class=\"token function\" >resolve</span><span class=\"token punctuation\" >(</span> _<span class=\"token punctuation\" >.</span><span class=\"token function\" >dropRightWhile</span><span class=\"token punctuation\" >(</span>users<span class=\"token punctuation\" >,</span> <span class=\"token keyword\" >function</span><span class=\"token punctuation\" >(</span>o<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span> <span class=\"token keyword\" >return</span> <span class=\"token operator\" >!</span>o<span class=\"token punctuation\" >.</span>active<span class=\"token punctuation\" >;</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => ['barney']</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 使用了 `_.matches` 的回调结果</span>\n<span class=\"token function\" >resolve</span><span class=\"token punctuation\" >(</span> _<span class=\"token punctuation\" >.</span><span class=\"token function\" >dropRightWhile</span><span class=\"token punctuation\" >(</span>users<span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'user'</span><span class=\"token punctuation\" >:</span> <span class=\"token string\" >'pebbles'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'active'</span><span class=\"token punctuation\" >:</span> <span class=\"token keyword\" >false</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => ['barney', 'fred']</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 使用了 `_.matchesProperty` 的回调结果</span>\n<span class=\"token function\" >resolve</span><span class=\"token punctuation\" >(</span> _<span class=\"token punctuation\" >.</span><span class=\"token function\" >dropRightWhile</span><span class=\"token punctuation\" >(</span>users<span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >[</span><span class=\"token string\" >'active'</span><span class=\"token punctuation\" >,</span> <span class=\"token keyword\" >false</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => ['barney']</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 使用了 `_.property` 的回调结果</span>\n<span class=\"token function\" >resolve</span><span class=\"token punctuation\" >(</span> _<span class=\"token punctuation\" >.</span><span class=\"token function\" >dropRightWhile</span><span class=\"token punctuation\" >(</span>users<span class=\"token punctuation\" >,</span> <span class=\"token string\" >'active'</span><span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => ['barney', 'fred', 'pebbles']</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/dropWhile",
  "html":"<div data-render-page=\"entry\"><h2>dropWhile <a class=\"fa-link\" href=\"./dropWhile\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L5797\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.dropwhile\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.dropWhile(array, [predicate&#x3D;_.identity])</div>\n\n<div data-render-html=\"/dropWhile\"><p>裁剪数组，起点从 <code>predicate</code> 返回假值开始。<code>predicate</code> 会传入3个参数：(value, index, array)。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">array</span> <span class=\"param-type\">(Array)</span> <div data-render-html=\"/#synthetic\"><p>array 需要处理的数组 </p>\n</div></li>\n<li><span class=\"param-name\">[predicate&#x3D;_.identity]</span> <span class=\"param-type\">(Function|Object|string)</span> <div data-render-html=\"/#synthetic\"><p>这个函数会在每一次迭代调用 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Array)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> Returns the slice of <code>array</code>.</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token keyword\" >var</span> users <span class=\"token operator\" >=</span> <span class=\"token punctuation\" >[</span>\n  <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'user'</span><span class=\"token punctuation\" >:</span> <span class=\"token string\" >'barney'</span><span class=\"token punctuation\" >,</span>  <span class=\"token string\" >'active'</span><span class=\"token punctuation\" >:</span> <span class=\"token keyword\" >false</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'user'</span><span class=\"token punctuation\" >:</span> <span class=\"token string\" >'fred'</span><span class=\"token punctuation\" >,</span>    <span class=\"token string\" >'active'</span><span class=\"token punctuation\" >:</span> <span class=\"token keyword\" >false</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'user'</span><span class=\"token punctuation\" >:</span> <span class=\"token string\" >'pebbles'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'active'</span><span class=\"token punctuation\" >:</span> <span class=\"token keyword\" >true</span> <span class=\"token punctuation\" >}</span>\n<span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >;</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >dropWhile</span><span class=\"token punctuation\" >(</span>users<span class=\"token punctuation\" >,</span> <span class=\"token keyword\" >function</span><span class=\"token punctuation\" >(</span>o<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span> <span class=\"token keyword\" >return</span> <span class=\"token operator\" >!</span>o<span class=\"token punctuation\" >.</span>active<span class=\"token punctuation\" >;</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 结果: ['pebbles']</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 使用了 `_.matches` 的回调处理</span>\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >dropWhile</span><span class=\"token punctuation\" >(</span>users<span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'user'</span><span class=\"token punctuation\" >:</span> <span class=\"token string\" >'barney'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'active'</span><span class=\"token punctuation\" >:</span> <span class=\"token keyword\" >false</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 结果: ['fred', 'pebbles']</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 使用了 `_.matchesProperty` 的回调处理</span>\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >dropWhile</span><span class=\"token punctuation\" >(</span>users<span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >[</span><span class=\"token string\" >'active'</span><span class=\"token punctuation\" >,</span> <span class=\"token keyword\" >false</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 结果: ['pebbles']</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 使用了 `_.property` 的回调处理</span>\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >dropWhile</span><span class=\"token punctuation\" >(</span>users<span class=\"token punctuation\" >,</span> <span class=\"token string\" >'active'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 结果: ['barney', 'fred', 'pebbles']</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/fill",
  "html":"<div data-render-page=\"entry\"><h2>fill <a class=\"fa-link\" href=\"./fill\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L5830\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.fill\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.fill(array, value, [start&#x3D;0], [end&#x3D;array.length])</div>\n\n<div data-render-html=\"/fill\"><p>指定 <code>值</code> 填充数组，从 <code>start</code> 到 <code>end</code> 的位置，但不包括 <code>end</code> 本身的位置。\n<br>\n<br>\n<strong>注意:</strong> 这个方法会改变数组</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">array</span> <span class=\"param-type\">(Array)</span> <div data-render-html=\"/#synthetic\"><p>需要填充的数组 </p>\n</div></li>\n<li><span class=\"param-name\">value</span> <span class=\"param-type\">(*)</span> <div data-render-html=\"/#synthetic\"><p>填充的值 </p>\n</div></li>\n<li><span class=\"param-name\">[start&#x3D;0]</span> <span class=\"param-type\">(number)</span> <div data-render-html=\"/#synthetic\"><p>开始位置 </p>\n</div></li>\n<li><span class=\"param-name\">[end&#x3D;array.length]</span> <span class=\"param-type\">(number)</span> <div data-render-html=\"/#synthetic\"><p>结束位置 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Array)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回数组</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token keyword\" >var</span> array <span class=\"token operator\" >=</span> <span class=\"token punctuation\" >[</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >;</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >fill</span><span class=\"token punctuation\" >(</span>array<span class=\"token punctuation\" >,</span> <span class=\"token string\" >'a'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\nconsole<span class=\"token punctuation\" >.</span><span class=\"token function\" >log</span><span class=\"token punctuation\" >(</span>array<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => ['a', 'a', 'a']</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >fill</span><span class=\"token punctuation\" >(</span><span class=\"token function\" >Array</span><span class=\"token punctuation\" >(</span><span class=\"token number\" >3</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => [2, 2, 2]</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >fill</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token number\" >4</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >6</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >8</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >10</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'*'</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => [4, '*', '*', 10]</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/findIndex",
  "html":"<div data-render-page=\"entry\"><h2>findIndex <a class=\"fa-link\" href=\"./findIndex\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L5874\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.findindex\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.findIndex(array, [predicate&#x3D;_.identity])</div>\n\n<div data-render-html=\"/findIndex\"><p>这个方法类似 <code>_.find</code>。除了它返回最先通过 <code>predicate</code> 判断为真值的元素的 index ，而不是元素本身。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">array</span> <span class=\"param-type\">(Array)</span> <div data-render-html=\"/#synthetic\"><p>需要搜索的数组 </p>\n</div></li>\n<li><span class=\"param-name\">[predicate&#x3D;_.identity]</span> <span class=\"param-type\">(Function|Object|string)</span> <div data-render-html=\"/#synthetic\"><p>这个函数会在每一次迭代调用 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(number)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回符合元素的 index，否则返回 <code>-1</code>。</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token keyword\" >var</span> users <span class=\"token operator\" >=</span> <span class=\"token punctuation\" >[</span>\n  <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'user'</span><span class=\"token punctuation\" >:</span> <span class=\"token string\" >'barney'</span><span class=\"token punctuation\" >,</span>  <span class=\"token string\" >'active'</span><span class=\"token punctuation\" >:</span> <span class=\"token keyword\" >false</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'user'</span><span class=\"token punctuation\" >:</span> <span class=\"token string\" >'fred'</span><span class=\"token punctuation\" >,</span>    <span class=\"token string\" >'active'</span><span class=\"token punctuation\" >:</span> <span class=\"token keyword\" >false</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'user'</span><span class=\"token punctuation\" >:</span> <span class=\"token string\" >'pebbles'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'active'</span><span class=\"token punctuation\" >:</span> <span class=\"token keyword\" >true</span> <span class=\"token punctuation\" >}</span>\n<span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >;</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >findIndex</span><span class=\"token punctuation\" >(</span>users<span class=\"token punctuation\" >,</span> <span class=\"token keyword\" >function</span><span class=\"token punctuation\" >(</span>o<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span> <span class=\"token keyword\" >return</span> o<span class=\"token punctuation\" >.</span>user <span class=\"token operator\" >==</span> <span class=\"token string\" >'barney'</span><span class=\"token punctuation\" >;</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 0</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 使用了 `_.matches` 的回调结果</span>\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >findIndex</span><span class=\"token punctuation\" >(</span>users<span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'user'</span><span class=\"token punctuation\" >:</span> <span class=\"token string\" >'fred'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'active'</span><span class=\"token punctuation\" >:</span> <span class=\"token keyword\" >false</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 1</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 使用了 `_.matchesProperty` 的回调结果</span>\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >findIndex</span><span class=\"token punctuation\" >(</span>users<span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >[</span><span class=\"token string\" >'active'</span><span class=\"token punctuation\" >,</span> <span class=\"token keyword\" >false</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 0</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 使用了 `_.property` 的回调结果</span>\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >findIndex</span><span class=\"token punctuation\" >(</span>users<span class=\"token punctuation\" >,</span> <span class=\"token string\" >'active'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 2</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/findLastIndex",
  "html":"<div data-render-page=\"entry\"><h2>findLastIndex <a class=\"fa-link\" href=\"./findLastIndex\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L5912\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.findlastindex\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.findLastIndex(array, [predicate&#x3D;_.identity])</div>\n\n<div data-render-html=\"/findLastIndex\"><p>这个方式类似 <code>_.findIndex</code> ， 不过它是从右到左的。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">array</span> <span class=\"param-type\">(Array)</span> <div data-render-html=\"/#synthetic\"><p>需要搜索的数组 </p>\n</div></li>\n<li><span class=\"param-name\">[predicate&#x3D;_.identity]</span> <span class=\"param-type\">(Function|Object|string)</span> <div data-render-html=\"/#synthetic\"><p>这个函数会在每一次迭代调用 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(number)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回符合元素的 index，否则返回 <code>-1</code>。</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token keyword\" >var</span> users <span class=\"token operator\" >=</span> <span class=\"token punctuation\" >[</span>\n  <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'user'</span><span class=\"token punctuation\" >:</span> <span class=\"token string\" >'barney'</span><span class=\"token punctuation\" >,</span>  <span class=\"token string\" >'active'</span><span class=\"token punctuation\" >:</span> <span class=\"token keyword\" >true</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'user'</span><span class=\"token punctuation\" >:</span> <span class=\"token string\" >'fred'</span><span class=\"token punctuation\" >,</span>    <span class=\"token string\" >'active'</span><span class=\"token punctuation\" >:</span> <span class=\"token keyword\" >false</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'user'</span><span class=\"token punctuation\" >:</span> <span class=\"token string\" >'pebbles'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'active'</span><span class=\"token punctuation\" >:</span> <span class=\"token keyword\" >false</span> <span class=\"token punctuation\" >}</span>\n<span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >;</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >findLastIndex</span><span class=\"token punctuation\" >(</span>users<span class=\"token punctuation\" >,</span> <span class=\"token keyword\" >function</span><span class=\"token punctuation\" >(</span>o<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span> <span class=\"token keyword\" >return</span> o<span class=\"token punctuation\" >.</span>user <span class=\"token operator\" >==</span> <span class=\"token string\" >'pebbles'</span><span class=\"token punctuation\" >;</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 2</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 使用了 `_.matches` 的回调结果</span>\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >findLastIndex</span><span class=\"token punctuation\" >(</span>users<span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'user'</span><span class=\"token punctuation\" >:</span> <span class=\"token string\" >'barney'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'active'</span><span class=\"token punctuation\" >:</span> <span class=\"token keyword\" >true</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 0</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 使用了 `_.matchesProperty` 的回调结果</span>\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >findLastIndex</span><span class=\"token punctuation\" >(</span>users<span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >[</span><span class=\"token string\" >'active'</span><span class=\"token punctuation\" >,</span> <span class=\"token keyword\" >false</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 2</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 使用了 `_.property` 的回调结果</span>\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >findLastIndex</span><span class=\"token punctuation\" >(</span>users<span class=\"token punctuation\" >,</span> <span class=\"token string\" >'active'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 0</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/flatten",
  "html":"<div data-render-page=\"entry\"><h2>flatten <a class=\"fa-link\" href=\"./flatten\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L5931\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.flatten\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.flatten(array)</div>\n\n<div data-render-html=\"/flatten\"><p>向上一级展平数组嵌套</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">array</span> <span class=\"param-type\">(Array)</span> <div data-render-html=\"/#synthetic\"><p>需要展平的数组 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Array)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回展平后的新数组</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >flatten</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >[</span><span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >[</span><span class=\"token number\" >3</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >[</span><span class=\"token number\" >4</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >5</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => [1, 2, [3, [4]], 5]</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/flattenDeep",
  "html":"<div data-render-page=\"entry\"><h2>flattenDeep <a class=\"fa-link\" href=\"./flattenDeep\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L5949\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.flattendeep\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.flattenDeep(array)</div>\n\n<div data-render-html=\"/flattenDeep\"><p>递归展平 <code>数组</code>.</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">array</span> <span class=\"param-type\">(Array)</span> <div data-render-html=\"/#synthetic\"><p>需要展平的数组 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Array)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回展平后的新数组</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >flattenDeep</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >[</span><span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >[</span><span class=\"token number\" >3</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >[</span><span class=\"token number\" >4</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >5</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => [1, 2, 3, 4, 5]</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/flattenDepth",
  "html":"<div data-render-page=\"entry\"><h2>flattenDepth <a class=\"fa-link\" href=\"./flattenDepth\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L5973\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.flattendepth\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.flattenDepth(array, [depth&#x3D;1])</div>\n\n<div data-render-html=\"/flattenDepth\"><p>根据 <code>depth</code> 递归展平 <code>数组</code> 的层级</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">array</span> <span class=\"param-type\">(Array)</span> <div data-render-html=\"/#synthetic\"><p>需要展平的数组 </p>\n</div></li>\n<li><span class=\"param-name\">[depth&#x3D;1]</span> <span class=\"param-type\">(number)</span> <div data-render-html=\"/#synthetic\"><p>展平的层级 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Array)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回展平后的新数组</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token keyword\" >var</span> array <span class=\"token operator\" >=</span> <span class=\"token punctuation\" >[</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >[</span><span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >[</span><span class=\"token number\" >3</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >[</span><span class=\"token number\" >4</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >5</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >;</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >flattenDepth</span><span class=\"token punctuation\" >(</span>array<span class=\"token punctuation\" >,</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => [1, 2, [3, [4]], 5]</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >flattenDepth</span><span class=\"token punctuation\" >(</span>array<span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => [1, 2, 3, [4], 5]</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/fromPairs",
  "html":"<div data-render-page=\"entry\"><h2>fromPairs <a class=\"fa-link\" href=\"./fromPairs\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L5995\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.frompairs\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.fromPairs(pairs)</div>\n\n<div data-render-html=\"/fromPairs\"><p>反向版 <code>_.toPairs</code>，这个方法返回一个由键值对构成的对象。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">pairs</span> <span class=\"param-type\">(Array)</span> <div data-render-html=\"/#synthetic\"><p>键值对 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Object)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回一个新对象</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >fromPairs</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token punctuation\" >[</span><span class=\"token string\" >'fred'</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >30</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >[</span><span class=\"token string\" >'barney'</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >40</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => { 'fred': 30, 'barney': 40 }</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/head",
  "html":"<div data-render-page=\"entry\"><h2>head <span class=\"aliases\">first</span> <a class=\"fa-link\" href=\"./head\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L6024\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.head\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.head(array)</div>\n\n<div data-render-html=\"/head\"><p>获得数组的首个元素</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">array</span> <span class=\"param-type\">(Array)</span> <div data-render-html=\"/#synthetic\"><p>要检索的数组 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(*)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回数组中的首个元素</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >head</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 1</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >head</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => undefined</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/indexOf",
  "html":"<div data-render-page=\"entry\"><h2>indexOf <a class=\"fa-link\" href=\"./indexOf\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L6047\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.indexof\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.indexOf(array, value, [fromIndex&#x3D;0])</div>\n\n<div data-render-html=\"/indexOf\"><p>根据 value 使用 SameValueZero 等值比较返回数组中首次匹配的 index， 如果 fromIndex 为负值，将从数组尾端索引进行匹配，如果将 fromIndex 设置为 true，将使用更快的二进制检索机制。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">array</span> <span class=\"param-type\">(Array)</span> <div data-render-html=\"/#synthetic\"><p>要检索的数组 </p>\n</div></li>\n<li><span class=\"param-name\">value</span> <span class=\"param-type\">(*)</span> <div data-render-html=\"/#synthetic\"><p>要检索的值 </p>\n</div></li>\n<li><span class=\"param-name\">[fromIndex&#x3D;0]</span> <span class=\"param-type\">(number)</span> <div data-render-html=\"/#synthetic\"><p>需要检索的起始位置，如果为 true 将使用二进制检索方式。 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(number)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回匹配值的index，否则返回 -1。</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >indexOf</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 1</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 使用了 `fromIndex`</span>\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >indexOf</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 3</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/initial",
  "html":"<div data-render-page=\"entry\"><h2>initial <a class=\"fa-link\" href=\"./initial\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L6072\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.initial\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.initial()</div>\n\n<div data-render-html=\"/initial\"><p>获取数组中除了最后一个元素之外的所有元素</p>\n</div>\n\n<h3>返回值 <span class=\"return-type\">(Array)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回没有最后一个元素的数组</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >initial</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => [1, 2]</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/intersection",
  "html":"<div data-render-page=\"entry\"><h2>intersection <a class=\"fa-link\" href=\"./intersection\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L6089\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.intersection\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.intersection([arrays])</div>\n\n<div data-render-html=\"/intersection\"><p>创建一个包含所有使用 <a href=\"http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero\" target=\"_blank\"><code>SameValueZero</code></a> 进行等值比较后筛选的唯一值数组。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">[arrays]</span> <span class=\"param-type\">(...Array)</span> <div data-render-html=\"/#synthetic\"><p>需要处理的数组队列 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Array)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回数组中所有数组共享元素的新数组</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >intersection</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >[</span><span class=\"token number\" >4</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >[</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => [2]</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/intersectionBy",
  "html":"<div data-render-page=\"entry\"><h2>intersectionBy <a class=\"fa-link\" href=\"./intersectionBy\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L6114\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.intersectionby\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.intersectionBy([arrays], [iteratee&#x3D;_.identity])</div>\n\n<div data-render-html=\"/intersectionBy\"><p>这个方法类似 <code>_.intersection</code>，除了它接受一个 iteratee 调用每一个数组和值。iteratee 会传入一个参数：(value)</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">[arrays]</span> <span class=\"param-type\">(...Array)</span> <div data-render-html=\"/#synthetic\"><p>需要检索的数组 </p>\n</div></li>\n<li><span class=\"param-name\">[iteratee&#x3D;_.identity]</span> <span class=\"param-type\">(Function|Object|string)</span> <div data-render-html=\"/#synthetic\"><p>这个函数会处理每一个元素 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Array)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回数组中共享元素的新数组</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >intersectionBy</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token number\" >2.1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >1.2</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >[</span><span class=\"token number\" >4.3</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2.4</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> Math<span class=\"token punctuation\" >.</span>floor<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => [2.1]</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 使用了 `_.property` 的回调结果</span>\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >intersectionBy</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token punctuation\" >{</span> <span class=\"token string\" >'x'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >[</span><span class=\"token punctuation\" >{</span> <span class=\"token string\" >'x'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'x'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'x'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => [{ 'x': 1 }]</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/intersectionWith",
  "html":"<div data-render-page=\"entry\"><h2>intersectionWith <a class=\"fa-link\" href=\"./intersectionWith\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L6145\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.intersectionwith\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.intersectionWith([arrays], [comparator])</div>\n\n<div data-render-html=\"/intersectionWith\"><p>这个方法类似 <code>_.intersection</code>，除了它接受一个 comparator 调用每一个数组和值。iteratee 会传入2个参数：((arrVal, othVal)</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">[arrays]</span> <span class=\"param-type\">(...Array)</span> <div data-render-html=\"/#synthetic\"><p>需要检索的数组 </p>\n</div></li>\n<li><span class=\"param-name\">[comparator]</span> <span class=\"param-type\">(Function)</span> <div data-render-html=\"/#synthetic\"><p>这个函数会处理每一个元素 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Array)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回数组中共享元素的新数组</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token keyword\" >var</span> objects <span class=\"token operator\" >=</span> <span class=\"token punctuation\" >[</span><span class=\"token punctuation\" >{</span> <span class=\"token string\" >'x'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'y'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'x'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'y'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >;</span>\n<span class=\"token keyword\" >var</span> others <span class=\"token operator\" >=</span> <span class=\"token punctuation\" >[</span><span class=\"token punctuation\" >{</span> <span class=\"token string\" >'x'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'y'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'x'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'y'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >;</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >intersectionWith</span><span class=\"token punctuation\" >(</span>objects<span class=\"token punctuation\" >,</span> others<span class=\"token punctuation\" >,</span> _<span class=\"token punctuation\" >.</span>isEqual<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => [{ 'x': 1, 'y': 2 }]</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/join",
  "html":"<div data-render-page=\"entry\"><h2>join <a class=\"fa-link\" href=\"./join\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L6173\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.join\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.join(array, [separator&#x3D;&#x27;,&#x27;])</div>\n\n<div data-render-html=\"/join\"><p>将数组中的所有元素转换为由 <code>separator</code> 分隔的字符串。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">array</span> <span class=\"param-type\">(Array)</span> <div data-render-html=\"/#synthetic\"><p>需要转换的数组 </p>\n</div></li>\n<li><span class=\"param-name\">[separator&#x3D;&#x27;,&#x27;]</span> <span class=\"param-type\">(string)</span> <div data-render-html=\"/#synthetic\"><p>分隔符 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(string)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回连接好的字符串</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >join</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token string\" >'a'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'b'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'c'</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'~'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 'a~b~c'</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/last",
  "html":"<div data-render-page=\"entry\"><h2>last <a class=\"fa-link\" href=\"./last\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L6190\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.last\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.last(array)</div>\n\n<div data-render-html=\"/last\"><p>获取数组中的最后一个元素</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">array</span> <span class=\"param-type\">(Array)</span> <div data-render-html=\"/#synthetic\"><p>要检索的数组 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(*)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回数组中的最后一个元素</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >last</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 3</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/lastIndexOf",
  "html":"<div data-render-page=\"entry\"><h2>lastIndexOf <a class=\"fa-link\" href=\"./lastIndexOf\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L6218\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.lastindexof\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.lastIndexOf(array, value, [fromIndex&#x3D;array.length-1])</div>\n\n<div data-render-html=\"/lastIndexOf\"><p>这个方法类似  <code>_.indexOf</code>，除了它是从右到左遍历元素的。\n这个方法类似 <code>_.indexOf</code> except that it iterates over elements of\n<code>array</code> from right to left.</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">array</span> <span class=\"param-type\">(Array)</span> <div data-render-html=\"/#synthetic\"><p>需要检索的数组 </p>\n</div></li>\n<li><span class=\"param-name\">value</span> <span class=\"param-type\">(*)</span> <div data-render-html=\"/#synthetic\"><p>要检索的值 </p>\n</div></li>\n<li><span class=\"param-name\">[fromIndex&#x3D;array.length-1]</span> <span class=\"param-type\">(number)</span> <div data-render-html=\"/#synthetic\"><p>检索 index 的起点  </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(number)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回匹配元素的 index，否则返回 -1</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >lastIndexOf</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 3</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 使用了 `fromIndex`</span>\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >lastIndexOf</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 1</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/prototype-reverse",
  "html":"<div data-render-page=\"entry\"><h2>prototype.reverse <a class=\"fa-link\" href=\"./prototype-reverse\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L6405\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.prototype.reverse\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.prototype.reverse()</div>\n\n<div data-render-html=\"/prototype-reverse\"><p>反转数组，第一个元素移动到最后一位，第二个元素移动到倒数第二，类似这样。\n<br>\n<br>\n<strong>注意:</strong> 这个方法会改变数组，根据 <a href=\"https://mdn.io/Array/reverse\" target=\"_blank\"><code>Array#reverse</code></a></p>\n</div>\n\n<h3>返回值 <span class=\"return-type\">(Array)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回原数组</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token keyword\" >var</span> array <span class=\"token operator\" >=</span> <span class=\"token punctuation\" >[</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >;</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >reverse</span><span class=\"token punctuation\" >(</span>array<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => [3, 2, 1]</span>\n\nconsole<span class=\"token punctuation\" >.</span><span class=\"token function\" >log</span><span class=\"token punctuation\" >(</span>array<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => [3, 2, 1]</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/pull",
  "html":"<div data-render-page=\"entry\"><h2>pull <a class=\"fa-link\" href=\"./pull\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L6258\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.pull\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.pull(array, [values])</div>\n\n<div data-render-html=\"/pull\"><p>移除所有经过 <a href=\"http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero\" target=\"_blank\"><code>SameValueZero</code></a> 等值比较为 true 的元素\n<br>\n<br>\n<strong>注意:</strong> 不同于 <code>_.without</code>，这个方法会改变数组。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">array</span> <span class=\"param-type\">(Array)</span> <div data-render-html=\"/#synthetic\"><p>需要调整的数组 </p>\n</div></li>\n<li><span class=\"param-name\">[values]</span> <span class=\"param-type\">(...*)</span> <div data-render-html=\"/#synthetic\"><p>要移除的值 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Array)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回数组本身</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token keyword\" >var</span> array <span class=\"token operator\" >=</span> <span class=\"token punctuation\" >[</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >;</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >pull</span><span class=\"token punctuation\" >(</span>array<span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\nconsole<span class=\"token punctuation\" >.</span><span class=\"token function\" >log</span><span class=\"token punctuation\" >(</span>array<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => [1, 1]</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/pullAll",
  "html":"<div data-render-page=\"entry\"><h2>pullAll <a class=\"fa-link\" href=\"./pullAll\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L6279\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.pullall\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.pullAll(array, values)</div>\n\n<div data-render-html=\"/pullAll\"><p>这个方式类似 <code>_.pull</code>，除了它接受数组形式的一系列值。\n<br>\n<br>\n<strong>注意:</strong> 不同于 <code>_.difference</code>，这个方法会改变数组。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">array</span> <span class=\"param-type\">(Array)</span> <div data-render-html=\"/#synthetic\"><p>需要调整的数组 </p>\n</div></li>\n<li><span class=\"param-name\">values</span> <span class=\"param-type\">(Array)</span> <div data-render-html=\"/#synthetic\"><p>要移除的值 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Array)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回数组本身</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token keyword\" >var</span> array <span class=\"token operator\" >=</span> <span class=\"token punctuation\" >[</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >;</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >pullAll</span><span class=\"token punctuation\" >(</span>array<span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >[</span><span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\nconsole<span class=\"token punctuation\" >.</span><span class=\"token function\" >log</span><span class=\"token punctuation\" >(</span>array<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => [1, 1]</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/pullAllBy",
  "html":"<div data-render-page=\"entry\"><h2>pullAllBy <a class=\"fa-link\" href=\"./pullAllBy\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L6305\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.pullallby\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.pullAllBy(array, values, [iteratee&#x3D;_.identity])</div>\n\n<div data-render-html=\"/pullAllBy\"><p>这个方法类似 <code>_.pullAll</code>，除了它接受一个 comparator 调用每一个数组元素的值。 comparator 会传入一个参数：(value)。\n<br>\n<br>\n<strong>注意:</strong> 不同于 <code>_.differenceBy</code>，这个方法会改变数组。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">array</span> <span class=\"param-type\">(Array)</span> <div data-render-html=\"/#synthetic\"><p>需要调整的数组 </p>\n</div></li>\n<li><span class=\"param-name\">values</span> <span class=\"param-type\">(Array)</span> <div data-render-html=\"/#synthetic\"><p>要移除的值 </p>\n</div></li>\n<li><span class=\"param-name\">[iteratee&#x3D;_.identity]</span> <span class=\"param-type\">(Function|Object|string)</span> <div data-render-html=\"/#synthetic\"><p>这个函数会处理每一个元素 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Array)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回数组本身</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token keyword\" >var</span> array <span class=\"token operator\" >=</span> <span class=\"token punctuation\" >[</span><span class=\"token punctuation\" >{</span> <span class=\"token string\" >'x'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'x'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'x'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >3</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'x'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >;</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >pullAllBy</span><span class=\"token punctuation\" >(</span>array<span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >[</span><span class=\"token punctuation\" >{</span> <span class=\"token string\" >'x'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'x'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >3</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'x'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\nconsole<span class=\"token punctuation\" >.</span><span class=\"token function\" >log</span><span class=\"token punctuation\" >(</span>array<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => [{ 'x': 2 }]</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/pullAt",
  "html":"<div data-render-page=\"entry\"><h2>pullAt <a class=\"fa-link\" href=\"./pullAt\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L6334\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.pullat\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.pullAt(array, [indexes])</div>\n\n<div data-render-html=\"/pullAt\"><p>根据给的 <code>indexes</code> 移除对应的数组元素并返回被移除的元素。\n<br>\n<br>\n<strong>注意:</strong> 不同于 <code>_.at</code>，这个方法会改变数组。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">array</span> <span class=\"param-type\">(Array)</span> <div data-render-html=\"/#synthetic\"><p>需要调整的数组 </p>\n</div></li>\n<li><span class=\"param-name\">[indexes]</span> <span class=\"param-type\">(...(number|number[])</span> <div data-render-html=\"/#synthetic\"><p>indexes 可以是特殊的数组队列，或者个别的单个或多个参数  </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Array)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回被移除的元素数组</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token keyword\" >var</span> array <span class=\"token operator\" >=</span> <span class=\"token punctuation\" >[</span><span class=\"token number\" >5</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >10</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >15</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >20</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >;</span>\n<span class=\"token keyword\" >var</span> evens <span class=\"token operator\" >=</span> _<span class=\"token punctuation\" >.</span><span class=\"token function\" >pullAt</span><span class=\"token punctuation\" >(</span>array<span class=\"token punctuation\" >,</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n\nconsole<span class=\"token punctuation\" >.</span><span class=\"token function\" >log</span><span class=\"token punctuation\" >(</span>array<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => [5, 15]</span>\n\nconsole<span class=\"token punctuation\" >.</span><span class=\"token function\" >log</span><span class=\"token punctuation\" >(</span>evens<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => [10, 20]</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/remove",
  "html":"<div data-render-page=\"entry\"><h2>remove <a class=\"fa-link\" href=\"./remove\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L6366\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.remove\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.remove(array, [predicate&#x3D;_.identity])</div>\n\n<div data-render-html=\"/remove\"><p>移除经过 <code>predicate</code> 处理为真值的元素，并返回被移除的元素。predicate 会传入3个参数：(value, index, array)\n<br>\n<br>\n<strong>注意:</strong> Unlike <code>_.filter</code>，这个方法会改变数组。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">array</span> <span class=\"param-type\">(Array)</span> <div data-render-html=\"/#synthetic\"><p>需要调整的数组 </p>\n</div></li>\n<li><span class=\"param-name\">[predicate&#x3D;_.identity]</span> <span class=\"param-type\">(Function|Object|string)</span> <div data-render-html=\"/#synthetic\"><p>这个函数会处理每一个元素 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Array)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回被移除的元素的数组</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token keyword\" >var</span> array <span class=\"token operator\" >=</span> <span class=\"token punctuation\" >[</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >4</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >;</span>\n<span class=\"token keyword\" >var</span> evens <span class=\"token operator\" >=</span> _<span class=\"token punctuation\" >.</span><span class=\"token function\" >remove</span><span class=\"token punctuation\" >(</span>array<span class=\"token punctuation\" >,</span> <span class=\"token keyword\" >function</span><span class=\"token punctuation\" >(</span>n<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span>\n  <span class=\"token keyword\" >return</span> n <span class=\"token operator\" >%</span> <span class=\"token number\" >2</span> <span class=\"token operator\" >==</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >;</span>\n<span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n\nconsole<span class=\"token punctuation\" >.</span><span class=\"token function\" >log</span><span class=\"token punctuation\" >(</span>array<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => [1, 3]</span>\n\nconsole<span class=\"token punctuation\" >.</span><span class=\"token function\" >log</span><span class=\"token punctuation\" >(</span>evens<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => [2, 4]</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/slice",
  "html":"<div data-render-page=\"entry\"><h2>slice <a class=\"fa-link\" href=\"./slice\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L6423\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.slice\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.slice(array, [start&#x3D;0], [end&#x3D;array.length])</div>\n\n<div data-render-html=\"/slice\"><p>创建一个裁剪后的数组，从 start 到 end 的位置，但不包括 end 本身的位置。\n<br>\n<br>\n<strong>注意:</strong> 这个方法用于代替 <a href=\"https://mdn.io/Array/slice\" target=\"_blank\"><code>Array#slice</code></a>\n来确保数组正确返回</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">array</span> <span class=\"param-type\">(Array)</span> <div data-render-html=\"/#synthetic\"><p>需要裁剪的数组 </p>\n</div></li>\n<li><span class=\"param-name\">[start&#x3D;0]</span> <span class=\"param-type\">(number)</span> <div data-render-html=\"/#synthetic\"><p>开始位置 </p>\n</div></li>\n<li><span class=\"param-name\">[end&#x3D;array.length]</span> <span class=\"param-type\">(number)</span> <div data-render-html=\"/#synthetic\"><p>结束位置 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Array)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回裁剪后的数组</p>\n</div></div>\n</div>" }
,{ "href":"/sortedIndex",
  "html":"<div data-render-page=\"entry\"><h2>sortedIndex <a class=\"fa-link\" href=\"./sortedIndex\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L6457\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.sortedindex\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.sortedIndex(array, value)</div>\n\n<div data-render-html=\"/sortedIndex\"><p>使用二进制的方式检索来决定 value 应该插入在数组中位置。它的 index 应该尽可能的小以保证数组的排序。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">array</span> <span class=\"param-type\">(Array)</span> <div data-render-html=\"/#synthetic\"><p>需要检索的已排序数组 </p>\n</div></li>\n<li><span class=\"param-name\">value</span> <span class=\"param-type\">(*)</span> <div data-render-html=\"/#synthetic\"><p>要评估位置的值 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(number)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回 value 应该在数组中插入的 index。</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >sortedIndex</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token number\" >30</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >50</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >40</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 1</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >sortedIndex</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token number\" >4</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >5</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >4</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 0</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/sortedIndexBy",
  "html":"<div data-render-page=\"entry\"><h2>sortedIndexBy <a class=\"fa-link\" href=\"./sortedIndexBy\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L6482\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.sortedindexby\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.sortedIndexBy(array, value, [iteratee&#x3D;_.identity])</div>\n\n<div data-render-html=\"/sortedIndexBy\"><p>这个方法类似 <code>_.sortedIndex</code>，除了它接受一个 iteratee 调用每一个数组和值来计算排序。iteratee 会传入一个参数：(value)。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">array</span> <span class=\"param-type\">(Array)</span> <div data-render-html=\"/#synthetic\"><p>需要检索的已排序数组 </p>\n</div></li>\n<li><span class=\"param-name\">value</span> <span class=\"param-type\">(*)</span> <div data-render-html=\"/#synthetic\"><p>要评估位置的值 </p>\n</div></li>\n<li><span class=\"param-name\">[iteratee&#x3D;_.identity]</span> <span class=\"param-type\">(Function|Object|string)</span> <div data-render-html=\"/#synthetic\"><p>这个函数会处理每一个元素 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(number)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回 value 应该在数组中插入的 index。</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token keyword\" >var</span> dict <span class=\"token operator\" >=</span> <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'thirty'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >30</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'forty'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >40</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'fifty'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >50</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >;</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >sortedIndexBy</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token string\" >'thirty'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'fifty'</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'forty'</span><span class=\"token punctuation\" >,</span> _<span class=\"token punctuation\" >.</span><span class=\"token function\" >propertyOf</span><span class=\"token punctuation\" >(</span>dict<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 1</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 使用了 `_.property` 回调结果</span>\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >sortedIndexBy</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token punctuation\" >{</span> <span class=\"token string\" >'x'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >4</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'x'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >5</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'x'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >4</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'x'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 0</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/sortedIndexOf",
  "html":"<div data-render-page=\"entry\"><h2>sortedIndexOf <a class=\"fa-link\" href=\"./sortedIndexOf\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L6500\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.sortedindexof\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.sortedIndexOf(array, value)</div>\n\n<div data-render-html=\"/sortedIndexOf\"><p>这个方法类似 <code>_.indexOf</code>，除了它是执行二进制来检索已经排序的数组的。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">array</span> <span class=\"param-type\">(Array)</span> <div data-render-html=\"/#synthetic\"><p>需要检索的数组 </p>\n</div></li>\n<li><span class=\"param-name\">value</span> <span class=\"param-type\">(*)</span> <div data-render-html=\"/#synthetic\"><p>要评估位置的值 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(number)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回匹配值的 index ，否则返回 <code>-1</code>.</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >sortedIndexOf</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 2</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/sortedLastIndex",
  "html":"<div data-render-page=\"entry\"><h2>sortedLastIndex <a class=\"fa-link\" href=\"./sortedLastIndex\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L6525\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.sortedlastindex\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.sortedLastIndex(array, value)</div>\n\n<div data-render-html=\"/sortedLastIndex\"><p>这个方法类似 <code>_.sortedIndex</code>，除了它返回在 value 中尽可能大的 index 位置。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">array</span> <span class=\"param-type\">(Array)</span> <div data-render-html=\"/#synthetic\"><p>需要检索的已排序数组 </p>\n</div></li>\n<li><span class=\"param-name\">value</span> <span class=\"param-type\">(*)</span> <div data-render-html=\"/#synthetic\"><p>要评估位置的值 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(number)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回 value 应该在数组中插入的 index。</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >sortedLastIndex</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token number\" >4</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >5</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >4</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 1</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/sortedLastIndexBy",
  "html":"<div data-render-page=\"entry\"><h2>sortedLastIndexBy <a class=\"fa-link\" href=\"./sortedLastIndexBy\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L6545\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.sortedlastindexby\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.sortedLastIndexBy(array, value, [iteratee&#x3D;_.identity])</div>\n\n<div data-render-html=\"/sortedLastIndexBy\"><p>这个方法类似 <code>_.sortedLastIndex</code>，除了它接受一个 iteratee 调用每一个数组和值来计算排序。iteratee 会传入一个参数：(value)。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">array</span> <span class=\"param-type\">(Array)</span> <div data-render-html=\"/#synthetic\"><p>需要检索的已排序数组 </p>\n</div></li>\n<li><span class=\"param-name\">value</span> <span class=\"param-type\">(*)</span> <div data-render-html=\"/#synthetic\"><p>要评估位置的值 </p>\n</div></li>\n<li><span class=\"param-name\">[iteratee&#x3D;_.identity]</span> <span class=\"param-type\">(Function|Object|string)</span> <div data-render-html=\"/#synthetic\"><p>这个函数会处理每一个元素 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(number)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回 value 应该在数组中插入的 index。</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token comment\" spellcheck=\"true\">// 使用了 `_.property` 的回调结果</span>\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >sortedLastIndexBy</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token punctuation\" >{</span> <span class=\"token string\" >'x'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >4</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'x'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >5</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'x'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >4</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'x'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 1</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/sortedLastIndexOf",
  "html":"<div data-render-page=\"entry\"><h2>sortedLastIndexOf <a class=\"fa-link\" href=\"./sortedLastIndexOf\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L6563\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.sortedlastindexof\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.sortedLastIndexOf(array, value)</div>\n\n<div data-render-html=\"/sortedLastIndexOf\"><p>这个方法类似 <code>_.lastIndexOf</code>，除了它是执行二进制来检索已经排序的数组的。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">array</span> <span class=\"param-type\">(Array)</span> <div data-render-html=\"/#synthetic\"><p>需要检索的数组 </p>\n</div></li>\n<li><span class=\"param-name\">value</span> <span class=\"param-type\">(*)</span> <div data-render-html=\"/#synthetic\"><p>要评估位置的值 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(number)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回匹配值的 index ，否则返回 -1.</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >sortedLastIndexOf</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 3</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/sortedUniq",
  "html":"<div data-render-page=\"entry\"><h2>sortedUniq <a class=\"fa-link\" href=\"./sortedUniq\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L6587\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.sorteduniq\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.sortedUniq(array)</div>\n\n<div data-render-html=\"/sortedUniq\"><p>这个方法类似 <code>_.uniq</code>，除了它会排序并优化数组。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">array</span> <span class=\"param-type\">(Array)</span> <div data-render-html=\"/#synthetic\"><p>要调整的数组 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Array)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回一个不重复的数组</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >sortedUniq</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => [1, 2]</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/sortedUniqBy",
  "html":"<div data-render-page=\"entry\"><h2>sortedUniqBy <a class=\"fa-link\" href=\"./sortedUniqBy\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L6607\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.sorteduniqby\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.sortedUniqBy(array, [iteratee])</div>\n\n<div data-render-html=\"/sortedUniqBy\"><p>这个方法类似 <code>_.uniqBy</code>，除了它接受一个 iteratee 调用每一个数组和值来排序并优化数组。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">array</span> <span class=\"param-type\">(Array)</span> <div data-render-html=\"/#synthetic\"><p>要调整的数组 </p>\n</div></li>\n<li><span class=\"param-name\">[iteratee]</span> <span class=\"param-type\">(Function)</span> <div data-render-html=\"/#synthetic\"><p>这个函数会处理每一个元素 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Array)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回一个不重复的数组</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >sortedUniqBy</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token number\" >1.1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >1.2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2.3</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2.4</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> Math<span class=\"token punctuation\" >.</span>floor<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => [1.1, 2.3]</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/tail",
  "html":"<div data-render-page=\"entry\"><h2>tail <a class=\"fa-link\" href=\"./tail\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L6626\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.tail\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.tail(array)</div>\n\n<div data-render-html=\"/tail\"><p>获取数组中除了第一个元素的剩余数组</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">array</span> <span class=\"param-type\">(Array)</span> <div data-render-html=\"/#synthetic\"><p>要检索的数组 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Array)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回数组中除了第一个元素的剩余数组</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >tail</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => [2, 3]</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/take",
  "html":"<div data-render-page=\"entry\"><h2>take <a class=\"fa-link\" href=\"./take\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L6654\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.take\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.take(array, [n&#x3D;1])</div>\n\n<div data-render-html=\"/take\"><p>从数组的起始元素开始提取 N 个元素。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">array</span> <span class=\"param-type\">(Array)</span> <div data-render-html=\"/#synthetic\"><p>需要处理的数组 </p>\n</div></li>\n<li><span class=\"param-name\">[n&#x3D;1]</span> <span class=\"param-type\">(number)</span> <div data-render-html=\"/#synthetic\"><p>要提取的个数 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Array)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回提取的元素数组</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >take</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => [1]</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >take</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => [1, 2]</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >take</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >5</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => [1, 2, 3]</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >take</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => []</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/takeRight",
  "html":"<div data-render-page=\"entry\"><h2>takeRight <a class=\"fa-link\" href=\"./takeRight\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L6686\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.takeright\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.takeRight(array, [n&#x3D;1])</div>\n\n<div data-render-html=\"/takeRight\"><p>从数组的结束元素开始提取 N 个数组</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">array</span> <span class=\"param-type\">(Array)</span> <div data-render-html=\"/#synthetic\"><p>需要处理的数组 </p>\n</div></li>\n<li><span class=\"param-name\">[n&#x3D;1]</span> <span class=\"param-type\">(number)</span> <div data-render-html=\"/#synthetic\"><p>要提取的个数 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Array)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回提取的元素数组</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >takeRight</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => [3]</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >takeRight</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => [2, 3]</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >takeRight</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >5</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => [1, 2, 3]</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >takeRight</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => []</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/takeRightWhile",
  "html":"<div data-render-page=\"entry\"><h2>takeRightWhile <a class=\"fa-link\" href=\"./takeRightWhile\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L6728\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.takerightwhile\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.takeRightWhile(array, [predicate&#x3D;_.identity])</div>\n\n<div data-render-html=\"/takeRightWhile\"><p>从数组的最右边开始提取数组，直到 <code>predicate</code> 返回假值。<code>predicate</code> 会传入三个参数：(value, index, array)。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">array</span> <span class=\"param-type\">(Array)</span> <div data-render-html=\"/#synthetic\"><p>需要处理的数组 </p>\n</div></li>\n<li><span class=\"param-name\">[predicate&#x3D;_.identity]</span> <span class=\"param-type\">(Function|Object|string)</span> <div data-render-html=\"/#synthetic\"><p>这个函数会处理每一个元素 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Array)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回提取的元素数组</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token keyword\" >var</span> users <span class=\"token operator\" >=</span> <span class=\"token punctuation\" >[</span>\n  <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'user'</span><span class=\"token punctuation\" >:</span> <span class=\"token string\" >'barney'</span><span class=\"token punctuation\" >,</span>  <span class=\"token string\" >'active'</span><span class=\"token punctuation\" >:</span> <span class=\"token keyword\" >true</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'user'</span><span class=\"token punctuation\" >:</span> <span class=\"token string\" >'fred'</span><span class=\"token punctuation\" >,</span>    <span class=\"token string\" >'active'</span><span class=\"token punctuation\" >:</span> <span class=\"token keyword\" >false</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'user'</span><span class=\"token punctuation\" >:</span> <span class=\"token string\" >'pebbles'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'active'</span><span class=\"token punctuation\" >:</span> <span class=\"token keyword\" >false</span> <span class=\"token punctuation\" >}</span>\n<span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >;</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >takeRightWhile</span><span class=\"token punctuation\" >(</span>users<span class=\"token punctuation\" >,</span> <span class=\"token keyword\" >function</span><span class=\"token punctuation\" >(</span>o<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span> <span class=\"token keyword\" >return</span> <span class=\"token operator\" >!</span>o<span class=\"token punctuation\" >.</span>active<span class=\"token punctuation\" >;</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 结果:  ['fred', 'pebbles']</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 使用了 `_.matches` 的回调处理</span>\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >takeRightWhile</span><span class=\"token punctuation\" >(</span>users<span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'user'</span><span class=\"token punctuation\" >:</span> <span class=\"token string\" >'pebbles'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'active'</span><span class=\"token punctuation\" >:</span> <span class=\"token keyword\" >false</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 结果:  ['pebbles']</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 使用了 `_.matchesProperty` 的回调处理</span>\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >takeRightWhile</span><span class=\"token punctuation\" >(</span>users<span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >[</span><span class=\"token string\" >'active'</span><span class=\"token punctuation\" >,</span> <span class=\"token keyword\" >false</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 结果:  ['fred', 'pebbles']</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 使用了 `_.property` 的回调处理</span>\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >takeRightWhile</span><span class=\"token punctuation\" >(</span>users<span class=\"token punctuation\" >,</span> <span class=\"token string\" >'active'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => []</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/takeWhile",
  "html":"<div data-render-page=\"entry\"><h2>takeWhile <a class=\"fa-link\" href=\"./takeWhile\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L6766\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.takewhile\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.takeWhile(array, [predicate&#x3D;_.identity])</div>\n\n<div data-render-html=\"/takeWhile\"><p>从数组的开始提取数组，直到 predicate 返回假值。predicate 会传入三个参数：(value, index, array)。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">array</span> <span class=\"param-type\">(Array)</span> <div data-render-html=\"/#synthetic\"><p>需要处理的数组 </p>\n</div></li>\n<li><span class=\"param-name\">[predicate&#x3D;_.identity]</span> <span class=\"param-type\">(Function|Object|string)</span> <div data-render-html=\"/#synthetic\"><p>这个函数会处理每一个元素 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Array)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回提取的元素数组</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token keyword\" >var</span> users <span class=\"token operator\" >=</span> <span class=\"token punctuation\" >[</span>\n  <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'user'</span><span class=\"token punctuation\" >:</span> <span class=\"token string\" >'barney'</span><span class=\"token punctuation\" >,</span>  <span class=\"token string\" >'active'</span><span class=\"token punctuation\" >:</span> <span class=\"token keyword\" >false</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'user'</span><span class=\"token punctuation\" >:</span> <span class=\"token string\" >'fred'</span><span class=\"token punctuation\" >,</span>    <span class=\"token string\" >'active'</span><span class=\"token punctuation\" >:</span> <span class=\"token keyword\" >false</span><span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'user'</span><span class=\"token punctuation\" >:</span> <span class=\"token string\" >'pebbles'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'active'</span><span class=\"token punctuation\" >:</span> <span class=\"token keyword\" >true</span> <span class=\"token punctuation\" >}</span>\n<span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >;</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >takeWhile</span><span class=\"token punctuation\" >(</span>users<span class=\"token punctuation\" >,</span> <span class=\"token keyword\" >function</span><span class=\"token punctuation\" >(</span>o<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span> <span class=\"token keyword\" >return</span> <span class=\"token operator\" >!</span>o<span class=\"token punctuation\" >.</span>active<span class=\"token punctuation\" >;</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => objects for ['barney', 'fred']</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 使用了 `_.matches` 的回调处理</span>\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >takeWhile</span><span class=\"token punctuation\" >(</span>users<span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'user'</span><span class=\"token punctuation\" >:</span> <span class=\"token string\" >'barney'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'active'</span><span class=\"token punctuation\" >:</span> <span class=\"token keyword\" >false</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// =>结果: ['barney']</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 使用了 `_.matchesProperty` 的回调处理</span>\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >takeWhile</span><span class=\"token punctuation\" >(</span>users<span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >[</span><span class=\"token string\" >'active'</span><span class=\"token punctuation\" >,</span> <span class=\"token keyword\" >false</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// =>结果: ['barney', 'fred']</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 使用了 `_.property` 的回调处理</span>\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >takeWhile</span><span class=\"token punctuation\" >(</span>users<span class=\"token punctuation\" >,</span> <span class=\"token string\" >'active'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => []</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/union",
  "html":"<div data-render-page=\"entry\"><h2>union <a class=\"fa-link\" href=\"./union\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L6785\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.union\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.union([arrays])</div>\n\n<div data-render-html=\"/union\"><p>创建顺序排列的唯一值组成的数组。所有值经过 <a href=\"http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero\" target=\"_blank\"><code>SameValueZero</code></a> 等值比较。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">[arrays]</span> <span class=\"param-type\">(...Array)</span> <div data-render-html=\"/#synthetic\"><p>需要处理的数组队列 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Array)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回处理好的数组</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >union</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >[</span><span class=\"token number\" >4</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >[</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => [2, 1, 4]</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/unionBy",
  "html":"<div data-render-page=\"entry\"><h2>unionBy <a class=\"fa-link\" href=\"./unionBy\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L6807\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.unionby\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.unionBy([arrays], [iteratee&#x3D;_.identity])</div>\n\n<div data-render-html=\"/unionBy\"><p>这个方法类似 <code>_.union</code>，除了它接受一个 iteratee 调用每一个数组和值。iteratee 会传入一个参数：(value)。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">[arrays]</span> <span class=\"param-type\">(...Array)</span> <div data-render-html=\"/#synthetic\"><p>需要处理的数组队列 </p>\n</div></li>\n<li><span class=\"param-name\">[iteratee&#x3D;_.identity]</span> <span class=\"param-type\">(Function|Object|string)</span> <div data-render-html=\"/#synthetic\"><p>这个函数会处理每一个元素 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Array)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回处理好的数组</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >unionBy</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token number\" >2.1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >1.2</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >[</span><span class=\"token number\" >4.3</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2.4</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> Math<span class=\"token punctuation\" >.</span>floor<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => [2.1, 1.2, 4.3]</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 使用了 `_.property` 的回调结果</span>\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >unionBy</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token punctuation\" >{</span> <span class=\"token string\" >'x'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >[</span><span class=\"token punctuation\" >{</span> <span class=\"token string\" >'x'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'x'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'x'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => [{ 'x': 1 }, { 'x': 2 }]</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/unionWith",
  "html":"<div data-render-page=\"entry\"><h2>unionWith <a class=\"fa-link\" href=\"./unionWith\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L6833\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.unionwith\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.unionWith([arrays], [comparator])</div>\n\n<div data-render-html=\"/unionWith\"><p>这个方法类似 <code>_.union</code>，\n除了它接受一个 comparator 调用每一个数组元素的值。 comparator 会传入2个参数：(arrVal, othVal)。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">[arrays]</span> <span class=\"param-type\">(...Array)</span> <div data-render-html=\"/#synthetic\"><p>需要处理的数组队列 </p>\n</div></li>\n<li><span class=\"param-name\">[comparator]</span> <span class=\"param-type\">(Function)</span> <div data-render-html=\"/#synthetic\"><p>这个函数会处理每一个元素 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Array)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回处理好的数组</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token keyword\" >var</span> objects <span class=\"token operator\" >=</span> <span class=\"token punctuation\" >[</span><span class=\"token punctuation\" >{</span> <span class=\"token string\" >'x'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'y'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'x'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'y'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >;</span>\n<span class=\"token keyword\" >var</span> others <span class=\"token operator\" >=</span> <span class=\"token punctuation\" >[</span><span class=\"token punctuation\" >{</span> <span class=\"token string\" >'x'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'y'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'x'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'y'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >;</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >unionWith</span><span class=\"token punctuation\" >(</span>objects<span class=\"token punctuation\" >,</span> others<span class=\"token punctuation\" >,</span> _<span class=\"token punctuation\" >.</span>isEqual<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/uniq",
  "html":"<div data-render-page=\"entry\"><h2>uniq <a class=\"fa-link\" href=\"./uniq\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L6854\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.uniq\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.uniq(array)</div>\n\n<div data-render-html=\"/uniq\"><p>创建一个不重复的数组副本。使用了 <a href=\"http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero\" target=\"_blank\"><code>SameValueZero</code></a> 等值比较。只有首次出现的元素才会被保留。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">array</span> <span class=\"param-type\">(Array)</span> <div data-render-html=\"/#synthetic\"><p>需要处理的数组 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Array)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回不重复的数组</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >uniq</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => [2, 1]</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/uniqBy",
  "html":"<div data-render-page=\"entry\"><h2>uniqBy <a class=\"fa-link\" href=\"./uniqBy\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L6878\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.uniqby\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.uniqBy(array, [iteratee&#x3D;_.identity])</div>\n\n<div data-render-html=\"/uniqBy\"><p>这个方法类似 <code>_.uniq</code>，除了它接受一个 iteratee 调用每一个数组和值来计算唯一性。iteratee 会传入一个参数：(value)。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">array</span> <span class=\"param-type\">(Array)</span> <div data-render-html=\"/#synthetic\"><p>需要处理的数组 </p>\n</div></li>\n<li><span class=\"param-name\">[iteratee&#x3D;_.identity]</span> <span class=\"param-type\">(Function|Object|string)</span> <div data-render-html=\"/#synthetic\"><p>这个函数会处理每一个元素 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Array)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回不重复的数组</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >uniqBy</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token number\" >2.1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >1.2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2.3</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> Math<span class=\"token punctuation\" >.</span>floor<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => [2.1, 1.2]</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 使用了 `_.property` 的回调结果</span>\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >uniqBy</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token punctuation\" >{</span> <span class=\"token string\" >'x'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'x'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'x'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'x'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => [{ 'x': 1 }, { 'x': 2 }]</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/uniqWith",
  "html":"<div data-render-page=\"entry\"><h2>uniqWith <a class=\"fa-link\" href=\"./uniqWith\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L6900\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.uniqwith\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.uniqWith(array, [comparator])</div>\n\n<div data-render-html=\"/uniqWith\"><p>这个方法类似 <code>_.uniq</code>，除了它接受一个 <code>comparator</code> 来比较计算唯一性。 <code>comparator</code> 会传入2个参数：(arrVal, othVal)</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">array</span> <span class=\"param-type\">(Array)</span> <div data-render-html=\"/#synthetic\"><p>需要处理的数组 </p>\n</div></li>\n<li><span class=\"param-name\">[comparator]</span> <span class=\"param-type\">(Function)</span> <div data-render-html=\"/#synthetic\"><p>这个函数会处理每一个元素 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Array)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回不重复的数组</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token keyword\" >var</span> objects <span class=\"token operator\" >=</span> <span class=\"token punctuation\" >[</span><span class=\"token punctuation\" >{</span> <span class=\"token string\" >'x'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'y'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'x'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'y'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>  <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'x'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'y'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >;</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >uniqWith</span><span class=\"token punctuation\" >(</span>objects<span class=\"token punctuation\" >,</span> _<span class=\"token punctuation\" >.</span>isEqual<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/unzip",
  "html":"<div data-render-page=\"entry\"><h2>unzip <a class=\"fa-link\" href=\"./unzip\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L6922\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.unzip\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.unzip(array)</div>\n\n<div data-render-html=\"/unzip\"><p>这个方法类似 <code>_.zip</code>，除了它接收一个打包后的数组并且还原为打包前的状态。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">array</span> <span class=\"param-type\">(Array)</span> <div data-render-html=\"/#synthetic\"><p>需要解包的已打包数组 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Array)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回一个解包后的数组</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token keyword\" >var</span> zipped <span class=\"token operator\" >=</span> _<span class=\"token punctuation\" >.</span><span class=\"token function\" >zip</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token string\" >'fred'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'barney'</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >[</span><span class=\"token number\" >30</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >40</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >[</span><span class=\"token keyword\" >true</span><span class=\"token punctuation\" >,</span> <span class=\"token keyword\" >false</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => [['fred', 30, true], ['barney', 40, false]]</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >unzip</span><span class=\"token punctuation\" >(</span>zipped<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => [['fred', 'barney'], [30, 40], [true, false]]</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/unzipWith",
  "html":"<div data-render-page=\"entry\"><h2>unzipWith <a class=\"fa-link\" href=\"./unzipWith\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L6955\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.unzipwith\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.unzipWith(array, [iteratee&#x3D;_.identity])</div>\n\n<div data-render-html=\"/unzipWith\"><p>这个方法类似 <code>_.unzip</code>，除了它接受一个 iteratee 来决定如何重组解包后的数组。iteratee 会传入4个参数：(accumulator, value, index, group)。每组的第一个元素作为初始化的值</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">array</span> <span class=\"param-type\">(Array)</span> <div data-render-html=\"/#synthetic\"><p>需要解包的已打包数组 </p>\n</div></li>\n<li><span class=\"param-name\">[iteratee&#x3D;_.identity]</span> <span class=\"param-type\">(Function)</span> <div data-render-html=\"/#synthetic\"><p>决定如何重组解包后的元素 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Array)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回一个解包后的数组</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token keyword\" >var</span> zipped <span class=\"token operator\" >=</span> _<span class=\"token punctuation\" >.</span><span class=\"token function\" >zip</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >[</span><span class=\"token number\" >10</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >20</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >[</span><span class=\"token number\" >100</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >200</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => [[1, 10, 100], [2, 20, 200]]</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >unzipWith</span><span class=\"token punctuation\" >(</span>zipped<span class=\"token punctuation\" >,</span> _<span class=\"token punctuation\" >.</span>add<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => [3, 30, 300]</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/without",
  "html":"<div data-render-page=\"entry\"><h2>without <a class=\"fa-link\" href=\"./without\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L6982\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.without\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.without(array, [values])</div>\n\n<div data-render-html=\"/without\"><p>创建一个移除了所有提供的 values 的数组。使用了 <a href=\"http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero\" target=\"_blank\"><code>SameValueZero</code></a> 等值比较。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">array</span> <span class=\"param-type\">(Array)</span> <div data-render-html=\"/#synthetic\"><p>要处理的数组 </p>\n</div></li>\n<li><span class=\"param-name\">[values]</span> <span class=\"param-type\">(...*)</span> <div data-render-html=\"/#synthetic\"><p>要排除的值 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Array)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回一个处理好的新数组</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >without</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => [3]</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/xor",
  "html":"<div data-render-page=\"entry\"><h2>xor <a class=\"fa-link\" href=\"./xor\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L7001\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.xor\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.xor([arrays])</div>\n\n<div data-render-html=\"/xor\"><p>创建一个包含了所有唯一值的数组。使用了 <a href=\"https://en.wikipedia.org/wiki/Symmetric_difference\" target=\"_blank\">symmetric difference</a> 等值比较。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">[arrays]</span> <span class=\"param-type\">(...Array)</span> <div data-render-html=\"/#synthetic\"><p>要处理的数组 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Array)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 包含了所有唯一值的新数组</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >xor</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >[</span><span class=\"token number\" >4</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => [1, 4]</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/xorBy",
  "html":"<div data-render-page=\"entry\"><h2>xorBy <a class=\"fa-link\" href=\"./xorBy\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L7023\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.xorby\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.xorBy([arrays], [iteratee&#x3D;_.identity])</div>\n\n<div data-render-html=\"/xorBy\"><p>这个方法类似 <code>_.xor</code>，除了它接受一个 iteratee 调用每一个数组和值。iteratee 会传入一个参数：(value)。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">[arrays]</span> <span class=\"param-type\">(...Array)</span> <div data-render-html=\"/#synthetic\"><p>要处理的数组 </p>\n</div></li>\n<li><span class=\"param-name\">[iteratee&#x3D;_.identity]</span> <span class=\"param-type\">(Function|Object|string)</span> <div data-render-html=\"/#synthetic\"><p>这个函数会处理每一个元素 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Array)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 包含了所有唯一值的新数组</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >xorBy</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token number\" >2.1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >1.2</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >[</span><span class=\"token number\" >4.3</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2.4</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> Math<span class=\"token punctuation\" >.</span>floor<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => [1.2, 4.3]</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 使用了 `_.property` 的回调结果</span>\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >xorBy</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token punctuation\" >{</span> <span class=\"token string\" >'x'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >[</span><span class=\"token punctuation\" >{</span> <span class=\"token string\" >'x'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'x'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'x'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => [{ 'x': 2 }]</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/xorWith",
  "html":"<div data-render-page=\"entry\"><h2>xorWith <a class=\"fa-link\" href=\"./xorWith\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L7048\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.xorwith\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.xorWith([arrays], [comparator])</div>\n\n<div data-render-html=\"/xorWith\"><p>这个方法类似 <code>_.xor</code>，除了它接受一个 comparator 调用每一个数组元素的值。 comparator 会传入2个参数：(arrVal, othVal)。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">[arrays]</span> <span class=\"param-type\">(...Array)</span> <div data-render-html=\"/#synthetic\"><p>要处理的数组 </p>\n</div></li>\n<li><span class=\"param-name\">[comparator]</span> <span class=\"param-type\">(Function)</span> <div data-render-html=\"/#synthetic\"><p>这个函数会处理每一个元素 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Array)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 包含了所有唯一值的新数组</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token keyword\" >var</span> objects <span class=\"token operator\" >=</span> <span class=\"token punctuation\" >[</span><span class=\"token punctuation\" >{</span> <span class=\"token string\" >'x'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'y'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'x'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'y'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >;</span>\n<span class=\"token keyword\" >var</span> others <span class=\"token operator\" >=</span> <span class=\"token punctuation\" >[</span><span class=\"token punctuation\" >{</span> <span class=\"token string\" >'x'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'y'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'x'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'y'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >;</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >xorWith</span><span class=\"token punctuation\" >(</span>objects<span class=\"token punctuation\" >,</span> others<span class=\"token punctuation\" >,</span> _<span class=\"token punctuation\" >.</span>isEqual<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/zip",
  "html":"<div data-render-page=\"entry\"><h2>zip <a class=\"fa-link\" href=\"./zip\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L7069\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.zip\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.zip([arrays])</div>\n\n<div data-render-html=\"/zip\"><p>创建一个打包所有元素后的数组。第一个元素包含所有提供数组的第一个元素，第二个包含所有提供数组的第二个元素，以此类推。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">[arrays]</span> <span class=\"param-type\">(...Array)</span> <div data-render-html=\"/#synthetic\"><p>要处理的数组队列 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Array)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回一个打包后的数组</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >zip</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token string\" >'fred'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'barney'</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >[</span><span class=\"token number\" >30</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >40</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >[</span><span class=\"token keyword\" >true</span><span class=\"token punctuation\" >,</span> <span class=\"token keyword\" >false</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => [['fred', 30, true], ['barney', 40, false]]</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/zipObject",
  "html":"<div data-render-page=\"entry\"><h2>zipObject <a class=\"fa-link\" href=\"./zipObject\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L7085\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.zipobject\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.zipObject([props&#x3D;[]], [values&#x3D;[]])</div>\n\n<div data-render-html=\"/zipObject\"><p>这个方法类似 <code>_.fromPairs</code>，除了它接受2个数组，一个作为属性名，一个作为属性值。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">[props&#x3D;[]]</span> <span class=\"param-type\">(Array)</span> <div data-render-html=\"/#synthetic\"><p>属性名 </p>\n</div></li>\n<li><span class=\"param-name\">[values&#x3D;[]]</span> <span class=\"param-type\">(Array)</span> <div data-render-html=\"/#synthetic\"><p>属性值 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Object)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回一个新的对象</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >zipObject</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token string\" >'a'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'b'</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >[</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => { 'a': 1, 'b': 2 }</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/zipObjectDeep",
  "html":"<div data-render-page=\"entry\"><h2>zipObjectDeep <a class=\"fa-link\" href=\"./zipObjectDeep\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L7105\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.zipobjectdeep\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.zipObjectDeep([props&#x3D;[]], [values&#x3D;[]])</div>\n\n<div data-render-html=\"/zipObjectDeep\"><p>这个方法类似 <code>_.zipObject</code>，除了它支持属性路径。\nThis method is like <code>_.zipObject</code> except that it supports property paths.</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">[props&#x3D;[]]</span> <span class=\"param-type\">(Array)</span> <div data-render-html=\"/#synthetic\"><p>属性名 </p>\n</div></li>\n<li><span class=\"param-name\">[values&#x3D;[]]</span> <span class=\"param-type\">(Array)</span> <div data-render-html=\"/#synthetic\"><p>属性值 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Object)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回新的对象</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >zipObjectDeep</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token string\" >'a.b[0].c'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'a.b[1].d'</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >[</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/zipWith",
  "html":"<div data-render-page=\"entry\"><h2>zipWith <a class=\"fa-link\" href=\"./zipWith\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L7127\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.zipwith\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.zipWith([arrays])</div>\n\n<div data-render-html=\"/zipWith\"><p>这个方法类似 _.zip，\n除了它接受一个 iteratee 决定如何重组值。\niteratee 会调用每一组元素。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">[arrays]</span> <span class=\"param-type\">(...Array)</span> <div data-render-html=\"/#synthetic\"><p>要处理的数组队列 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Array)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回一个打包后的数组</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >zipWith</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >[</span><span class=\"token number\" >10</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >20</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >[</span><span class=\"token number\" >100</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >200</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> <span class=\"token keyword\" >function</span><span class=\"token punctuation\" >(</span>a<span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >,</span> c<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span>\n  <span class=\"token keyword\" >return</span> a <span class=\"token operator\" >+</span> b <span class=\"token operator\" >+</span> c<span class=\"token punctuation\" >;</span>\n<span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => [111, 222]</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/countBy",
  "html":"<div data-render-page=\"entry\"><h2>countBy <a class=\"fa-link\" href=\"./countBy\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L7504\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.countby\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.countBy(collection, [iteratee&#x3D;_.identity])</div>\n\n<div data-render-html=\"/countBy\"><p>创建一个组成对象，key是经过 <code>iteratee</code> 处理的集合的结果，value 是处理结果的次数。 <code>iteratee</code> 会传入一个参数：(value)。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">collection</span> <span class=\"param-type\">(Array|Object)</span> <div data-render-html=\"/#synthetic\"><p>需要遍历的集合 </p>\n</div></li>\n<li><span class=\"param-name\">[iteratee&#x3D;_.identity]</span> <span class=\"param-type\">(Function|Object|string)</span> <div data-render-html=\"/#synthetic\"><p>这个函数会处理每一个元素 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Object)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回一个组成汇总的对象</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >countBy</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token number\" >6.1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >4.2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >6.3</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> Math<span class=\"token punctuation\" >.</span>floor<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => { '4': 1, '6': 2 }</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >countBy</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token string\" >'one'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'two'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'three'</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'length'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => { '3': 2, '5': 1 }</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/every",
  "html":"<div data-render-page=\"entry\"><h2>every <a class=\"fa-link\" href=\"./every\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L7541\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.every\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.every(collection, [predicate&#x3D;_.identity])</div>\n\n<div data-render-html=\"/every\"><p>通过 <code>predicate</code> 检查集合中的元素是否都返回 真值，只要 <code>predicate</code> 返回一次假值，遍历就停止，并返回 false。\n<code>predicate</code> 会传入3个参数：(value, index|key, collection)</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">collection</span> <span class=\"param-type\">(Array|Object)</span> <div data-render-html=\"/#synthetic\"><p>需要遍历的集合 </p>\n</div></li>\n<li><span class=\"param-name\">[predicate&#x3D;_.identity]</span> <span class=\"param-type\">(Function|Object|string)</span> <div data-render-html=\"/#synthetic\"><p>这个函数会处理每一个元素 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(boolean)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回 true，如果所有元素经 predicate 检查都为真值，否则返回 false。</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >every</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token keyword\" >true</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token keyword\" >null</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'yes'</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> Boolean<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => false</span>\n\n<span class=\"token keyword\" >var</span> users <span class=\"token operator\" >=</span> <span class=\"token punctuation\" >[</span>\n  <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'user'</span><span class=\"token punctuation\" >:</span> <span class=\"token string\" >'barney'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'active'</span><span class=\"token punctuation\" >:</span> <span class=\"token keyword\" >false</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'user'</span><span class=\"token punctuation\" >:</span> <span class=\"token string\" >'fred'</span><span class=\"token punctuation\" >,</span>   <span class=\"token string\" >'active'</span><span class=\"token punctuation\" >:</span> <span class=\"token keyword\" >false</span> <span class=\"token punctuation\" >}</span>\n<span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 使用了 `_.matches` 的回调结果</span>\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >every</span><span class=\"token punctuation\" >(</span>users<span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'user'</span><span class=\"token punctuation\" >:</span> <span class=\"token string\" >'barney'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'active'</span><span class=\"token punctuation\" >:</span> <span class=\"token keyword\" >false</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => false</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 使用了 `_.matchesProperty` 的回调结果</span>\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >every</span><span class=\"token punctuation\" >(</span>users<span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >[</span><span class=\"token string\" >'active'</span><span class=\"token punctuation\" >,</span> <span class=\"token keyword\" >false</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => true</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 使用了 `_.property` 的回调结果</span>\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >every</span><span class=\"token punctuation\" >(</span>users<span class=\"token punctuation\" >,</span> <span class=\"token string\" >'active'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => false</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/filter",
  "html":"<div data-render-page=\"entry\"><h2>filter <a class=\"fa-link\" href=\"./filter\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L7582\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.filter\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.filter(collection, [predicate&#x3D;_.identity])</div>\n\n<div data-render-html=\"/filter\"><p>遍历集合中的元素，筛选出一个经过 <code>predicate</code> 检查结果为真值的数组，predicate 会传入3个参数：(value, index|key, collection)。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">collection</span> <span class=\"param-type\">(Array|Object)</span> <div data-render-html=\"/#synthetic\"><p>需要遍历的集合 </p>\n</div></li>\n<li><span class=\"param-name\">[predicate&#x3D;_.identity]</span> <span class=\"param-type\">(Function|Object|string)</span> <div data-render-html=\"/#synthetic\"><p>这个函数会处理每一个元素 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Array)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回筛选结果的新数组</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token keyword\" >var</span> resolve <span class=\"token operator\" >=</span> _<span class=\"token punctuation\" >.</span><span class=\"token function\" >partial</span><span class=\"token punctuation\" >(</span>_<span class=\"token punctuation\" >.</span>map<span class=\"token punctuation\" >,</span> _<span class=\"token punctuation\" >,</span> <span class=\"token string\" >'user'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n\n<span class=\"token keyword\" >var</span> users <span class=\"token operator\" >=</span> <span class=\"token punctuation\" >[</span>\n  <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'user'</span><span class=\"token punctuation\" >:</span> <span class=\"token string\" >'barney'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'age'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >36</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'active'</span><span class=\"token punctuation\" >:</span> <span class=\"token keyword\" >true</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'user'</span><span class=\"token punctuation\" >:</span> <span class=\"token string\" >'fred'</span><span class=\"token punctuation\" >,</span>   <span class=\"token string\" >'age'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >40</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'active'</span><span class=\"token punctuation\" >:</span> <span class=\"token keyword\" >false</span> <span class=\"token punctuation\" >}</span>\n<span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >;</span>\n\n<span class=\"token function\" >resolve</span><span class=\"token punctuation\" >(</span> _<span class=\"token punctuation\" >.</span><span class=\"token function\" >filter</span><span class=\"token punctuation\" >(</span>users<span class=\"token punctuation\" >,</span> <span class=\"token keyword\" >function</span><span class=\"token punctuation\" >(</span>o<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span> <span class=\"token keyword\" >return</span> <span class=\"token operator\" >!</span>o<span class=\"token punctuation\" >.</span>active<span class=\"token punctuation\" >;</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => ['fred']</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 使用了 `_.matches` 的回调结果</span>\n<span class=\"token function\" >resolve</span><span class=\"token punctuation\" >(</span> _<span class=\"token punctuation\" >.</span><span class=\"token function\" >filter</span><span class=\"token punctuation\" >(</span>users<span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'age'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >36</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'active'</span><span class=\"token punctuation\" >:</span> <span class=\"token keyword\" >true</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => ['barney']</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 使用了 `_.matchesProperty` 的回调结果</span>\n<span class=\"token function\" >resolve</span><span class=\"token punctuation\" >(</span> _<span class=\"token punctuation\" >.</span><span class=\"token function\" >filter</span><span class=\"token punctuation\" >(</span>users<span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >[</span><span class=\"token string\" >'active'</span><span class=\"token punctuation\" >,</span> <span class=\"token keyword\" >false</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => ['fred']</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 使用了 `_.property` 的回调结果</span>\n<span class=\"token function\" >resolve</span><span class=\"token punctuation\" >(</span> _<span class=\"token punctuation\" >.</span><span class=\"token function\" >filter</span><span class=\"token punctuation\" >(</span>users<span class=\"token punctuation\" >,</span> <span class=\"token string\" >'active'</span><span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => ['barney']</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/find",
  "html":"<div data-render-page=\"entry\"><h2>find <a class=\"fa-link\" href=\"./find\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L7619\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.find\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.find(collection, [predicate&#x3D;_.identity])</div>\n\n<div data-render-html=\"/find\"><p>遍历集合中的元素，返回最先经 <code>predicate</code> 检查为真值的元素。 predicate 会传入3个元素：(value, index|key, collection)。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">collection</span> <span class=\"param-type\">(Array|Object)</span> <div data-render-html=\"/#synthetic\"><p>要检索的集合 </p>\n</div></li>\n<li><span class=\"param-name\">[predicate&#x3D;_.identity]</span> <span class=\"param-type\">(Function|Object|string)</span> <div data-render-html=\"/#synthetic\"><p>这个函数会处理每一个元素 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(*)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回匹配元素，否则返回 <code>undefined</code></p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token keyword\" >var</span> users <span class=\"token operator\" >=</span> <span class=\"token punctuation\" >[</span>\n  <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'user'</span><span class=\"token punctuation\" >:</span> <span class=\"token string\" >'barney'</span><span class=\"token punctuation\" >,</span>  <span class=\"token string\" >'age'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >36</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'active'</span><span class=\"token punctuation\" >:</span> <span class=\"token keyword\" >true</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'user'</span><span class=\"token punctuation\" >:</span> <span class=\"token string\" >'fred'</span><span class=\"token punctuation\" >,</span>    <span class=\"token string\" >'age'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >40</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'active'</span><span class=\"token punctuation\" >:</span> <span class=\"token keyword\" >false</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'user'</span><span class=\"token punctuation\" >:</span> <span class=\"token string\" >'pebbles'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'age'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span>  <span class=\"token string\" >'active'</span><span class=\"token punctuation\" >:</span> <span class=\"token keyword\" >true</span> <span class=\"token punctuation\" >}</span>\n<span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >;</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >find</span><span class=\"token punctuation\" >(</span>users<span class=\"token punctuation\" >,</span> <span class=\"token keyword\" >function</span><span class=\"token punctuation\" >(</span>o<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span> <span class=\"token keyword\" >return</span> o<span class=\"token punctuation\" >.</span>age <span class=\"token operator\" >&lt;</span> <span class=\"token number\" >40</span><span class=\"token punctuation\" >;</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 结果: 'barney'</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 使用了 `_.matches` 的回调结果</span>\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >find</span><span class=\"token punctuation\" >(</span>users<span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'age'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'active'</span><span class=\"token punctuation\" >:</span> <span class=\"token keyword\" >true</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 结果: 'pebbles'</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 使用了 `_.matchesProperty` 的回调结果</span>\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >find</span><span class=\"token punctuation\" >(</span>users<span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >[</span><span class=\"token string\" >'active'</span><span class=\"token punctuation\" >,</span> <span class=\"token keyword\" >false</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 结果: 'fred'</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 使用了 `_.property` 的回调结果</span>\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >find</span><span class=\"token punctuation\" >(</span>users<span class=\"token punctuation\" >,</span> <span class=\"token string\" >'active'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 结果: 'barney'</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/findLast",
  "html":"<div data-render-page=\"entry\"><h2>findLast <a class=\"fa-link\" href=\"./findLast\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L7644\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.findlast\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.findLast(collection, [predicate&#x3D;_.identity])</div>\n\n<div data-render-html=\"/findLast\"><p>这个方法类似 <code>_.find</code>，除了它是从右至左遍历集合的。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">collection</span> <span class=\"param-type\">(Array|Object)</span> <div data-render-html=\"/#synthetic\"><p>要检索的集合 </p>\n</div></li>\n<li><span class=\"param-name\">[predicate&#x3D;_.identity]</span> <span class=\"param-type\">(Function|Object|string)</span> <div data-render-html=\"/#synthetic\"><p>这个函数会处理每一个元素 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(*)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回匹配元素，否则返回 <code>undefined</code></p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >findLast</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >4</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> <span class=\"token keyword\" >function</span><span class=\"token punctuation\" >(</span>n<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span>\n  <span class=\"token keyword\" >return</span> n <span class=\"token operator\" >%</span> <span class=\"token number\" >2</span> <span class=\"token operator\" >==</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >;</span>\n<span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 3</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/flatMap",
  "html":"<div data-render-page=\"entry\"><h2>flatMap <a class=\"fa-link\" href=\"./flatMap\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L7672\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.flatmap\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.flatMap(collection, [iteratee&#x3D;_.identity])</div>\n\n<div data-render-html=\"/flatMap\"><p>创建一个扁平化的数组，每一个值会传入 iteratee 处理，处理结果会与值合并。\niteratee 会传入3个参数：(value, index|key, array)。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">collection</span> <span class=\"param-type\">(Array|Object)</span> <div data-render-html=\"/#synthetic\"><p>需要遍历的数组 </p>\n</div></li>\n<li><span class=\"param-name\">[iteratee&#x3D;_.identity]</span> <span class=\"param-type\">(Function|Object|string)</span> <div data-render-html=\"/#synthetic\"><p>这个函数会在每一次迭代调用 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Array)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回新数组</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token keyword\" >function</span> <span class=\"token function\" >duplicate</span><span class=\"token punctuation\" >(</span>n<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span>\n  <span class=\"token keyword\" >return</span> <span class=\"token punctuation\" >[</span>n<span class=\"token punctuation\" >,</span> n<span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >;</span>\n<span class=\"token punctuation\" >}</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >flatMap</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> duplicate<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => [1, 1, 2, 2]</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/forEach",
  "html":"<div data-render-page=\"entry\"><h2>forEach <span class=\"aliases\">each</span> <a class=\"fa-link\" href=\"./forEach\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L7702\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.foreach\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.forEach(collection, [iteratee&#x3D;_.identity])</div>\n\n<div data-render-html=\"/forEach\"><p>调用 iteratee 遍历集合中的元素，\niteratee 会传入3个参数：(value, index|key, collection)。\n如果显式的返回 false ，iteratee 会提前退出。\n<br>\n<br>\n<strong>注意:</strong> 与其他集合方法一样，对象的 length 属性也会被遍历，避免这种情况，可以用 _.forIn 或者 _.forOwn 代替。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">collection</span> <span class=\"param-type\">(Array|Object)</span> <div data-render-html=\"/#synthetic\"><p>需要遍历的集合 </p>\n</div></li>\n<li><span class=\"param-name\">[iteratee&#x3D;_.identity]</span> <span class=\"param-type\">(Function)</span> <div data-render-html=\"/#synthetic\"><p>这个函数会处理每一个元素 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Array|Object)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回集合</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token function\" >_</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >forEach</span><span class=\"token punctuation\" >(</span><span class=\"token keyword\" >function</span><span class=\"token punctuation\" >(</span>value<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span>\n  console<span class=\"token punctuation\" >.</span><span class=\"token function\" >log</span><span class=\"token punctuation\" >(</span>value<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 输出 `1` 和 `2`</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >forEach</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> <span class=\"token string\" >'a'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'b'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span> <span class=\"token keyword\" >function</span><span class=\"token punctuation\" >(</span>value<span class=\"token punctuation\" >,</span> key<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span>\n  console<span class=\"token punctuation\" >.</span><span class=\"token function\" >log</span><span class=\"token punctuation\" >(</span>key<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 输出 'a' 和 'b' (不保证遍历的顺序)</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/forEachRight",
  "html":"<div data-render-page=\"entry\"><h2>forEachRight <span class=\"aliases\">eachRight</span> <a class=\"fa-link\" href=\"./forEachRight\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L7725\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.foreachright\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.forEachRight(collection, [iteratee&#x3D;_.identity])</div>\n\n<div data-render-html=\"/forEachRight\"><p>这个方法类似 <code>_.forEach</code>，除了它是从右到左遍历的集合中的元素的。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">collection</span> <span class=\"param-type\">(Array|Object)</span> <div data-render-html=\"/#synthetic\"><p>需要遍历的集合 </p>\n</div></li>\n<li><span class=\"param-name\">[iteratee&#x3D;_.identity]</span> <span class=\"param-type\">(Function)</span> <div data-render-html=\"/#synthetic\"><p>这个函数会处理每一个元素 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Array|Object)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回集合</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >forEachRight</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> <span class=\"token keyword\" >function</span><span class=\"token punctuation\" >(</span>value<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span>\n  console<span class=\"token punctuation\" >.</span><span class=\"token function\" >log</span><span class=\"token punctuation\" >(</span>value<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 输出 `2` 和 `1`</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/groupBy",
  "html":"<div data-render-page=\"entry\"><h2>groupBy <a class=\"fa-link\" href=\"./groupBy\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L7749\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.groupby\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.groupBy(collection, [iteratee&#x3D;_.identity])</div>\n\n<div data-render-html=\"/groupBy\"><p>创建一个对象组成，key 是经 iteratee 处理的结果， value 是产生 key 的元素数组。 iteratee 会传入1个参数：(value)。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">collection</span> <span class=\"param-type\">(Array|Object)</span> <div data-render-html=\"/#synthetic\"><p>需要遍历的集合 </p>\n</div></li>\n<li><span class=\"param-name\">[iteratee&#x3D;_.identity]</span> <span class=\"param-type\">(Function|Object|string)</span> <div data-render-html=\"/#synthetic\"><p>这个函数会处理每一个元素 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Object)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回一个组成汇总的对象</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >groupBy</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token number\" >6.1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >4.2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >6.3</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> Math<span class=\"token punctuation\" >.</span>floor<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => { '4': [4.2], '6': [6.1, 6.3] }</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 使用了 `_.property` 的回调结果</span>\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >groupBy</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token string\" >'one'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'two'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'three'</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'length'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => { '3': ['one', 'two'], '5': ['three'] }</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/includes",
  "html":"<div data-render-page=\"entry\"><h2>includes <a class=\"fa-link\" href=\"./includes\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L7785\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.includes\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.includes(collection, value, [fromIndex&#x3D;0])</div>\n\n<div data-render-html=\"/includes\"><p>检查 值 是否在 集合中，如果集合是字符串，那么检查 值 是否在字符串中。\n其他情况用 <a href=\"http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero\" target=\"_blank\"><code>SameValueZero</code></a> 等值比较。\n如果指定 <code>fromIndex</code> 是负数，从结尾开始检索。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">collection</span> <span class=\"param-type\">(Array|Object|string)</span> <div data-render-html=\"/#synthetic\"><p>要检索的集合 </p>\n</div></li>\n<li><span class=\"param-name\">value</span> <span class=\"param-type\">(*)</span> <div data-render-html=\"/#synthetic\"><p>要检索的值 </p>\n</div></li>\n<li><span class=\"param-name\">[fromIndex&#x3D;0]</span> <span class=\"param-type\">(number)</span> <div data-render-html=\"/#synthetic\"><p>要检索的 index 位置 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(boolean)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 如果找到 value 返回 ture， 否则返回 false。</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >includes</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => true</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >includes</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => false</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >includes</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> <span class=\"token string\" >'user'</span><span class=\"token punctuation\" >:</span> <span class=\"token string\" >'fred'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'age'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >40</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'fred'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => true</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >includes</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'pebbles'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'eb'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => true</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/invokeMap",
  "html":"<div data-render-page=\"entry\"><h2>invokeMap <a class=\"fa-link\" href=\"./invokeMap\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L7818\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.invokemap\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.invokeMap(collection, path, [args])</div>\n\n<div data-render-html=\"/invokeMap\"><p>调用 <code>path</code> 的方法处理集合中的每一个元素，返回处理的数组。\n如何附加的参数会传入到调用方法中。如果方法名是个函数，集合中的每个元素都会被调用到。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">collection</span> <span class=\"param-type\">(Array|Object)</span> <div data-render-html=\"/#synthetic\"><p>需要遍历的集合 </p>\n</div></li>\n<li><span class=\"param-name\">path</span> <span class=\"param-type\">(Array|Function|string)</span> <div data-render-html=\"/#synthetic\"><p>要调用的方法名 或者 这个函数会处理每一个元素 </p>\n</div></li>\n<li><span class=\"param-name\">[args]</span> <span class=\"param-type\">(...*)</span> <div data-render-html=\"/#synthetic\"><p>The arguments to invoke each method with. </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Array)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回数组结果</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >invokeMap</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token punctuation\" >[</span><span class=\"token number\" >5</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >7</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >[</span><span class=\"token number\" >3</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'sort'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => [[1, 5, 7], [1, 2, 3]]</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >invokeMap</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token number\" >123</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >456</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> String<span class=\"token punctuation\" >.</span>prototype<span class=\"token punctuation\" >.</span>split<span class=\"token punctuation\" >,</span> <span class=\"token string\" >''</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => [['1', '2', '3'], ['4', '5', '6']]</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/keyBy",
  "html":"<div data-render-page=\"entry\"><h2>keyBy <a class=\"fa-link\" href=\"./keyBy\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L7856\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.keyby\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.keyBy(collection, [iteratee&#x3D;_.identity])</div>\n\n<div data-render-html=\"/keyBy\"><p>创建一个对象组成。key 是经 <code>iteratee</code> 处理的结果，value 是产生key的元素。\niteratee 会传入1个参数：(value)。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">collection</span> <span class=\"param-type\">(Array|Object)</span> <div data-render-html=\"/#synthetic\"><p>需要遍历的集合 </p>\n</div></li>\n<li><span class=\"param-name\">[iteratee&#x3D;_.identity]</span> <span class=\"param-type\">(Function|Object|string)</span> <div data-render-html=\"/#synthetic\"><p>这个函数会处理每一个元素 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Object)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回一个组成汇总的对象</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token keyword\" >var</span> array <span class=\"token operator\" >=</span> <span class=\"token punctuation\" >[</span>\n  <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'dir'</span><span class=\"token punctuation\" >:</span> <span class=\"token string\" >'left'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'code'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >97</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'dir'</span><span class=\"token punctuation\" >:</span> <span class=\"token string\" >'right'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'code'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >100</span> <span class=\"token punctuation\" >}</span>\n<span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >;</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >keyBy</span><span class=\"token punctuation\" >(</span>array<span class=\"token punctuation\" >,</span> <span class=\"token keyword\" >function</span><span class=\"token punctuation\" >(</span>o<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span>\n  <span class=\"token keyword\" >return</span> String<span class=\"token punctuation\" >.</span><span class=\"token function\" >fromCharCode</span><span class=\"token punctuation\" >(</span>o<span class=\"token punctuation\" >.</span>code<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >keyBy</span><span class=\"token punctuation\" >(</span>array<span class=\"token punctuation\" >,</span> <span class=\"token string\" >'dir'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/map",
  "html":"<div data-render-page=\"entry\"><h2>map <a class=\"fa-link\" href=\"./map\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L7900\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.map\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.map(collection, [iteratee&#x3D;_.identity])</div>\n\n<div data-render-html=\"/map\"><p>创建一个经过 <code>iteratee</code> 处理的集合中每一个元素的结果数组。\niteratee 会传入3个参数：(value, index|key, collection)。\n<br>\n<br>\n有许多 lodash 的方法以 iteratees 的身份守护其工作，例如：\n<code>_.every</code>, <code>_.filter</code>, <code>_.map</code>, <code>_.mapValues</code>, <code>_.reject</code>, 以及 <code>_.some</code>\n<br>\n<br>\n被守护的有:<br>\n<code>ary</code>, <code>curry</code>, <code>curryRight</code>, <code>drop</code>, <code>dropRight</code>, <code>every</code>, <code>fill</code>,\n<code>invert</code>, <code>parseInt</code>, <code>random</code>, <code>range</code>, <code>rangeRight</code>, <code>slice</code>, <code>some</code>,\n<code>sortBy</code>, <code>take</code>, <code>takeRight</code>, <code>template</code>, <code>trim</code>, <code>trimEnd</code>, <code>trimStart</code>,\n以及 <code>words</code></p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">collection</span> <span class=\"param-type\">(Array|Object)</span> <div data-render-html=\"/#synthetic\"><p>需要遍历的集合 </p>\n</div></li>\n<li><span class=\"param-name\">[iteratee&#x3D;_.identity]</span> <span class=\"param-type\">(Function|Object|string)</span> <div data-render-html=\"/#synthetic\"><p>这个函数会处理每一个元素 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Array)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回映射后的新数组</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token keyword\" >function</span> <span class=\"token function\" >square</span><span class=\"token punctuation\" >(</span>n<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span>\n  <span class=\"token keyword\" >return</span> n <span class=\"token operator\" >*</span> n<span class=\"token punctuation\" >;</span>\n<span class=\"token punctuation\" >}</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token number\" >4</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >8</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> square<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => [16, 64]</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> <span class=\"token string\" >'a'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >4</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'b'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >8</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span> square<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => [16, 64] (无法保证遍历的顺序)</span>\n\n<span class=\"token keyword\" >var</span> users <span class=\"token operator\" >=</span> <span class=\"token punctuation\" >[</span>\n  <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'user'</span><span class=\"token punctuation\" >:</span> <span class=\"token string\" >'barney'</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'user'</span><span class=\"token punctuation\" >:</span> <span class=\"token string\" >'fred'</span> <span class=\"token punctuation\" >}</span>\n<span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 使用了 `_.property` 的回调结果</span>\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >map</span><span class=\"token punctuation\" >(</span>users<span class=\"token punctuation\" >,</span> <span class=\"token string\" >'user'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => ['barney', 'fred']</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/orderBy",
  "html":"<div data-render-page=\"entry\"><h2>orderBy <a class=\"fa-link\" href=\"./orderBy\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L7931\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.orderby\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.orderBy(collection, [iteratees&#x3D;[_.identity]], [orders])</div>\n\n<div data-render-html=\"/orderBy\"><p>这个方法类似 <code>_.sortBy</code>，除了它允许指定 iteratees 结果如何排序。\n如果没指定 <code>orders</code>，所有值以升序排序。\n其他情况，指定 &quot;desc&quot; 降序，指定 &quot;asc&quot; 升序其对应值。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">collection</span> <span class=\"param-type\">(Array|Object)</span> <div data-render-html=\"/#synthetic\"><p>需要遍历的集合 </p>\n</div></li>\n<li><span class=\"param-name\">[iteratees&#x3D;[_.identity]]</span> <span class=\"param-type\">(Function[]|Object[]|string[])</span> <div data-render-html=\"/#synthetic\"><p>通过 iteratees 决定排序 </p>\n</div></li>\n<li><span class=\"param-name\">[orders]</span> <span class=\"param-type\">(string[])</span> <div data-render-html=\"/#synthetic\"><p>决定 iteratees 的排序方法 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Array)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 排序排序后的新数组</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token keyword\" >var</span> users <span class=\"token operator\" >=</span> <span class=\"token punctuation\" >[</span>\n  <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'user'</span><span class=\"token punctuation\" >:</span> <span class=\"token string\" >'fred'</span><span class=\"token punctuation\" >,</span>   <span class=\"token string\" >'age'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >48</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'user'</span><span class=\"token punctuation\" >:</span> <span class=\"token string\" >'barney'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'age'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >34</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'user'</span><span class=\"token punctuation\" >:</span> <span class=\"token string\" >'fred'</span><span class=\"token punctuation\" >,</span>   <span class=\"token string\" >'age'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >42</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'user'</span><span class=\"token punctuation\" >:</span> <span class=\"token string\" >'barney'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'age'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >36</span> <span class=\"token punctuation\" >}</span>\n<span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 以 `user` 升序排序 再 以 `age` 降序排序。</span>\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >orderBy</span><span class=\"token punctuation\" >(</span>users<span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >[</span><span class=\"token string\" >'user'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'age'</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >[</span><span class=\"token string\" >'asc'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'desc'</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 结果: [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 42]]</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/partition",
  "html":"<div data-render-page=\"entry\"><h2>partition <a class=\"fa-link\" href=\"./partition\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L7979\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.partition\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.partition(collection, [predicate&#x3D;_.identity])</div>\n\n<div data-render-html=\"/partition\"><p>创建一个拆分为两部分的数组。\n第一部分是 <code>predicate</code> 检查为真值的，第二部分是 <code>predicate</code> 检查为假值的。\npredicate 会传入3个参数：(value, index|key, collection)。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">collection</span> <span class=\"param-type\">(Array|Object)</span> <div data-render-html=\"/#synthetic\"><p>需要遍历的集合 </p>\n</div></li>\n<li><span class=\"param-name\">[predicate&#x3D;_.identity]</span> <span class=\"param-type\">(Function|Object|string)</span> <div data-render-html=\"/#synthetic\"><p>这个函数会处理每一个元素 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Array)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回分组元素的数组</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token keyword\" >var</span> users <span class=\"token operator\" >=</span> <span class=\"token punctuation\" >[</span>\n  <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'user'</span><span class=\"token punctuation\" >:</span> <span class=\"token string\" >'barney'</span><span class=\"token punctuation\" >,</span>  <span class=\"token string\" >'age'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >36</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'active'</span><span class=\"token punctuation\" >:</span> <span class=\"token keyword\" >false</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'user'</span><span class=\"token punctuation\" >:</span> <span class=\"token string\" >'fred'</span><span class=\"token punctuation\" >,</span>    <span class=\"token string\" >'age'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >40</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'active'</span><span class=\"token punctuation\" >:</span> <span class=\"token keyword\" >true</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'user'</span><span class=\"token punctuation\" >:</span> <span class=\"token string\" >'pebbles'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'age'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span>  <span class=\"token string\" >'active'</span><span class=\"token punctuation\" >:</span> <span class=\"token keyword\" >false</span> <span class=\"token punctuation\" >}</span>\n<span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >;</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >partition</span><span class=\"token punctuation\" >(</span>users<span class=\"token punctuation\" >,</span> <span class=\"token keyword\" >function</span><span class=\"token punctuation\" >(</span>o<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span> <span class=\"token keyword\" >return</span> o<span class=\"token punctuation\" >.</span>active<span class=\"token punctuation\" >;</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 结果: [['fred'], ['barney', 'pebbles']]</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 使用了 `_.matches` 的回调结果</span>\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >partition</span><span class=\"token punctuation\" >(</span>users<span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'age'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'active'</span><span class=\"token punctuation\" >:</span> <span class=\"token keyword\" >false</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 结果: [['pebbles'], ['barney', 'fred']]</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 使用了 `_.matchesProperty` 的回调结果</span>\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >partition</span><span class=\"token punctuation\" >(</span>users<span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >[</span><span class=\"token string\" >'active'</span><span class=\"token punctuation\" >,</span> <span class=\"token keyword\" >false</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 结果: [['barney', 'pebbles'], ['fred']]</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 使用了 `_.property` 的回调结果</span>\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >partition</span><span class=\"token punctuation\" >(</span>users<span class=\"token punctuation\" >,</span> <span class=\"token string\" >'active'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 结果: [['fred'], ['barney', 'pebbles']]</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/reduce",
  "html":"<div data-render-page=\"entry\"><h2>reduce <a class=\"fa-link\" href=\"./reduce\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L8018\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.reduce\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.reduce(collection, [iteratee&#x3D;_.identity], [accumulator])</div>\n\n<div data-render-html=\"/reduce\"><p>通过 <code>iteratee</code> 遍历集合中的每个元素。\n每次返回的值会作为下一次 <code>iteratee</code> 使用。\n如果没有提供 <code>accumulator</code>，则集合中的第一个元素作为 <code>accumulator</code>。\niteratee 会传入4个参数：(accumulator, value, index|key, collection)。\n<br>\n<br>\n有许多 lodash 的方法以 iteratees 的身份守护其工作，例如：\n<code>_.reduce</code>, <code>_.reduceRight</code>, 以及 <code>_.transform</code>.\n<br>\n<br>\n被守护的有:<br>\n<code>assign</code>, <code>defaults</code>, <code>defaultsDeep</code>, <code>includes</code>, <code>merge</code>, <code>orderBy</code>,\n以及 <code>sortBy</code></p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">collection</span> <span class=\"param-type\">(Array|Object)</span> <div data-render-html=\"/#synthetic\"><p>需要遍历的集合 </p>\n</div></li>\n<li><span class=\"param-name\">[iteratee&#x3D;_.identity]</span> <span class=\"param-type\">(Function)</span> <div data-render-html=\"/#synthetic\"><p>这个函数会处理每一个元素 </p>\n</div></li>\n<li><span class=\"param-name\">[accumulator]</span> <span class=\"param-type\">(*)</span> <div data-render-html=\"/#synthetic\"><p>初始化的值 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(*)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回累加后的值</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >reduce</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> <span class=\"token keyword\" >function</span><span class=\"token punctuation\" >(</span>sum<span class=\"token punctuation\" >,</span> n<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span>\n  <span class=\"token keyword\" >return</span> sum <span class=\"token operator\" >+</span> n<span class=\"token punctuation\" >;</span>\n<span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 3</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >reduce</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> <span class=\"token string\" >'a'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'b'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'c'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span> <span class=\"token keyword\" >function</span><span class=\"token punctuation\" >(</span>result<span class=\"token punctuation\" >,</span> value<span class=\"token punctuation\" >,</span> key<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span>\n  <span class=\"token punctuation\" >(</span>result<span class=\"token punctuation\" >[</span>value<span class=\"token punctuation\" >]</span> <span class=\"token operator\" >||</span> <span class=\"token punctuation\" >(</span>result<span class=\"token punctuation\" >[</span>value<span class=\"token punctuation\" >]</span> <span class=\"token operator\" >=</span> <span class=\"token punctuation\" >[</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >push</span><span class=\"token punctuation\" >(</span>key<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n  <span class=\"token keyword\" >return</span> result<span class=\"token punctuation\" >;</span>\n<span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >{</span><span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => { '1': ['a', 'c'], '2': ['b'] } (无法保证遍历的顺序)</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/reduceRight",
  "html":"<div data-render-page=\"entry\"><h2>reduceRight <a class=\"fa-link\" href=\"./reduceRight\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L8044\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.reduceright\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.reduceRight(collection, [iteratee&#x3D;_.identity], [accumulator])</div>\n\n<div data-render-html=\"/reduceRight\"><p>这个方法类似 <code>_.reduce</code> ，除了它是从右到左遍历的。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">collection</span> <span class=\"param-type\">(Array|Object)</span> <div data-render-html=\"/#synthetic\"><p>需要遍历的集合 </p>\n</div></li>\n<li><span class=\"param-name\">[iteratee&#x3D;_.identity]</span> <span class=\"param-type\">(Function)</span> <div data-render-html=\"/#synthetic\"><p>这个函数会处理每一个元素 </p>\n</div></li>\n<li><span class=\"param-name\">[accumulator]</span> <span class=\"param-type\">(*)</span> <div data-render-html=\"/#synthetic\"><p>初始化的值 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(*)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回累加后的值</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token keyword\" >var</span> array <span class=\"token operator\" >=</span> <span class=\"token punctuation\" >[</span><span class=\"token punctuation\" >[</span><span class=\"token number\" >0</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >[</span><span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >[</span><span class=\"token number\" >4</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >5</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >;</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >reduceRight</span><span class=\"token punctuation\" >(</span>array<span class=\"token punctuation\" >,</span> <span class=\"token keyword\" >function</span><span class=\"token punctuation\" >(</span>flattened<span class=\"token punctuation\" >,</span> other<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span>\n  <span class=\"token keyword\" >return</span> flattened<span class=\"token punctuation\" >.</span><span class=\"token function\" >concat</span><span class=\"token punctuation\" >(</span>other<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >[</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => [4, 5, 2, 3, 0, 1]</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/reject",
  "html":"<div data-render-page=\"entry\"><h2>reject <a class=\"fa-link\" href=\"./reject\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L8082\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.reject\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.reject(collection, [predicate&#x3D;_.identity])</div>\n\n<div data-render-html=\"/reject\"><p>反向版 <code>_.filter</code>，这个方法返回 <code>predicate</code> 检查为非真值的元素。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">collection</span> <span class=\"param-type\">(Array|Object)</span> <div data-render-html=\"/#synthetic\"><p>需要遍历的集合 </p>\n</div></li>\n<li><span class=\"param-name\">[predicate&#x3D;_.identity]</span> <span class=\"param-type\">(Function|Object|string)</span> <div data-render-html=\"/#synthetic\"><p>这个函数会处理每一个元素 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Array)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回过滤后的新数组</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token keyword\" >var</span> users <span class=\"token operator\" >=</span> <span class=\"token punctuation\" >[</span>\n  <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'user'</span><span class=\"token punctuation\" >:</span> <span class=\"token string\" >'barney'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'age'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >36</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'active'</span><span class=\"token punctuation\" >:</span> <span class=\"token keyword\" >false</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'user'</span><span class=\"token punctuation\" >:</span> <span class=\"token string\" >'fred'</span><span class=\"token punctuation\" >,</span>   <span class=\"token string\" >'age'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >40</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'active'</span><span class=\"token punctuation\" >:</span> <span class=\"token keyword\" >true</span> <span class=\"token punctuation\" >}</span>\n<span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >;</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >reject</span><span class=\"token punctuation\" >(</span>users<span class=\"token punctuation\" >,</span> <span class=\"token keyword\" >function</span><span class=\"token punctuation\" >(</span>o<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span> <span class=\"token keyword\" >return</span> <span class=\"token operator\" >!</span>o<span class=\"token punctuation\" >.</span>active<span class=\"token punctuation\" >;</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 结果: ['fred']</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 使用了 `_.matches` 的回调结果</span>\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >reject</span><span class=\"token punctuation\" >(</span>users<span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'age'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >40</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'active'</span><span class=\"token punctuation\" >:</span> <span class=\"token keyword\" >true</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 结果: ['barney']</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 使用了 `_.matchesProperty` 的回调结果</span>\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >reject</span><span class=\"token punctuation\" >(</span>users<span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >[</span><span class=\"token string\" >'active'</span><span class=\"token punctuation\" >,</span> <span class=\"token keyword\" >false</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 结果: ['fred']</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 使用了 `_.property` 的回调结果</span>\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >reject</span><span class=\"token punctuation\" >(</span>users<span class=\"token punctuation\" >,</span> <span class=\"token string\" >'active'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 结果: ['barney']</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/sample",
  "html":"<div data-render-page=\"entry\"><h2>sample <a class=\"fa-link\" href=\"./sample\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L8103\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.sample\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.sample(collection)</div>\n\n<div data-render-html=\"/sample\"><p>从集合中随机获得元素</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">collection</span> <span class=\"param-type\">(Array|Object)</span> <div data-render-html=\"/#synthetic\"><p>要取样的集合 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(*)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回随机元素</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >sample</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >4</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 2</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/sampleSize",
  "html":"<div data-render-page=\"entry\"><h2>sampleSize <a class=\"fa-link\" href=\"./sampleSize\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L8128\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.samplesize\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.sampleSize(collection, [n&#x3D;0])</div>\n\n<div data-render-html=\"/sampleSize\"><p>获得从集合中随机获得 <code>N</code> 个元素\nGets <code>n</code> random elements from <code>collection</code>.</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">collection</span> <span class=\"param-type\">(Array|Object)</span> <div data-render-html=\"/#synthetic\"><p>要取样的集合 </p>\n</div></li>\n<li><span class=\"param-name\">[n&#x3D;0]</span> <span class=\"param-type\">(number)</span> <div data-render-html=\"/#synthetic\"><p>要取得的元素个数 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Array)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回随机元素</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >sampleSize</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => [3, 1]</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >sampleSize</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >4</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => [2, 3, 1]</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/shuffle",
  "html":"<div data-render-page=\"entry\"><h2>shuffle <a class=\"fa-link\" href=\"./shuffle\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L8160\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.shuffle\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.shuffle(collection)</div>\n\n<div data-render-html=\"/shuffle\"><p>创建一个被打乱元素的集合。\n使用了 <a href=\"https://en.wikipedia.org/wiki/Fisher-Yates_shuffle\" target=\"_blank\">Fisher-Yates shuffle</a> 版本。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">collection</span> <span class=\"param-type\">(Array|Object)</span> <div data-render-html=\"/#synthetic\"><p>要打乱的集合 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Array)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回一个被打乱元素的新集合</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >shuffle</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >4</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => [4, 1, 3, 2]</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/size",
  "html":"<div data-render-page=\"entry\"><h2>size <a class=\"fa-link\" href=\"./size\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L8183\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.size\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.size(collection)</div>\n\n<div data-render-html=\"/size\"><p>返回集合的长度或对象中可枚举属性的个数。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">collection</span> <span class=\"param-type\">(Array|Object)</span> <div data-render-html=\"/#synthetic\"><p>待处理的集合 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(number)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回集合的大小</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >size</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 3</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >size</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> <span class=\"token string\" >'a'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'b'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 2</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >size</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'pebbles'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 7</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/some",
  "html":"<div data-render-page=\"entry\"><h2>some <a class=\"fa-link\" href=\"./some\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L8227\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.some\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.some(collection, [predicate&#x3D;_.identity])</div>\n\n<div data-render-html=\"/some\"><p>通过 predicate 检查集合中的元素是否存在任意真值的元素，只要 predicate 返回一次真值，遍历就停止，并返回 true。\npredicate 会传入3个参数：(value, index|key, collection)。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">collection</span> <span class=\"param-type\">(Array|Object)</span> <div data-render-html=\"/#synthetic\"><p>需要遍历的集合 </p>\n</div></li>\n<li><span class=\"param-name\">[predicate&#x3D;_.identity]</span> <span class=\"param-type\">(Function|Object|string)</span> <div data-render-html=\"/#synthetic\"><p>这个函数会处理每一个元素 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(boolean)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回 true，如果任意元素经 predicate 检查都为真值，否则返回 false。</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >some</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token keyword\" >null</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'yes'</span><span class=\"token punctuation\" >,</span> <span class=\"token keyword\" >false</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> Boolean<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => true</span>\n\n<span class=\"token keyword\" >var</span> users <span class=\"token operator\" >=</span> <span class=\"token punctuation\" >[</span>\n  <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'user'</span><span class=\"token punctuation\" >:</span> <span class=\"token string\" >'barney'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'active'</span><span class=\"token punctuation\" >:</span> <span class=\"token keyword\" >true</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'user'</span><span class=\"token punctuation\" >:</span> <span class=\"token string\" >'fred'</span><span class=\"token punctuation\" >,</span>   <span class=\"token string\" >'active'</span><span class=\"token punctuation\" >:</span> <span class=\"token keyword\" >false</span> <span class=\"token punctuation\" >}</span>\n<span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 使用了 `_.matches` 的回调结果</span>\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >some</span><span class=\"token punctuation\" >(</span>users<span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'user'</span><span class=\"token punctuation\" >:</span> <span class=\"token string\" >'barney'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'active'</span><span class=\"token punctuation\" >:</span> <span class=\"token keyword\" >false</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => false</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 使用了 `_.matchesProperty` 的回调结果</span>\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >some</span><span class=\"token punctuation\" >(</span>users<span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >[</span><span class=\"token string\" >'active'</span><span class=\"token punctuation\" >,</span> <span class=\"token keyword\" >false</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => true</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 使用了 `_.property` 的回调结果</span>\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >some</span><span class=\"token punctuation\" >(</span>users<span class=\"token punctuation\" >,</span> <span class=\"token string\" >'active'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => true</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/sortBy",
  "html":"<div data-render-page=\"entry\"><h2>sortBy <a class=\"fa-link\" href=\"./sortBy\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L8269\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.sortby\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.sortBy(collection, [iteratees&#x3D;[_.identity]])</div>\n\n<div data-render-html=\"/sortBy\"><p>创建一个元素数组。\n以 iteratee 处理的结果升序排序。\n这个方法执行稳定排序，也就是说相同元素会保持原始排序。\niteratees 会传入1个参数：(value)。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">collection</span> <span class=\"param-type\">(Array|Object)</span> <div data-render-html=\"/#synthetic\"><p>需要遍历的集合 </p>\n</div></li>\n<li><span class=\"param-name\">[iteratees&#x3D;[_.identity]]</span> <span class=\"param-type\">(...(Function|Function[]|Object|Object[]|string|string[])</span> <div data-render-html=\"/#synthetic\"><p> 这个函数决定排序 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Array)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回排序后的数组</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token keyword\" >var</span> users <span class=\"token operator\" >=</span> <span class=\"token punctuation\" >[</span>\n  <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'user'</span><span class=\"token punctuation\" >:</span> <span class=\"token string\" >'fred'</span><span class=\"token punctuation\" >,</span>   <span class=\"token string\" >'age'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >48</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'user'</span><span class=\"token punctuation\" >:</span> <span class=\"token string\" >'barney'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'age'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >36</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'user'</span><span class=\"token punctuation\" >:</span> <span class=\"token string\" >'fred'</span><span class=\"token punctuation\" >,</span>   <span class=\"token string\" >'age'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >42</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'user'</span><span class=\"token punctuation\" >:</span> <span class=\"token string\" >'barney'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'age'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >34</span> <span class=\"token punctuation\" >}</span>\n<span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >;</span>\n\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >sortBy</span><span class=\"token punctuation\" >(</span>users<span class=\"token punctuation\" >,</span> <span class=\"token keyword\" >function</span><span class=\"token punctuation\" >(</span>o<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span> <span class=\"token keyword\" >return</span> o<span class=\"token punctuation\" >.</span>user<span class=\"token punctuation\" >;</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 排序结果 [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 42]]</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >sortBy</span><span class=\"token punctuation\" >(</span>users<span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >[</span><span class=\"token string\" >'user'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'age'</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 排序结果 [['barney', 34], ['barney', 36], ['fred', 42], ['fred', 48]]</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >sortBy</span><span class=\"token punctuation\" >(</span>users<span class=\"token punctuation\" >,</span> <span class=\"token string\" >'user'</span><span class=\"token punctuation\" >,</span> <span class=\"token keyword\" >function</span><span class=\"token punctuation\" >(</span>o<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span>\n  <span class=\"token keyword\" >return</span> Math<span class=\"token punctuation\" >.</span><span class=\"token function\" >floor</span><span class=\"token punctuation\" >(</span>o<span class=\"token punctuation\" >.</span>age <span class=\"token operator\" >/</span> <span class=\"token number\" >10</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 排序结果 [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 42]]</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/now",
  "html":"<div data-render-page=\"entry\"><h2>now <a class=\"fa-link\" href=\"./now\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L8299\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.now\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.now()</div>\n\n<div data-render-html=\"/now\"><p>获得 Unix 纪元(1970 1月1日 00:00:00 UTC) 直到现在的毫秒数。</p>\n</div>\n\n<h3>返回值 <span class=\"return-type\">(number)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回时间戳</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >defer</span><span class=\"token punctuation\" >(</span><span class=\"token keyword\" >function</span><span class=\"token punctuation\" >(</span>stamp<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span>\n  console<span class=\"token punctuation\" >.</span><span class=\"token function\" >log</span><span class=\"token punctuation\" >(</span>_<span class=\"token punctuation\" >.</span><span class=\"token function\" >now</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span> <span class=\"token operator\" >-</span> stamp<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span> _<span class=\"token punctuation\" >.</span><span class=\"token function\" >now</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 记录延迟函数调用的毫秒数</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/after",
  "html":"<div data-render-page=\"entry\"><h2>after <a class=\"fa-link\" href=\"./after\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L8326\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.after\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.after(n, func)</div>\n\n<div data-render-html=\"/after\"><p>反向版 <code>_.before</code>。\n这个方法创建一个新函数，当调用 <code>N</code> 次或者多次之后将触发 <code>func</code> 方法。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">n</span> <span class=\"param-type\">(number)</span> <div data-render-html=\"/#synthetic\"><p><code>func</code> 方法应该在调用多少次后才执行 </p>\n</div></li>\n<li><span class=\"param-name\">func</span> <span class=\"param-type\">(Function)</span> <div data-render-html=\"/#synthetic\"><p>指定的触发方法 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Function)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回限定的函数</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token keyword\" >var</span> saves <span class=\"token operator\" >=</span> <span class=\"token punctuation\" >[</span><span class=\"token string\" >'profile'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'settings'</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >;</span>\n\n<span class=\"token keyword\" >var</span> done <span class=\"token operator\" >=</span> _<span class=\"token punctuation\" >.</span><span class=\"token function\" >after</span><span class=\"token punctuation\" >(</span>saves<span class=\"token punctuation\" >.</span>length<span class=\"token punctuation\" >,</span> <span class=\"token keyword\" >function</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span>\n  console<span class=\"token punctuation\" >.</span><span class=\"token function\" >log</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'done saving!'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >forEach</span><span class=\"token punctuation\" >(</span>saves<span class=\"token punctuation\" >,</span> <span class=\"token keyword\" >function</span><span class=\"token punctuation\" >(</span>type<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span>\n  <span class=\"token function\" >asyncSave</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> <span class=\"token string\" >'type'</span><span class=\"token punctuation\" >:</span> type<span class=\"token punctuation\" >,</span> <span class=\"token string\" >'complete'</span><span class=\"token punctuation\" >:</span> done <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 2次 `asyncSave`之后，输出 'done saving!'。</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/ary",
  "html":"<div data-render-page=\"entry\"><h2>ary <a class=\"fa-link\" href=\"./ary\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L8353\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.ary\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.ary(func, [n&#x3D;func.length])</div>\n\n<div data-render-html=\"/ary\"><p>创建一个最多接受 <code>N</code> 个参数，忽略多余参数的方法。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">func</span> <span class=\"param-type\">(Function)</span> <div data-render-html=\"/#synthetic\"><p>需要被限制参数个数的函数 </p>\n</div></li>\n<li><span class=\"param-name\">[n&#x3D;func.length]</span> <span class=\"param-type\">(number)</span> <div data-render-html=\"/#synthetic\"><p>限制的参数数量 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Function)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回新的函数</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token string\" >'6'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'8'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'10'</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> _<span class=\"token punctuation\" >.</span><span class=\"token function\" >ary</span><span class=\"token punctuation\" >(</span>parseInt<span class=\"token punctuation\" >,</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => [6, 8, 10]</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/before",
  "html":"<div data-render-page=\"entry\"><h2>before <a class=\"fa-link\" href=\"./before\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L8375\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.before\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.before(n, func)</div>\n\n<div data-render-html=\"/before\"><p>创建一个调用 <code>func</code> 的函数。\n调用次数不超过 <code>N</code> 次。\n之后再调用这个函数，将返回最后一个调用的结果。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">n</span> <span class=\"param-type\">(number)</span> <div data-render-html=\"/#synthetic\"><p>超过多少次不再调用 <code>func</code> </p>\n</div></li>\n<li><span class=\"param-name\">func</span> <span class=\"param-type\">(Function)</span> <div data-render-html=\"/#synthetic\"><p>指定的触发的函数 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Function)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回限定的函数</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token function\" >jQuery</span><span class=\"token punctuation\" >(</span>element<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >on</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'click'</span><span class=\"token punctuation\" >,</span> _<span class=\"token punctuation\" >.</span><span class=\"token function\" >before</span><span class=\"token punctuation\" >(</span><span class=\"token number\" >5</span><span class=\"token punctuation\" >,</span> addContactToList<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 最多允许添加4个联系人到列表里</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/bind",
  "html":"<div data-render-page=\"entry\"><h2>bind <a class=\"fa-link\" href=\"./bind\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L8423\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.bind\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.bind(func, thisArg, [partials])</div>\n\n<div data-render-html=\"/bind\"><p>创建一个函数 <code>func</code>，这个函数的 <code>this</code> 会被绑定在 <code>thisArg</code>。\n并且任何附加在 <code>_.bind</code> 的参数会被传入到这个绑定函数上。\n这个 <code>_.bind.placeholder</code> 的值，默认是以 <code>_</code> 作为附加部分参数的占位符。\n<br>\n<br>\n<strong>注意:</strong> 不同于原生的 Function#bind，这个方法不会设置绑定函数的 length 属性。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">func</span> <span class=\"param-type\">(Function)</span> <div data-render-html=\"/#synthetic\"><p>要绑定的函数 </p>\n</div></li>\n<li><span class=\"param-name\">thisArg</span> <span class=\"param-type\">(*)</span> <div data-render-html=\"/#synthetic\"><p>这个 <code>this</code> 会被绑定给 <code>func</code>。 </p>\n</div></li>\n<li><span class=\"param-name\">[partials]</span> <span class=\"param-type\">(...*)</span> <div data-render-html=\"/#synthetic\"><p>附加的部分参数 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Function)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回新的绑定函数</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token keyword\" >var</span> greet <span class=\"token operator\" >=</span> <span class=\"token keyword\" >function</span><span class=\"token punctuation\" >(</span>greeting<span class=\"token punctuation\" >,</span> punctuation<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span>\n  <span class=\"token keyword\" >return</span> greeting <span class=\"token operator\" >+</span> <span class=\"token string\" >' '</span> <span class=\"token operator\" >+</span> <span class=\"token keyword\" >this</span><span class=\"token punctuation\" >.</span>user <span class=\"token operator\" >+</span> punctuation<span class=\"token punctuation\" >;</span>\n<span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >;</span>\n\n<span class=\"token keyword\" >var</span> object <span class=\"token operator\" >=</span> <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'user'</span><span class=\"token punctuation\" >:</span> <span class=\"token string\" >'fred'</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >;</span>\n\n<span class=\"token keyword\" >var</span> bound <span class=\"token operator\" >=</span> _<span class=\"token punctuation\" >.</span><span class=\"token function\" >bind</span><span class=\"token punctuation\" >(</span>greet<span class=\"token punctuation\" >,</span> object<span class=\"token punctuation\" >,</span> <span class=\"token string\" >'hi'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token function\" >bound</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'!'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 'hi fred!'</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 使用了占位符</span>\n<span class=\"token keyword\" >var</span> bound <span class=\"token operator\" >=</span> _<span class=\"token punctuation\" >.</span><span class=\"token function\" >bind</span><span class=\"token punctuation\" >(</span>greet<span class=\"token punctuation\" >,</span> object<span class=\"token punctuation\" >,</span> _<span class=\"token punctuation\" >,</span> <span class=\"token string\" >'!'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token function\" >bound</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'hi'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 'hi fred!'</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/bindKey",
  "html":"<div data-render-page=\"entry\"><h2>bindKey <a class=\"fa-link\" href=\"./bindKey\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L8475\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.bindkey\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.bindKey(object, key, [partials])</div>\n\n<div data-render-html=\"/bindKey\"><p>创建一个函数。\n该方法绑定 <code>object[key]</code> 的方法。\n任何附加在 <code>_.bindKey</code> 的参数会预设到该绑定函数上。\n<br>\n<br>\n这个方法与 <code>_.bind</code> 的不同之处在于允许重写绑定函数即使它还不存在。\n浏览 <a href=\"http://peter.michaux.ca/articles/lazy-function-definition-pattern\" target=\"_blank\">Peter Michaux&#39;s article</a>\n了解更多详情。\n<br>\n<br>\n这个 <code>_.bindKey.placeholder</code> 的值，默认是以 <code>_</code> 作为附加部分参数的占位符。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">object</span> <span class=\"param-type\">(Object)</span> <div data-render-html=\"/#synthetic\"><p>需要绑定函数的对象 </p>\n</div></li>\n<li><span class=\"param-name\">key</span> <span class=\"param-type\">(string)</span> <div data-render-html=\"/#synthetic\"><p>需要绑定函数对象的键 </p>\n</div></li>\n<li><span class=\"param-name\">[partials]</span> <span class=\"param-type\">(...*)</span> <div data-render-html=\"/#synthetic\"><p>附加的部分参数 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Function)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回新的绑定函数</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token keyword\" >var</span> object <span class=\"token operator\" >=</span> <span class=\"token punctuation\" >{</span>\n  <span class=\"token string\" >'user'</span><span class=\"token punctuation\" >:</span> <span class=\"token string\" >'fred'</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token string\" >'greet'</span><span class=\"token punctuation\" >:</span> <span class=\"token keyword\" >function</span><span class=\"token punctuation\" >(</span>greeting<span class=\"token punctuation\" >,</span> punctuation<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span>\n    <span class=\"token keyword\" >return</span> greeting <span class=\"token operator\" >+</span> <span class=\"token string\" >' '</span> <span class=\"token operator\" >+</span> <span class=\"token keyword\" >this</span><span class=\"token punctuation\" >.</span>user <span class=\"token operator\" >+</span> punctuation<span class=\"token punctuation\" >;</span>\n  <span class=\"token punctuation\" >}</span>\n<span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >;</span>\n\n<span class=\"token keyword\" >var</span> bound <span class=\"token operator\" >=</span> _<span class=\"token punctuation\" >.</span><span class=\"token function\" >bindKey</span><span class=\"token punctuation\" >(</span>object<span class=\"token punctuation\" >,</span> <span class=\"token string\" >'greet'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'hi'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token function\" >bound</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'!'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 'hi fred!'</span>\n\nobject<span class=\"token punctuation\" >.</span>greet <span class=\"token operator\" >=</span> <span class=\"token keyword\" >function</span><span class=\"token punctuation\" >(</span>greeting<span class=\"token punctuation\" >,</span> punctuation<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span>\n  <span class=\"token keyword\" >return</span> greeting <span class=\"token operator\" >+</span> <span class=\"token string\" >'ya '</span> <span class=\"token operator\" >+</span> <span class=\"token keyword\" >this</span><span class=\"token punctuation\" >.</span>user <span class=\"token operator\" >+</span> punctuation<span class=\"token punctuation\" >;</span>\n<span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >;</span>\n\n<span class=\"token function\" >bound</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'!'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 'hiya fred!'</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 使用了占位符</span>\n<span class=\"token keyword\" >var</span> bound <span class=\"token operator\" >=</span> _<span class=\"token punctuation\" >.</span><span class=\"token function\" >bindKey</span><span class=\"token punctuation\" >(</span>object<span class=\"token punctuation\" >,</span> <span class=\"token string\" >'greet'</span><span class=\"token punctuation\" >,</span> _<span class=\"token punctuation\" >,</span> <span class=\"token string\" >'!'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token function\" >bound</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'hi'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 'hiya fred!'</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/curry",
  "html":"<div data-render-page=\"entry\"><h2>curry <a class=\"fa-link\" href=\"./curry\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L8522\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.curry\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.curry(func, [arity&#x3D;func.length])</div>\n\n<div data-render-html=\"/curry\"><p>创建一个函数，该函数接收一个或多个 func 的参数。\n当该函数被调用时,如果 func 所需要传递的所有参数都被提供，则直接返回 func 所执行的结果。\n否则继续返回该函数并等待接收剩余的参数。\n可以使用 func.length 强制需要累积的参数个数。\n<br>\n<br>\n这个 <code>_.curry.placeholder</code> 的值，默认是以 <code>_</code> 作为附加部分参数的占位符。\n<br>\n<br>\n<strong>注意:</strong> 这个方法不会设置 &quot;length&quot; 到 curried 函数上。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">func</span> <span class=\"param-type\">(Function)</span> <div data-render-html=\"/#synthetic\"><p>需要 curry 的函数 </p>\n</div></li>\n<li><span class=\"param-name\">[arity&#x3D;func.length]</span> <span class=\"param-type\">(number)</span> <div data-render-html=\"/#synthetic\"><p>需要提供给 <code>func</code> 的参数数量 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Function)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回 curry 后的函数</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token keyword\" >var</span> abc <span class=\"token operator\" >=</span> <span class=\"token keyword\" >function</span><span class=\"token punctuation\" >(</span>a<span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >,</span> c<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span>\n  <span class=\"token keyword\" >return</span> <span class=\"token punctuation\" >[</span>a<span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >,</span> c<span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >;</span>\n<span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >;</span>\n\n<span class=\"token keyword\" >var</span> curried <span class=\"token operator\" >=</span> _<span class=\"token punctuation\" >.</span><span class=\"token function\" >curry</span><span class=\"token punctuation\" >(</span>abc<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n\n<span class=\"token function\" >curried</span><span class=\"token punctuation\" >(</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >(</span><span class=\"token number\" >2</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >(</span><span class=\"token number\" >3</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => [1, 2, 3]</span>\n\n<span class=\"token function\" >curried</span><span class=\"token punctuation\" >(</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >(</span><span class=\"token number\" >3</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => [1, 2, 3]</span>\n\n<span class=\"token function\" >curried</span><span class=\"token punctuation\" >(</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => [1, 2, 3]</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 使用了占位符</span>\n<span class=\"token function\" >curried</span><span class=\"token punctuation\" >(</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >(</span>_<span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >(</span><span class=\"token number\" >2</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => [1, 2, 3]</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/curryRight",
  "html":"<div data-render-page=\"entry\"><h2>curryRight <a class=\"fa-link\" href=\"./curryRight\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L8565\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.curryright\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.curryRight(func, [arity&#x3D;func.length])</div>\n\n<div data-render-html=\"/curryRight\"><p>这个方法类似 <code>_.curry</code>。\n除了它接受参数的方式用 <code>_.partialRight</code> 代替了 <code>_.partial</code>。\n<br>\n<br>\n这个 <code>_.curry.placeholder</code> 的值，默认是以 <code>_</code> 作为附加部分参数的占位符。\n<br>\n<br>\n<strong>注意:</strong> 这个方法不会设置 &quot;length&quot; 到 curried 函数上。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">func</span> <span class=\"param-type\">(Function)</span> <div data-render-html=\"/#synthetic\"><p>需要 curry 的函数 </p>\n</div></li>\n<li><span class=\"param-name\">[arity&#x3D;func.length]</span> <span class=\"param-type\">(number)</span> <div data-render-html=\"/#synthetic\"><p>需要提供给 <code>func</code> 的参数数量 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Function)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回 curry 后的函数</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token keyword\" >var</span> abc <span class=\"token operator\" >=</span> <span class=\"token keyword\" >function</span><span class=\"token punctuation\" >(</span>a<span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >,</span> c<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span>\n  <span class=\"token keyword\" >return</span> <span class=\"token punctuation\" >[</span>a<span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >,</span> c<span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >;</span>\n<span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >;</span>\n\n<span class=\"token keyword\" >var</span> curried <span class=\"token operator\" >=</span> _<span class=\"token punctuation\" >.</span><span class=\"token function\" >curryRight</span><span class=\"token punctuation\" >(</span>abc<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n\n<span class=\"token function\" >curried</span><span class=\"token punctuation\" >(</span><span class=\"token number\" >3</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >(</span><span class=\"token number\" >2</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >(</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => [1, 2, 3]</span>\n\n<span class=\"token function\" >curried</span><span class=\"token punctuation\" >(</span><span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >(</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => [1, 2, 3]</span>\n\n<span class=\"token function\" >curried</span><span class=\"token punctuation\" >(</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => [1, 2, 3]</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 使用了占位符</span>\n<span class=\"token function\" >curried</span><span class=\"token punctuation\" >(</span><span class=\"token number\" >3</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >(</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> _<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >(</span><span class=\"token number\" >2</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => [1, 2, 3]</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/debounce",
  "html":"<div data-render-page=\"entry\"><h2>debounce <a class=\"fa-link\" href=\"./debounce\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L8616\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.debounce\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.debounce(func, [wait&#x3D;0], [options])</div>\n\n<div data-render-html=\"/debounce\"><p>创建一个防抖动函数。\n该函数会在 <code>wait</code> 毫秒后调用 <code>func</code> 方法。\n该函数提供一个 <code>cancel</code> 方法取消延迟的函数调用以及 <code>flush</code> 方法立即调用。\n可以提供一个 <code>options</code> 对象决定如何调用 <code>func</code> 方法，\noptions.leading 与|或 options.trailing 决定延迟前后如何触发。\n<code>func</code> 会传入最后一次传入的参数给防抖动函数。\n随后调用的防抖动函数返回是最后一次 <code>func</code> 调用的结果。\n<br>\n<br>\n<strong>注意:</strong> 如果 <code>leading</code> 和 <code>trailing</code> 都设定为 true。\n则 func 允许 trailing 方式调用的条件为: 在 wait 期间多次调用防抖方法。\n<br>\n<br>\n查看 <a href=\"http://drupalmotion.com/article/debounce-and-throttle-visual-explanation\" target=\"_blank\">David Corbacho&#39;s article</a>\n了解 <code>_.debounce</code> 与 <code>_.throttle</code> 的区别。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">func</span> <span class=\"param-type\">(Function)</span> <div data-render-html=\"/#synthetic\"><p>要防抖动的函数 </p>\n</div></li>\n<li><span class=\"param-name\">[wait&#x3D;0]</span> <span class=\"param-type\">(number)</span> <div data-render-html=\"/#synthetic\"><p>需要延迟的毫秒数 </p>\n</div></li>\n<li><span class=\"param-name\">[options]</span> <span class=\"param-type\">(Object)</span> <div data-render-html=\"/#synthetic\"><p>选项对象 </p>\n</div></li>\n<li><span class=\"param-name\">[options.leading&#x3D;false]</span> <span class=\"param-type\">(boolean)</span> <div data-render-html=\"/#synthetic\"><p>指定调用在延迟开始前 </p>\n</div></li>\n<li><span class=\"param-name\">[options.maxWait]</span> <span class=\"param-type\">(number)</span> <div data-render-html=\"/#synthetic\"><p>设置 <code>func</code> 允许被延迟的最大值 </p>\n</div></li>\n<li><span class=\"param-name\">[options.trailing&#x3D;true]</span> <span class=\"param-type\">(boolean)</span> <div data-render-html=\"/#synthetic\"><p>指定调用在延迟结束后 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Function)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回具有防抖动功能的函数</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token comment\" spellcheck=\"true\">// 避免窗口在变动时出现昂贵的计算开销。</span>\n<span class=\"token function\" >jQuery</span><span class=\"token punctuation\" >(</span>window<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >on</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'resize'</span><span class=\"token punctuation\" >,</span> _<span class=\"token punctuation\" >.</span><span class=\"token function\" >debounce</span><span class=\"token punctuation\" >(</span>calculateLayout<span class=\"token punctuation\" >,</span> <span class=\"token number\" >150</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 当点击时 `sendMail` 随后就被调用。</span>\n<span class=\"token function\" >jQuery</span><span class=\"token punctuation\" >(</span>element<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >on</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'click'</span><span class=\"token punctuation\" >,</span> _<span class=\"token punctuation\" >.</span><span class=\"token function\" >debounce</span><span class=\"token punctuation\" >(</span>sendMail<span class=\"token punctuation\" >,</span> <span class=\"token number\" >300</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >{</span>\n  <span class=\"token string\" >'leading'</span><span class=\"token punctuation\" >:</span> <span class=\"token keyword\" >true</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token string\" >'trailing'</span><span class=\"token punctuation\" >:</span> <span class=\"token keyword\" >false</span>\n<span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 确保 `batchLog` 调用1次之后，1秒内会被触发。</span>\n<span class=\"token keyword\" >var</span> debounced <span class=\"token operator\" >=</span> _<span class=\"token punctuation\" >.</span><span class=\"token function\" >debounce</span><span class=\"token punctuation\" >(</span>batchLog<span class=\"token punctuation\" >,</span> <span class=\"token number\" >250</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'maxWait'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >1000</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token keyword\" >var</span> source <span class=\"token operator\" >=</span> <span class=\"token keyword\" >new</span> <span class=\"token class-name\" >EventSource</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'/stream'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token function\" >jQuery</span><span class=\"token punctuation\" >(</span>source<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >on</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'message'</span><span class=\"token punctuation\" >,</span> debounced<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 取消一个 trailing 的防抖动调用</span>\n<span class=\"token function\" >jQuery</span><span class=\"token punctuation\" >(</span>window<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >on</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'popstate'</span><span class=\"token punctuation\" >,</span> debounced<span class=\"token punctuation\" >.</span>cancel<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/defer",
  "html":"<div data-render-page=\"entry\"><h2>defer <a class=\"fa-link\" href=\"./defer\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L8751\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.defer\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.defer(func, [args])</div>\n\n<div data-render-html=\"/defer\"><p>延迟调用 <code>func</code> 直到当前堆栈清理完毕。\n任何附加的参数会传入到 <code>func</code>。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">func</span> <span class=\"param-type\">(Function)</span> <div data-render-html=\"/#synthetic\"><p>要延迟的函数 </p>\n</div></li>\n<li><span class=\"param-name\">[args]</span> <span class=\"param-type\">(...*)</span> <div data-render-html=\"/#synthetic\"><p>会在调用时传入到 <code>func</code> 的参数 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(number)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回计时器 id</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >defer</span><span class=\"token punctuation\" >(</span><span class=\"token keyword\" >function</span><span class=\"token punctuation\" >(</span>text<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span>\n  console<span class=\"token punctuation\" >.</span><span class=\"token function\" >log</span><span class=\"token punctuation\" >(</span>text<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'deferred'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// 一毫秒或更久一些输出 'deferred'。</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/delay",
  "html":"<div data-render-page=\"entry\"><h2>delay <a class=\"fa-link\" href=\"./delay\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L8773\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.delay\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.delay(func, wait, [args])</div>\n\n<div data-render-html=\"/delay\"><p>延迟 <code>wait</code> 毫秒后调用 <code>func</code>。\n任何附加的参数会传入到 <code>func</code>。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">func</span> <span class=\"param-type\">(Function)</span> <div data-render-html=\"/#synthetic\"><p>要延迟的函数 </p>\n</div></li>\n<li><span class=\"param-name\">wait</span> <span class=\"param-type\">(number)</span> <div data-render-html=\"/#synthetic\"><p>要延迟的毫秒数 </p>\n</div></li>\n<li><span class=\"param-name\">[args]</span> <span class=\"param-type\">(...*)</span> <div data-render-html=\"/#synthetic\"><p>会在调用时传入到 <code>func</code> 的参数 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(number)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回计时器 id</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >delay</span><span class=\"token punctuation\" >(</span><span class=\"token keyword\" >function</span><span class=\"token punctuation\" >(</span>text<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span>\n  console<span class=\"token punctuation\" >.</span><span class=\"token function\" >log</span><span class=\"token punctuation\" >(</span>text<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >1000</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'later'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 一秒后输出 'later'。</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/flip",
  "html":"<div data-render-page=\"entry\"><h2>flip <a class=\"fa-link\" href=\"./flip\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L8794\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.flip\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.flip(func)</div>\n\n<div data-render-html=\"/flip\"><p>创建一个翻转接收参数的 <code>func</code> 函数。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">func</span> <span class=\"param-type\">(Function)</span> <div data-render-html=\"/#synthetic\"><p>要翻转参数的函数 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Function)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回新的函数</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token keyword\" >var</span> flipped <span class=\"token operator\" >=</span> _<span class=\"token punctuation\" >.</span><span class=\"token function\" >flip</span><span class=\"token punctuation\" >(</span><span class=\"token keyword\" >function</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span>\n  <span class=\"token keyword\" >return</span> _<span class=\"token punctuation\" >.</span><span class=\"token function\" >toArray</span><span class=\"token punctuation\" >(</span>arguments<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n\n<span class=\"token function\" >flipped</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'a'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'b'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'c'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'d'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => ['d', 'c', 'b', 'a']</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/memoize",
  "html":"<div data-render-page=\"entry\"><h2>memoize <a class=\"fa-link\" href=\"./memoize\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L8839\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.memoize\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.memoize(func, [resolver])</div>\n\n<div data-render-html=\"/memoize\"><p>创建一个会缓存 <code>func</code> 结果的函数。\n如果提供了 <code>resolver</code>，就用 <code>resolver</code> 的返回值作为 key 缓存函数的结果。\n默认情况下用第一个参数作为缓存的 key。\n<code>func</code> 在调用时 this 会绑定在缓存函数上。\n<br>\n<br>\n<strong>注意:</strong>\n缓存会暴露在缓存函数的 <code>cache</code> 上。\n它是可以定制的，只要替换了 _.memoize.Cache 构造函数，或实现了 <a href=\"http://ecma-international.org/ecma-262/6.0/#sec-properties-of-the-map-prototype-object\" target=\"_blank\"><code>Map</code></a> 的\n<code>delete</code>， <code>get</code>， <code>has</code>， 以及 <code>set</code>方法。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">func</span> <span class=\"param-type\">(Function)</span> <div data-render-html=\"/#synthetic\"><p>需要缓存化的函数 </p>\n</div></li>\n<li><span class=\"param-name\">[resolver]</span> <span class=\"param-type\">(Function)</span> <div data-render-html=\"/#synthetic\"><p>这个函数的返回值作为缓存的 key </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Function)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回缓存化后的函数</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token keyword\" >var</span> object <span class=\"token operator\" >=</span> <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'a'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'b'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >;</span>\n<span class=\"token keyword\" >var</span> other <span class=\"token operator\" >=</span> <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'c'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'d'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >4</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >;</span>\n\n<span class=\"token keyword\" >var</span> values <span class=\"token operator\" >=</span> _<span class=\"token punctuation\" >.</span><span class=\"token function\" >memoize</span><span class=\"token punctuation\" >(</span>_<span class=\"token punctuation\" >.</span>values<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token function\" >values</span><span class=\"token punctuation\" >(</span>object<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => [1, 2]</span>\n\n<span class=\"token function\" >values</span><span class=\"token punctuation\" >(</span>other<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => [3, 4]</span>\n\nobject<span class=\"token punctuation\" >.</span>a <span class=\"token operator\" >=</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >;</span>\n<span class=\"token function\" >values</span><span class=\"token punctuation\" >(</span>object<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => [1, 2]</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 修改结果缓存</span>\nvalues<span class=\"token punctuation\" >.</span>cache<span class=\"token punctuation\" >.</span><span class=\"token keyword\" >set</span><span class=\"token punctuation\" >(</span>object<span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >[</span><span class=\"token string\" >'a'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'b'</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token function\" >values</span><span class=\"token punctuation\" >(</span>object<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => ['a', 'b']</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 替换 `_.memoize.Cache`</span>\n_<span class=\"token punctuation\" >.</span>memoize<span class=\"token punctuation\" >.</span>Cache <span class=\"token operator\" >=</span> WeakMap<span class=\"token punctuation\" >;</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/negate",
  "html":"<div data-render-page=\"entry\"><h2>negate <a class=\"fa-link\" href=\"./negate\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L8877\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.negate\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.negate(predicate)</div>\n\n<div data-render-html=\"/negate\"><p>创建一个对 <code>func</code> 结果 取反的函数。\n用 predicate 对 <code>func</code> 检查的时候，<code>this</code> 绑定到创建的函数，并传入对应参数。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">predicate</span> <span class=\"param-type\">(Function)</span> <div data-render-html=\"/#synthetic\"><p>需要对结果取反的函数 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Function)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回一个新函数</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token keyword\" >function</span> <span class=\"token function\" >isEven</span><span class=\"token punctuation\" >(</span>n<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span>\n  <span class=\"token keyword\" >return</span> n <span class=\"token operator\" >%</span> <span class=\"token number\" >2</span> <span class=\"token operator\" >==</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >;</span>\n<span class=\"token punctuation\" >}</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >filter</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >4</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >5</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >6</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> _<span class=\"token punctuation\" >.</span><span class=\"token function\" >negate</span><span class=\"token punctuation\" >(</span>isEven<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => [1, 3, 5]</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/once",
  "html":"<div data-render-page=\"entry\"><h2>once <a class=\"fa-link\" href=\"./once\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L8903\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.once\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.once(func)</div>\n\n<div data-render-html=\"/once\"><p>创建一个只能调用一次的函数。\n重复调用返回第一次调用的结果。\n<code>func</code> 调用时，this 绑定到创建的函数，并传入对应参数。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">func</span> <span class=\"param-type\">(Function)</span> <div data-render-html=\"/#synthetic\"><p>指定的触发的函数 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Function)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回受限的函数</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token keyword\" >var</span> initialize <span class=\"token operator\" >=</span> _<span class=\"token punctuation\" >.</span><span class=\"token function\" >once</span><span class=\"token punctuation\" >(</span>createApplication<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token function\" >initialize</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token function\" >initialize</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// `initialize` 只能调用 `createApplication` 一次。</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/overArgs",
  "html":"<div data-render-page=\"entry\"><h2>overArgs <a class=\"fa-link\" href=\"./overArgs\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L8936\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.overargs\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.overArgs(func, [transforms])</div>\n\n<div data-render-html=\"/overArgs\"><p>创建一个函数，调用时<code>func</code> 参数会先一对一的改变。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">func</span> <span class=\"param-type\">(Function)</span> <div data-render-html=\"/#synthetic\"><p>要包裹的函数 </p>\n</div></li>\n<li><span class=\"param-name\">[transforms]</span> <span class=\"param-type\">(...(Function|Function[])</span> <div data-render-html=\"/#synthetic\"><p>这个函数会改变传参，单独指定或者指定在数组中 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Function)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回新函数</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token keyword\" >function</span> <span class=\"token function\" >doubled</span><span class=\"token punctuation\" >(</span>n<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span>\n  <span class=\"token keyword\" >return</span> n <span class=\"token operator\" >*</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >;</span>\n<span class=\"token punctuation\" >}</span>\n\n<span class=\"token keyword\" >function</span> <span class=\"token function\" >square</span><span class=\"token punctuation\" >(</span>n<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span>\n  <span class=\"token keyword\" >return</span> n <span class=\"token operator\" >*</span> n<span class=\"token punctuation\" >;</span>\n<span class=\"token punctuation\" >}</span>\n\n<span class=\"token keyword\" >var</span> func <span class=\"token operator\" >=</span> _<span class=\"token punctuation\" >.</span><span class=\"token function\" >overArgs</span><span class=\"token punctuation\" >(</span><span class=\"token keyword\" >function</span><span class=\"token punctuation\" >(</span>x<span class=\"token punctuation\" >,</span> y<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span>\n  <span class=\"token keyword\" >return</span> <span class=\"token punctuation\" >[</span>x<span class=\"token punctuation\" >,</span> y<span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >;</span>\n<span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span> square<span class=\"token punctuation\" >,</span> doubled<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n\n<span class=\"token function\" >func</span><span class=\"token punctuation\" >(</span><span class=\"token number\" >9</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => [81, 6]</span>\n\n<span class=\"token function\" >func</span><span class=\"token punctuation\" >(</span><span class=\"token number\" >10</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >5</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => [100, 10]</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/partial",
  "html":"<div data-render-page=\"entry\"><h2>partial <a class=\"fa-link\" href=\"./partial\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L8980\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.partial\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.partial(func, [partials])</div>\n\n<div data-render-html=\"/partial\"><p>创建一个函数。\n该函数调用 func，并传入预设的参数。\n这个方法类似 <code>_.bind</code>，除了它不会绑定 <code>this</code>。\n这个 <code>_.partial.placeholder</code> 的值，默认是以 <code>_</code> 作为附加部分参数的占位符。\n<br>\n<br>\n<strong>注意:</strong> 这个方法不会设置 &quot;length&quot; 到函数上。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">func</span> <span class=\"param-type\">(Function)</span> <div data-render-html=\"/#synthetic\"><p>需要预设的函数 </p>\n</div></li>\n<li><span class=\"param-name\">[partials]</span> <span class=\"param-type\">(...*)</span> <div data-render-html=\"/#synthetic\"><p>预设的参数 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Function)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回预设参数的函数</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token keyword\" >var</span> greet <span class=\"token operator\" >=</span> <span class=\"token keyword\" >function</span><span class=\"token punctuation\" >(</span>greeting<span class=\"token punctuation\" >,</span> name<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span>\n  <span class=\"token keyword\" >return</span> greeting <span class=\"token operator\" >+</span> <span class=\"token string\" >' '</span> <span class=\"token operator\" >+</span> name<span class=\"token punctuation\" >;</span>\n<span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >;</span>\n\n<span class=\"token keyword\" >var</span> sayHelloTo <span class=\"token operator\" >=</span> _<span class=\"token punctuation\" >.</span><span class=\"token function\" >partial</span><span class=\"token punctuation\" >(</span>greet<span class=\"token punctuation\" >,</span> <span class=\"token string\" >'hello'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token function\" >sayHelloTo</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'fred'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 'hello fred'</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 使用了占位符</span>\n<span class=\"token keyword\" >var</span> greetFred <span class=\"token operator\" >=</span> _<span class=\"token punctuation\" >.</span><span class=\"token function\" >partial</span><span class=\"token punctuation\" >(</span>greet<span class=\"token punctuation\" >,</span> _<span class=\"token punctuation\" >,</span> <span class=\"token string\" >'fred'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token function\" >greetFred</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'hi'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 'hi fred'</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/partialRight",
  "html":"<div data-render-page=\"entry\"><h2>partialRight <a class=\"fa-link\" href=\"./partialRight\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L9012\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.partialright\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.partialRight(func, [partials])</div>\n\n<div data-render-html=\"/partialRight\"><p>这个函数类似 <code>_.partial</code>，除了它是从右到左预设参数的。\n这个 _.partialRight.placeholder 的值，默认是以 _ 作为附加部分参数的占位符。\n<br>\n<br>\n<strong>注意:</strong> 这个方法不会设置 &quot;length&quot; 到函数上。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">func</span> <span class=\"param-type\">(Function)</span> <div data-render-html=\"/#synthetic\"><p>需要预设的函数 </p>\n</div></li>\n<li><span class=\"param-name\">[partials]</span> <span class=\"param-type\">(...*)</span> <div data-render-html=\"/#synthetic\"><p>预设的参数 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Function)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回预设参数的函数</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token keyword\" >var</span> greet <span class=\"token operator\" >=</span> <span class=\"token keyword\" >function</span><span class=\"token punctuation\" >(</span>greeting<span class=\"token punctuation\" >,</span> name<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span>\n  <span class=\"token keyword\" >return</span> greeting <span class=\"token operator\" >+</span> <span class=\"token string\" >' '</span> <span class=\"token operator\" >+</span> name<span class=\"token punctuation\" >;</span>\n<span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >;</span>\n\n<span class=\"token keyword\" >var</span> greetFred <span class=\"token operator\" >=</span> _<span class=\"token punctuation\" >.</span><span class=\"token function\" >partialRight</span><span class=\"token punctuation\" >(</span>greet<span class=\"token punctuation\" >,</span> <span class=\"token string\" >'fred'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token function\" >greetFred</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'hi'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 'hi fred'</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 使用了占位符</span>\n<span class=\"token keyword\" >var</span> sayHelloTo <span class=\"token operator\" >=</span> _<span class=\"token punctuation\" >.</span><span class=\"token function\" >partialRight</span><span class=\"token punctuation\" >(</span>greet<span class=\"token punctuation\" >,</span> <span class=\"token string\" >'hello'</span><span class=\"token punctuation\" >,</span> _<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token function\" >sayHelloTo</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'fred'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 'hello fred'</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/rearg",
  "html":"<div data-render-page=\"entry\"><h2>rearg <a class=\"fa-link\" href=\"./rearg\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L9037\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.rearg\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.rearg(func, indexes)</div>\n\n<div data-render-html=\"/rearg\"><p>创建一个调用 <code>func</code> 的函数。\n所传递的参数根据 indexes 调整到对应位置。\n第一个 index 对应到第一个传参，第二个 index 对应到第二个传参，以此类推。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">func</span> <span class=\"param-type\">(Function)</span> <div data-render-html=\"/#synthetic\"><p>待调用的函数 </p>\n</div></li>\n<li><span class=\"param-name\">indexes</span> <span class=\"param-type\">(...(number|number[])</span> <div data-render-html=\"/#synthetic\"><p>重新排列参数的位置，单独指定或者指定在数组中 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Function)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回新的函数</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token keyword\" >var</span> rearged <span class=\"token operator\" >=</span> _<span class=\"token punctuation\" >.</span><span class=\"token function\" >rearg</span><span class=\"token punctuation\" >(</span><span class=\"token keyword\" >function</span><span class=\"token punctuation\" >(</span>a<span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >,</span> c<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span>\n  <span class=\"token keyword\" >return</span> <span class=\"token punctuation\" >[</span>a<span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >,</span> c<span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >;</span>\n<span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n\n<span class=\"token function\" >rearged</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'b'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'c'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'a'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// => ['a', 'b', 'c']</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/rest",
  "html":"<div data-render-page=\"entry\"><h2>rest <a class=\"fa-link\" href=\"./rest\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L9063\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.rest\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.rest(func, [start&#x3D;func.length-1])</div>\n\n<div data-render-html=\"/rest\"><p>创建一个调用 <code>func</code> 的函数。\n<code>this</code> 绑定到这个函数 并且 从 <code>start</code> 之后的参数都作为数组传入。\n<br>\n<br>\n<strong>注意:</strong> 这个方法基于<a href=\"https://mdn.io/rest_parameters\" target=\"_blank\">rest parameter</a></p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">func</span> <span class=\"param-type\">(Function)</span> <div data-render-html=\"/#synthetic\"><p>要应用的函数 </p>\n</div></li>\n<li><span class=\"param-name\">[start&#x3D;func.length-1]</span> <span class=\"param-type\">(number)</span> <div data-render-html=\"/#synthetic\"><p>从第几个参数开始应用 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Function)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回新的函数</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token keyword\" >var</span> say <span class=\"token operator\" >=</span> _<span class=\"token punctuation\" >.</span><span class=\"token function\" >rest</span><span class=\"token punctuation\" >(</span><span class=\"token keyword\" >function</span><span class=\"token punctuation\" >(</span>what<span class=\"token punctuation\" >,</span> names<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span>\n  <span class=\"token keyword\" >return</span> what <span class=\"token operator\" >+</span> <span class=\"token string\" >' '</span> <span class=\"token operator\" >+</span> _<span class=\"token punctuation\" >.</span><span class=\"token function\" >initial</span><span class=\"token punctuation\" >(</span>names<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >join</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >', '</span><span class=\"token punctuation\" >)</span> <span class=\"token operator\" >+</span>\n    <span class=\"token punctuation\" >(</span>_<span class=\"token punctuation\" >.</span><span class=\"token function\" >size</span><span class=\"token punctuation\" >(</span>names<span class=\"token punctuation\" >)</span> <span class=\"token operator\" >></span> <span class=\"token number\" >1</span> <span class=\"token operator\" >?</span> <span class=\"token string\" >', &amp; '</span> <span class=\"token punctuation\" >:</span> <span class=\"token string\" >''</span><span class=\"token punctuation\" >)</span> <span class=\"token operator\" >+</span> _<span class=\"token punctuation\" >.</span><span class=\"token function\" >last</span><span class=\"token punctuation\" >(</span>names<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n\n<span class=\"token function\" >say</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'hello'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'fred'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'barney'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'pebbles'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 'hello fred, barney, &amp; pebbles'</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/spread",
  "html":"<div data-render-page=\"entry\"><h2>spread <a class=\"fa-link\" href=\"./spread\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L9125\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.spread\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.spread(func)</div>\n\n<div data-render-html=\"/spread\"><p>创建一个调用 <code>func</code> 的函数。 <code>this</code> 绑定到这个函数上。\n把参数作为数组传入，类似于 <a href=\"https://es5.github.io/#x15.3.4.3\" target=\"_blank\"><code>Function#apply</code></a>\n<br>\n<br>\n<strong>注意:</strong> 这个方法基于 <a href=\"https://mdn.io/spread_operator\" target=\"_blank\">spread operator</a></p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">func</span> <span class=\"param-type\">(Function)</span> <div data-render-html=\"/#synthetic\"><p>要应用的函数 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Function)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回新的函数</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token keyword\" >var</span> say <span class=\"token operator\" >=</span> _<span class=\"token punctuation\" >.</span><span class=\"token function\" >spread</span><span class=\"token punctuation\" >(</span><span class=\"token keyword\" >function</span><span class=\"token punctuation\" >(</span>who<span class=\"token punctuation\" >,</span> what<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span>\n  <span class=\"token keyword\" >return</span> who <span class=\"token operator\" >+</span> <span class=\"token string\" >' says '</span> <span class=\"token operator\" >+</span> what<span class=\"token punctuation\" >;</span>\n<span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n\n<span class=\"token function\" >say</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token string\" >'fred'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'hello'</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 'fred says hello'</span>\n\n<span class=\"token keyword\" >var</span> numbers <span class=\"token operator\" >=</span> Promise<span class=\"token punctuation\" >.</span><span class=\"token function\" >all</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span>\n  Promise<span class=\"token punctuation\" >.</span><span class=\"token function\" >resolve</span><span class=\"token punctuation\" >(</span><span class=\"token number\" >40</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >,</span>\n  Promise<span class=\"token punctuation\" >.</span><span class=\"token function\" >resolve</span><span class=\"token punctuation\" >(</span><span class=\"token number\" >36</span><span class=\"token punctuation\" >)</span>\n<span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n\nnumbers<span class=\"token punctuation\" >.</span><span class=\"token function\" >then</span><span class=\"token punctuation\" >(</span>_<span class=\"token punctuation\" >.</span><span class=\"token function\" >spread</span><span class=\"token punctuation\" >(</span><span class=\"token keyword\" >function</span><span class=\"token punctuation\" >(</span>x<span class=\"token punctuation\" >,</span> y<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span>\n  <span class=\"token keyword\" >return</span> x <span class=\"token operator\" >+</span> y<span class=\"token punctuation\" >;</span>\n<span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 返回 76</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/throttle",
  "html":"<div data-render-page=\"entry\"><h2>throttle <a class=\"fa-link\" href=\"./throttle\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L9172\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.throttle\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.throttle(func, [wait&#x3D;0], [options])</div>\n\n<div data-render-html=\"/throttle\"><p>创建一个节流函数，在 <code>wait</code> 秒内最多执行 <code>func</code> 一次的函数。\n该函数提供一个 cancel 方法取消延迟的函数调用以及 flush 方法立即调用。\n可以提供一个 options 对象决定如何调用 func 方法， options.leading 与|或 options.trailing 决定 <code>wait</code> 前后如何触发。 func 会传入最后一次传入的参数给这个函数。 随后调用的函数返回是最后一次 func 调用的结果。\n<br>\n<br>\n<strong>注意:</strong> 如果 leading 和 trailing 都设定为 true。 则 func 允许 trailing 方式调用的条件为: 在 wait 期间多次调用。\n<br>\n<br>\n查看 <a href=\"http://drupalmotion.com/article/debounce-and-throttle-visual-explanation\" target=\"_blank\">David Corbacho&#39;s article</a>\n了解 <code>_.throttle</code> 与 <code>_.debounce</code> 的区别</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">func</span> <span class=\"param-type\">(Function)</span> <div data-render-html=\"/#synthetic\"><p>要节流的函数 </p>\n</div></li>\n<li><span class=\"param-name\">[wait&#x3D;0]</span> <span class=\"param-type\">(number)</span> <div data-render-html=\"/#synthetic\"><p>需要节流的毫秒 </p>\n</div></li>\n<li><span class=\"param-name\">[options]</span> <span class=\"param-type\">(Object)</span> <div data-render-html=\"/#synthetic\"><p>选项对象 </p>\n</div></li>\n<li><span class=\"param-name\">[options.leading&#x3D;true]</span> <span class=\"param-type\">(boolean)</span> <div data-render-html=\"/#synthetic\"><p>指定调用在节流开始前 </p>\n</div></li>\n<li><span class=\"param-name\">[options.trailing&#x3D;true]</span> <span class=\"param-type\">(boolean)</span> <div data-render-html=\"/#synthetic\"><p>指定调用在节流结束后 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Function)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回节流的函数</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token comment\" spellcheck=\"true\">// 避免在滚动时过分的更新定位</span>\n<span class=\"token function\" >jQuery</span><span class=\"token punctuation\" >(</span>window<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >on</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'scroll'</span><span class=\"token punctuation\" >,</span> _<span class=\"token punctuation\" >.</span><span class=\"token function\" >throttle</span><span class=\"token punctuation\" >(</span>updatePosition<span class=\"token punctuation\" >,</span> <span class=\"token number\" >100</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 点击后就调用 `renewToken`，但5分钟内超过1次。</span>\n<span class=\"token keyword\" >var</span> throttled <span class=\"token operator\" >=</span> _<span class=\"token punctuation\" >.</span><span class=\"token function\" >throttle</span><span class=\"token punctuation\" >(</span>renewToken<span class=\"token punctuation\" >,</span> <span class=\"token number\" >300000</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'trailing'</span><span class=\"token punctuation\" >:</span> <span class=\"token keyword\" >false</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token function\" >jQuery</span><span class=\"token punctuation\" >(</span>element<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >on</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'click'</span><span class=\"token punctuation\" >,</span> throttled<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 取消一个 trailing 的节流调用</span>\n<span class=\"token function\" >jQuery</span><span class=\"token punctuation\" >(</span>window<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >on</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'popstate'</span><span class=\"token punctuation\" >,</span> throttled<span class=\"token punctuation\" >.</span>cancel<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/unary",
  "html":"<div data-render-page=\"entry\"><h2>unary <a class=\"fa-link\" href=\"./unary\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L9199\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.unary\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.unary(func)</div>\n\n<div data-render-html=\"/unary\"><p>创建一个最多接受一个参数的函数，忽略多余的参数。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">func</span> <span class=\"param-type\">(Function)</span> <div data-render-html=\"/#synthetic\"><p>要处理的函数 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Function)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回新函数</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token string\" >'6'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'8'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'10'</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> _<span class=\"token punctuation\" >.</span><span class=\"token function\" >unary</span><span class=\"token punctuation\" >(</span>parseInt<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => [6, 8, 10]</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/wrap",
  "html":"<div data-render-page=\"entry\"><h2>wrap <a class=\"fa-link\" href=\"./wrap\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L9223\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.wrap\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.wrap(value, wrapper)</div>\n\n<div data-render-html=\"/wrap\"><p>创建一个函数。提供的 <code>value</code> 包装在 wrapper 函数的第一个参数里。\n任何附加的参数都提供给 wrapper 函数。\n被调用时 <code>this</code> 绑定在创建的函数上。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">value</span> <span class=\"param-type\">(*)</span> <div data-render-html=\"/#synthetic\"><p>要包装的值 </p>\n</div></li>\n<li><span class=\"param-name\">wrapper</span> <span class=\"param-type\">(Function)</span> <div data-render-html=\"/#synthetic\"><p>包装函数 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Function)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回新的函数</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token keyword\" >var</span> p <span class=\"token operator\" >=</span> _<span class=\"token punctuation\" >.</span><span class=\"token function\" >wrap</span><span class=\"token punctuation\" >(</span>_<span class=\"token punctuation\" >.</span>escape<span class=\"token punctuation\" >,</span> <span class=\"token keyword\" >function</span><span class=\"token punctuation\" >(</span>func<span class=\"token punctuation\" >,</span> text<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span>\n  <span class=\"token keyword\" >return</span> <span class=\"token string\" >'&lt;p>'</span> <span class=\"token operator\" >+</span> <span class=\"token function\" >func</span><span class=\"token punctuation\" >(</span>text<span class=\"token punctuation\" >)</span> <span class=\"token operator\" >+</span> <span class=\"token string\" >'&lt;/p>'</span><span class=\"token punctuation\" >;</span>\n<span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n\n<span class=\"token function\" >p</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'fred, barney, &amp; pebbles'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => '&lt;p>fred, barney, &amp;amp; pebbles&lt;/p>'</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/castArray",
  "html":"<div data-render-page=\"entry\"><h2>castArray <a class=\"fa-link\" href=\"./castArray\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L9262\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.castarray\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.castArray(value)</div>\n\n<div data-render-html=\"/castArray\"><p>如果 <code>value</code> 不是数组, 那么强制转为数组</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">value</span> <span class=\"param-type\">(*)</span> <div data-render-html=\"/#synthetic\"><p>要处理的值 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Array)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回转换后的数组</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >castArray</span><span class=\"token punctuation\" >(</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => [1]</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >castArray</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> <span class=\"token string\" >'a'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => [{ 'a': 1 }]</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >castArray</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'abc'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => ['abc']</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >castArray</span><span class=\"token punctuation\" >(</span><span class=\"token keyword\" >null</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => [null]</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >castArray</span><span class=\"token punctuation\" >(</span>undefined<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => [undefined]</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >castArray</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => []</span>\n\n<span class=\"token keyword\" >var</span> array <span class=\"token operator\" >=</span> <span class=\"token punctuation\" >[</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >;</span>\nconsole<span class=\"token punctuation\" >.</span><span class=\"token function\" >log</span><span class=\"token punctuation\" >(</span>_<span class=\"token punctuation\" >.</span><span class=\"token function\" >castArray</span><span class=\"token punctuation\" >(</span>array<span class=\"token punctuation\" >)</span> <span class=\"token operator\" >===</span> array<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => true</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/clone",
  "html":"<div data-render-page=\"entry\"><h2>clone <a class=\"fa-link\" href=\"./clone\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L9294\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.clone\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.clone(value)</div>\n\n<div data-render-html=\"/clone\"><p>创建一个 <code>value</code> 的浅拷贝。\n<br>\n<br>\n<strong>注意:</strong> 这个方法参考自\n<a href=\"https://mdn.io/Structured_clone_algorithm\" target=\"_blank\">structured clone algorithm</a>\n以及支持 arrays、array buffers、 booleans、 date objects、maps、\nnumbers， <code>Object</code> objects, regexes, sets, strings, symbols, 以及 typed\narrays。\n参数对象的可枚举属性会拷贝为普通对象。\n一些不可拷贝的对象，例如error objects、functions, DOM nodes, 以及 WeakMaps 会返回空对象。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">value</span> <span class=\"param-type\">(*)</span> <div data-render-html=\"/#synthetic\"><p>要拷贝的值 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(*)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回拷贝后的值</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token keyword\" >var</span> objects <span class=\"token operator\" >=</span> <span class=\"token punctuation\" >[</span><span class=\"token punctuation\" >{</span> <span class=\"token string\" >'a'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'b'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >;</span>\n\n<span class=\"token keyword\" >var</span> shallow <span class=\"token operator\" >=</span> _<span class=\"token punctuation\" >.</span><span class=\"token function\" >clone</span><span class=\"token punctuation\" >(</span>objects<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\nconsole<span class=\"token punctuation\" >.</span><span class=\"token function\" >log</span><span class=\"token punctuation\" >(</span>shallow<span class=\"token punctuation\" >[</span><span class=\"token number\" >0</span><span class=\"token punctuation\" >]</span> <span class=\"token operator\" >===</span> objects<span class=\"token punctuation\" >[</span><span class=\"token number\" >0</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => true</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/cloneDeep",
  "html":"<div data-render-page=\"entry\"><h2>cloneDeep <a class=\"fa-link\" href=\"./cloneDeep\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L9346\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.clonedeep\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.cloneDeep(value)</div>\n\n<div data-render-html=\"/cloneDeep\"><p>这个方法类似 <code>_.clone</code>，除了它会递归拷贝 <code>value</code>。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">value</span> <span class=\"param-type\">(*)</span> <div data-render-html=\"/#synthetic\"><p>要深拷贝的值 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(*)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回拷贝后的值</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token keyword\" >var</span> objects <span class=\"token operator\" >=</span> <span class=\"token punctuation\" >[</span><span class=\"token punctuation\" >{</span> <span class=\"token string\" >'a'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'b'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >;</span>\n\n<span class=\"token keyword\" >var</span> deep <span class=\"token operator\" >=</span> _<span class=\"token punctuation\" >.</span><span class=\"token function\" >cloneDeep</span><span class=\"token punctuation\" >(</span>objects<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\nconsole<span class=\"token punctuation\" >.</span><span class=\"token function\" >log</span><span class=\"token punctuation\" >(</span>deep<span class=\"token punctuation\" >[</span><span class=\"token number\" >0</span><span class=\"token punctuation\" >]</span> <span class=\"token operator\" >===</span> objects<span class=\"token punctuation\" >[</span><span class=\"token number\" >0</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => false</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/cloneDeepWith",
  "html":"<div data-render-page=\"entry\"><h2>cloneDeepWith <a class=\"fa-link\" href=\"./cloneDeepWith\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L9376\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.clonedeepwith\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.cloneDeepWith(value, [customizer])</div>\n\n<div data-render-html=\"/cloneDeepWith\"><p>这个方法类似 <code>_.cloneWith</code>，除了它会递归拷贝 <code>value</code>。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">value</span> <span class=\"param-type\">(*)</span> <div data-render-html=\"/#synthetic\"><p>要深拷贝的值 </p>\n</div></li>\n<li><span class=\"param-name\">[customizer]</span> <span class=\"param-type\">(Function)</span> <div data-render-html=\"/#synthetic\"><p>这个函数定制返回的拷贝值 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(*)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回拷贝后的值</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token keyword\" >function</span> <span class=\"token function\" >customizer</span><span class=\"token punctuation\" >(</span>value<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span>\n  <span class=\"token keyword\" >if</span> <span class=\"token punctuation\" >(</span>_<span class=\"token punctuation\" >.</span><span class=\"token function\" >isElement</span><span class=\"token punctuation\" >(</span>value<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span>\n    <span class=\"token keyword\" >return</span> value<span class=\"token punctuation\" >.</span><span class=\"token function\" >cloneNode</span><span class=\"token punctuation\" >(</span><span class=\"token keyword\" >true</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n  <span class=\"token punctuation\" >}</span>\n<span class=\"token punctuation\" >}</span>\n\n<span class=\"token keyword\" >var</span> el <span class=\"token operator\" >=</span> _<span class=\"token punctuation\" >.</span><span class=\"token function\" >cloneDeep</span><span class=\"token punctuation\" >(</span>document<span class=\"token punctuation\" >.</span>body<span class=\"token punctuation\" >,</span> customizer<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n\nconsole<span class=\"token punctuation\" >.</span><span class=\"token function\" >log</span><span class=\"token punctuation\" >(</span>el <span class=\"token operator\" >===</span> document<span class=\"token punctuation\" >.</span>body<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => false</span>\nconsole<span class=\"token punctuation\" >.</span><span class=\"token function\" >log</span><span class=\"token punctuation\" >(</span>el<span class=\"token punctuation\" >.</span>nodeName<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => BODY</span>\nconsole<span class=\"token punctuation\" >.</span><span class=\"token function\" >log</span><span class=\"token punctuation\" >(</span>el<span class=\"token punctuation\" >.</span>childNodes<span class=\"token punctuation\" >.</span>length<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 20</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/cloneWith",
  "html":"<div data-render-page=\"entry\"><h2>cloneWith <a class=\"fa-link\" href=\"./cloneWith\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L9326\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.clonewith\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.cloneWith(value, [customizer])</div>\n\n<div data-render-html=\"/cloneWith\"><p>这个方法类似 <code>_.clone</code>，除了它接受一个 <code>customizer</code> 定制返回的拷贝值。\n如果 <code>customizer</code> 返回 <code>undefined</code> 将会拷贝处理方法代替。\n<code>customizer</code> 会传入5个参数：(value [, index|key, object, stack])</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">value</span> <span class=\"param-type\">(*)</span> <div data-render-html=\"/#synthetic\"><p>要拷贝的值 </p>\n</div></li>\n<li><span class=\"param-name\">[customizer]</span> <span class=\"param-type\">(Function)</span> <div data-render-html=\"/#synthetic\"><p>这个函数定制返回的拷贝值 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(*)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回拷贝后的值</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token keyword\" >function</span> <span class=\"token function\" >customizer</span><span class=\"token punctuation\" >(</span>value<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span>\n  <span class=\"token keyword\" >if</span> <span class=\"token punctuation\" >(</span>_<span class=\"token punctuation\" >.</span><span class=\"token function\" >isElement</span><span class=\"token punctuation\" >(</span>value<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span>\n    <span class=\"token keyword\" >return</span> value<span class=\"token punctuation\" >.</span><span class=\"token function\" >cloneNode</span><span class=\"token punctuation\" >(</span><span class=\"token keyword\" >false</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n  <span class=\"token punctuation\" >}</span>\n<span class=\"token punctuation\" >}</span>\n\n<span class=\"token keyword\" >var</span> el <span class=\"token operator\" >=</span> _<span class=\"token punctuation\" >.</span><span class=\"token function\" >cloneWith</span><span class=\"token punctuation\" >(</span>document<span class=\"token punctuation\" >.</span>body<span class=\"token punctuation\" >,</span> customizer<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n\nconsole<span class=\"token punctuation\" >.</span><span class=\"token function\" >log</span><span class=\"token punctuation\" >(</span>el <span class=\"token operator\" >===</span> document<span class=\"token punctuation\" >.</span>body<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => false</span>\nconsole<span class=\"token punctuation\" >.</span><span class=\"token function\" >log</span><span class=\"token punctuation\" >(</span>el<span class=\"token punctuation\" >.</span>nodeName<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 'BODY'</span>\nconsole<span class=\"token punctuation\" >.</span><span class=\"token function\" >log</span><span class=\"token punctuation\" >(</span>el<span class=\"token punctuation\" >.</span>childNodes<span class=\"token punctuation\" >.</span>length<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 0</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/eq",
  "html":"<div data-render-page=\"entry\"><h2>eq <a class=\"fa-link\" href=\"./eq\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L9409\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.eq\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.eq(value, other)</div>\n\n<div data-render-html=\"/eq\"><p>执行 <a href=\"http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero\" target=\"_blank\"><code>SameValueZero</code></a> 比较两者的值确定它们是否相等。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">value</span> <span class=\"param-type\">(*)</span> <div data-render-html=\"/#synthetic\"><p>要比较的值 </p>\n</div></li>\n<li><span class=\"param-name\">other</span> <span class=\"param-type\">(*)</span> <div data-render-html=\"/#synthetic\"><p>其他要比较的值 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(boolean)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 相等返回 <code>true</code>，否则返回 <code>false</code></p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token keyword\" >var</span> object <span class=\"token operator\" >=</span> <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'user'</span><span class=\"token punctuation\" >:</span> <span class=\"token string\" >'fred'</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >;</span>\n<span class=\"token keyword\" >var</span> other <span class=\"token operator\" >=</span> <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'user'</span><span class=\"token punctuation\" >:</span> <span class=\"token string\" >'fred'</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >;</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >eq</span><span class=\"token punctuation\" >(</span>object<span class=\"token punctuation\" >,</span> object<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => true</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >eq</span><span class=\"token punctuation\" >(</span>object<span class=\"token punctuation\" >,</span> other<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => false</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >eq</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'a'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'a'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => true</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >eq</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'a'</span><span class=\"token punctuation\" >,</span> <span class=\"token function\" >Object</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'a'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => false</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >eq</span><span class=\"token punctuation\" >(</span><span class=\"token number\" >NaN</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >NaN</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => true</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/gt",
  "html":"<div data-render-page=\"entry\"><h2>gt <a class=\"fa-link\" href=\"./gt\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L9433\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.gt\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.gt(value, other)</div>\n\n<div data-render-html=\"/gt\"><p>检查 <code>value</code> 是否大于 <code>other</code></p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">value</span> <span class=\"param-type\">(*)</span> <div data-render-html=\"/#synthetic\"><p>要比较的值 </p>\n</div></li>\n<li><span class=\"param-name\">other</span> <span class=\"param-type\">(*)</span> <div data-render-html=\"/#synthetic\"><p>其他要比较的值 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(boolean)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 如果 <code>value</code> 大于 <code>other</code>，返回 <code>true</code>，否则返回 <code>false</code></p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >gt</span><span class=\"token punctuation\" >(</span><span class=\"token number\" >3</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => true</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >gt</span><span class=\"token punctuation\" >(</span><span class=\"token number\" >3</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => false</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >gt</span><span class=\"token punctuation\" >(</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => false</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/gte",
  "html":"<div data-render-page=\"entry\"><h2>gte <a class=\"fa-link\" href=\"./gte\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L9457\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.gte\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.gte(value, other)</div>\n\n<div data-render-html=\"/gte\"><p>检查 <code>value</code> 是否大于等于 <code>other</code></p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">value</span> <span class=\"param-type\">(*)</span> <div data-render-html=\"/#synthetic\"><p>要比较的值 </p>\n</div></li>\n<li><span class=\"param-name\">other</span> <span class=\"param-type\">(*)</span> <div data-render-html=\"/#synthetic\"><p>其他要比较的值 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(boolean)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 如果 <code>value</code> 大于等于 <code>other</code>，返回 <code>true</code>，否则返回 <code>false</code></p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >gte</span><span class=\"token punctuation\" >(</span><span class=\"token number\" >3</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => true</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >gte</span><span class=\"token punctuation\" >(</span><span class=\"token number\" >3</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => true</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >gte</span><span class=\"token punctuation\" >(</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => false</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/isArguments",
  "html":"<div data-render-page=\"entry\"><h2>isArguments <a class=\"fa-link\" href=\"./isArguments\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L9477\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.isarguments\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.isArguments(value)</div>\n\n<div data-render-html=\"/isArguments\"><p>检查 <code>value</code> 是否是 类 <code>arguments</code> 对象。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">value</span> <span class=\"param-type\">(*)</span> <div data-render-html=\"/#synthetic\"><p>要检查的值 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(boolean)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 如果是正确的类型，返回 <code>true</code>，否则返回 <code>false</code></p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >isArguments</span><span class=\"token punctuation\" >(</span><span class=\"token keyword\" >function</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span> <span class=\"token keyword\" >return</span> arguments<span class=\"token punctuation\" >;</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => true</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >isArguments</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => false</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/isArray",
  "html":"<div data-render-page=\"entry\"><h2>isArray <a class=\"fa-link\" href=\"./isArray\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L9506\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.isarray\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.isArray(value)</div>\n\n<div data-render-html=\"/isArray\"><p>检查 <code>value</code> 是否是 <code>Array</code> 类对象。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">value</span> <span class=\"param-type\">(*)</span> <div data-render-html=\"/#synthetic\"><p>要检查的值 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(boolean)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 如果是正确的类型，返回 <code>true</code>，否则返回 <code>false</code></p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >isArray</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => true</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >isArray</span><span class=\"token punctuation\" >(</span>document<span class=\"token punctuation\" >.</span>body<span class=\"token punctuation\" >.</span>children<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => false</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >isArray</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'abc'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => false</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >isArray</span><span class=\"token punctuation\" >(</span>_<span class=\"token punctuation\" >.</span>noop<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => false</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/isArrayBuffer",
  "html":"<div data-render-page=\"entry\"><h2>isArrayBuffer <a class=\"fa-link\" href=\"./isArrayBuffer\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L9524\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.isarraybuffer\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.isArrayBuffer(value)</div>\n\n<div data-render-html=\"/isArrayBuffer\"><p>检查 <code>value</code> 是否是 <code>ArrayBuffer</code> 对象。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">value</span> <span class=\"param-type\">(*)</span> <div data-render-html=\"/#synthetic\"><p>要检查的值 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(boolean)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 如果是 <code>ArrayBuffer</code>，返回 <code>true</code>，否则返回 <code>false</code>.</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >isArrayBuffer</span><span class=\"token punctuation\" >(</span><span class=\"token keyword\" >new</span> <span class=\"token class-name\" >ArrayBuffer</span><span class=\"token punctuation\" >(</span><span class=\"token number\" >2</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => true</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >isArrayBuffer</span><span class=\"token punctuation\" >(</span><span class=\"token keyword\" >new</span> <span class=\"token class-name\" >Array</span><span class=\"token punctuation\" >(</span><span class=\"token number\" >2</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => false</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/isArrayLike",
  "html":"<div data-render-page=\"entry\"><h2>isArrayLike <a class=\"fa-link\" href=\"./isArrayLike\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L9551\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.isarraylike\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.isArrayLike(value)</div>\n\n<div data-render-html=\"/isArrayLike\"><p>检查 <code>value</code> 是否是类数组。\n如果是类数组的话，应该不是一个函数，而且 <code>value.length</code> 是个整数，大于等于 0，小于或等于 <code>Number.MAX_SAFE_INTEGER</code></p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">value</span> <span class=\"param-type\">(*)</span> <div data-render-html=\"/#synthetic\"><p>要检查的值 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(boolean)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 如果是类数组，返回 <code>true</code>，否则返回 <code>false</code></p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >isArrayLike</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => true</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >isArrayLike</span><span class=\"token punctuation\" >(</span>document<span class=\"token punctuation\" >.</span>body<span class=\"token punctuation\" >.</span>children<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => true</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >isArrayLike</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'abc'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => true</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >isArrayLike</span><span class=\"token punctuation\" >(</span>_<span class=\"token punctuation\" >.</span>noop<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => false</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/isArrayLikeObject",
  "html":"<div data-render-page=\"entry\"><h2>isArrayLikeObject <a class=\"fa-link\" href=\"./isArrayLikeObject\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L9577\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.isarraylikeobject\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.isArrayLikeObject(value)</div>\n\n<div data-render-html=\"/isArrayLikeObject\"><p>这个方法类似 <code>_.isArrayLike</code>，除了它还检查值是否是个对象。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">value</span> <span class=\"param-type\">(*)</span> <div data-render-html=\"/#synthetic\"><p>要检查的值 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(boolean)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 如果是类数组对象，返回 <code>true</code>，否则返回 <code>false</code></p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >isArrayLikeObject</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => true</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >isArrayLikeObject</span><span class=\"token punctuation\" >(</span>document<span class=\"token punctuation\" >.</span>body<span class=\"token punctuation\" >.</span>children<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => true</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >isArrayLikeObject</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'abc'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => false</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >isArrayLikeObject</span><span class=\"token punctuation\" >(</span>_<span class=\"token punctuation\" >.</span>noop<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => false</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/isBoolean",
  "html":"<div data-render-page=\"entry\"><h2>isBoolean <a class=\"fa-link\" href=\"./isBoolean\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L9597\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.isboolean\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.isBoolean(value)</div>\n\n<div data-render-html=\"/isBoolean\"><p>检查 <code>value</code> 是否是原始 boolean 类型或者对象。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">value</span> <span class=\"param-type\">(*)</span> <div data-render-html=\"/#synthetic\"><p>要检查的值 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(boolean)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 如果是正确的类型，返回 <code>true</code>，否则返回 <code>false</code></p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >isBoolean</span><span class=\"token punctuation\" >(</span><span class=\"token keyword\" >false</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => true</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >isBoolean</span><span class=\"token punctuation\" >(</span><span class=\"token keyword\" >null</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => false</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/isBuffer",
  "html":"<div data-render-page=\"entry\"><h2>isBuffer <a class=\"fa-link\" href=\"./isBuffer\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L9618\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.isbuffer\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.isBuffer(value)</div>\n\n<div data-render-html=\"/isBuffer\"><p>检查 <code>value</code> 是否是个 <code>buffer</code></p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">value</span> <span class=\"param-type\">(*)</span> <div data-render-html=\"/#synthetic\"><p>要检查的值 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(boolean)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 如果是正确的类型，返回 <code>true</code>，否则返回 <code>false</code></p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >isBuffer</span><span class=\"token punctuation\" >(</span><span class=\"token keyword\" >new</span> <span class=\"token class-name\" >Buffer</span><span class=\"token punctuation\" >(</span><span class=\"token number\" >2</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => true</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >isBuffer</span><span class=\"token punctuation\" >(</span><span class=\"token keyword\" >new</span> <span class=\"token class-name\" >Uint8Array</span><span class=\"token punctuation\" >(</span><span class=\"token number\" >2</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => false</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/isDate",
  "html":"<div data-render-page=\"entry\"><h2>isDate <a class=\"fa-link\" href=\"./isDate\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L9638\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.isdate\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.isDate(value)</div>\n\n<div data-render-html=\"/isDate\"><p>检查 <code>value</code> 是否是 <code>Date</code> 类型</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">value</span> <span class=\"param-type\">(*)</span> <div data-render-html=\"/#synthetic\"><p>要检查的值 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(boolean)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 如果是正确的类型，返回 <code>true</code>，否则返回 <code>false</code></p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >isDate</span><span class=\"token punctuation\" >(</span><span class=\"token keyword\" >new</span> <span class=\"token class-name\" >Date</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => true</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >isDate</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'Mon April 23 2012'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => false</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/isElement",
  "html":"<div data-render-page=\"entry\"><h2>isElement <a class=\"fa-link\" href=\"./isElement\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L9658\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.iselement\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.isElement(value)</div>\n\n<div data-render-html=\"/isElement\"><p>检查 <code>value</code> 是否是可能是 DOM 元素</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">value</span> <span class=\"param-type\">(*)</span> <div data-render-html=\"/#synthetic\"><p>要检查的值 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(boolean)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 如果是 DOM 元素返回 <code>true</code>，否则返回 <code>false</code></p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >isElement</span><span class=\"token punctuation\" >(</span>document<span class=\"token punctuation\" >.</span>body<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => true</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >isElement</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'&lt;body>'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => false</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/isEmpty",
  "html":"<div data-render-page=\"entry\"><h2>isEmpty <a class=\"fa-link\" href=\"./isEmpty\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L9688\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.isempty\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.isEmpty(value)</div>\n\n<div data-render-html=\"/isEmpty\"><p>检查 <code>value</code> 是否为空。\n判断的依据是除非是有枚举属性的对象，length 大于 <code>0</code> 的 <code>arguments</code> object, array, string 或类jquery选择器。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">value</span> <span class=\"param-type\">(Array|Object|string)</span> <div data-render-html=\"/#synthetic\"><p>要检查的值 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(boolean)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 如果为空返回 <code>true</code>，否则返回 <code>false</code></p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >isEmpty</span><span class=\"token punctuation\" >(</span><span class=\"token keyword\" >null</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => true</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >isEmpty</span><span class=\"token punctuation\" >(</span><span class=\"token keyword\" >true</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => true</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >isEmpty</span><span class=\"token punctuation\" >(</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => true</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >isEmpty</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => false</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >isEmpty</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> <span class=\"token string\" >'a'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => false</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/isEqual",
  "html":"<div data-render-page=\"entry\"><h2>isEqual <a class=\"fa-link\" href=\"./isEqual\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L9726\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.isequal\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.isEqual(value, other)</div>\n\n<div data-render-html=\"/isEqual\"><p>执行深比较来决定两者的值是否相等。\n<br>\n<br>\n<strong>注意:</strong> 这个方法支持比较 arrays, array buffers, booleans,\ndate objects, error objects, maps, numbers, <code>Object</code> objects, regexes,\nsets, strings, symbols, 以及 typed arrays. <code>Object</code> 对象值比较自身的属性，不包括继承的和可枚举的属性。\n不支持函数和DOM节点。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">value</span> <span class=\"param-type\">(*)</span> <div data-render-html=\"/#synthetic\"><p>要比较的值 </p>\n</div></li>\n<li><span class=\"param-name\">other</span> <span class=\"param-type\">(*)</span> <div data-render-html=\"/#synthetic\"><p>其他要比较的值 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(boolean)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 如果相等返回 <code>true</code>，否则返回 <code>false</code></p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token keyword\" >var</span> object <span class=\"token operator\" >=</span> <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'user'</span><span class=\"token punctuation\" >:</span> <span class=\"token string\" >'fred'</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >;</span>\n<span class=\"token keyword\" >var</span> other <span class=\"token operator\" >=</span> <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'user'</span><span class=\"token punctuation\" >:</span> <span class=\"token string\" >'fred'</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >;</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >isEqual</span><span class=\"token punctuation\" >(</span>object<span class=\"token punctuation\" >,</span> other<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => true</span>\n\nobject <span class=\"token operator\" >===</span> other<span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => false</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/isEqualWith",
  "html":"<div data-render-page=\"entry\"><h2>isEqualWith <a class=\"fa-link\" href=\"./isEqualWith\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L9760\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.isequalwith\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.isEqualWith(value, other, [customizer])</div>\n\n<div data-render-html=\"/isEqualWith\"><p>这个方法类似 <code>_.isEqual</code>。\n除了它接受一个 customizer 定制比较值。 如果 customizer 返回 undefined 将会比较处理方法代替。\n<code>customizer</code> 会传入7个参数：(objValue, othValue [, index|key, object, other, stack])</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">value</span> <span class=\"param-type\">(*)</span> <div data-render-html=\"/#synthetic\"><p>要比较的值 </p>\n</div></li>\n<li><span class=\"param-name\">other</span> <span class=\"param-type\">(*)</span> <div data-render-html=\"/#synthetic\"><p>其他要比较的值 </p>\n</div></li>\n<li><span class=\"param-name\">[customizer]</span> <span class=\"param-type\">(Function)</span> <div data-render-html=\"/#synthetic\"><p>这个函数定制比较值 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(boolean)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 如果相等返回 <code>true</code>，否则返回 <code>false</code></p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token keyword\" >function</span> <span class=\"token function\" >isGreeting</span><span class=\"token punctuation\" >(</span>value<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span>\n  <span class=\"token keyword\" >return</span> <span class=\"token regex\" >/^h(?:i|ello)$/</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >test</span><span class=\"token punctuation\" >(</span>value<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token punctuation\" >}</span>\n\n<span class=\"token keyword\" >function</span> <span class=\"token function\" >customizer</span><span class=\"token punctuation\" >(</span>objValue<span class=\"token punctuation\" >,</span> othValue<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span>\n  <span class=\"token keyword\" >if</span> <span class=\"token punctuation\" >(</span><span class=\"token function\" >isGreeting</span><span class=\"token punctuation\" >(</span>objValue<span class=\"token punctuation\" >)</span> <span class=\"token operator\" >&amp;&amp;</span> <span class=\"token function\" >isGreeting</span><span class=\"token punctuation\" >(</span>othValue<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span>\n    <span class=\"token keyword\" >return</span> <span class=\"token keyword\" >true</span><span class=\"token punctuation\" >;</span>\n  <span class=\"token punctuation\" >}</span>\n<span class=\"token punctuation\" >}</span>\n\n<span class=\"token keyword\" >var</span> array <span class=\"token operator\" >=</span> <span class=\"token punctuation\" >[</span><span class=\"token string\" >'hello'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'goodbye'</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >;</span>\n<span class=\"token keyword\" >var</span> other <span class=\"token operator\" >=</span> <span class=\"token punctuation\" >[</span><span class=\"token string\" >'hi'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'goodbye'</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >;</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >isEqualWith</span><span class=\"token punctuation\" >(</span>array<span class=\"token punctuation\" >,</span> other<span class=\"token punctuation\" >,</span> customizer<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => true</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/isError",
  "html":"<div data-render-page=\"entry\"><h2>isError <a class=\"fa-link\" href=\"./isError\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L9783\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.iserror\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.isError(value)</div>\n\n<div data-render-html=\"/isError\"><p>检查 <code>value</code> 是否是 <code>Error</code>, <code>EvalError</code>, <code>RangeError</code>, <code>ReferenceError</code>,\n<code>SyntaxError</code>, <code>TypeError</code>, 或 <code>URIError</code> object.</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">value</span> <span class=\"param-type\">(*)</span> <div data-render-html=\"/#synthetic\"><p>要检查的值 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(boolean)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 如果是 error object 返回 <code>true</code>，否则返回 <code>false</code></p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >isError</span><span class=\"token punctuation\" >(</span><span class=\"token keyword\" >new</span> <span class=\"token class-name\" >Error</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => true</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >isError</span><span class=\"token punctuation\" >(</span>Error<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => false</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/isFinite",
  "html":"<div data-render-page=\"entry\"><h2>isFinite <a class=\"fa-link\" href=\"./isFinite\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L9815\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.isfinite\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.isFinite(value)</div>\n\n<div data-render-html=\"/isFinite\"><p>检查 <code>value</code> 是否是原始 finite number。\n<br>\n<br>\n<strong>注意:</strong> 这个方法基于 <a href=\"https://mdn.io/Number/isFinite\" target=\"_blank\"><code>Number.isFinite</code></a>.</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">value</span> <span class=\"param-type\">(*)</span> <div data-render-html=\"/#synthetic\"><p>要检查的值 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(boolean)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 如果是 finite number 返回 <code>true</code>，否则返回 <code>false</code></p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >isFinite</span><span class=\"token punctuation\" >(</span><span class=\"token number\" >3</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => true</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >isFinite</span><span class=\"token punctuation\" >(</span>Number<span class=\"token punctuation\" >.</span>MAX_VALUE<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => true</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >isFinite</span><span class=\"token punctuation\" >(</span><span class=\"token number\" >3.14</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => true</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >isFinite</span><span class=\"token punctuation\" >(</span><span class=\"token number\" >Infinity</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => false</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/isFunction",
  "html":"<div data-render-page=\"entry\"><h2>isFunction <a class=\"fa-link\" href=\"./isFunction\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L9835\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.isfunction\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.isFunction(value)</div>\n\n<div data-render-html=\"/isFunction\"><p>检查 <code>value</code> 是否是 <code>Function</code> 对象。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">value</span> <span class=\"param-type\">(*)</span> <div data-render-html=\"/#synthetic\"><p>要检查的值 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(boolean)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 如果是正确的类型，返回 <code>true</code>，否则返回 <code>false</code></p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >isFunction</span><span class=\"token punctuation\" >(</span>_<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => true</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >isFunction</span><span class=\"token punctuation\" >(</span><span class=\"token regex\" >/abc/</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => false</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/isInteger",
  "html":"<div data-render-page=\"entry\"><h2>isInteger <a class=\"fa-link\" href=\"./isInteger\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L9867\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.isinteger\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.isInteger(value)</div>\n\n<div data-render-html=\"/isInteger\"><p>检查 <code>value</code> 是否是整数。\n<br>\n<br>\n<strong>注意:</strong> 这个方法基于 <a href=\"https://mdn.io/Number/isInteger\" target=\"_blank\"><code>Number.isInteger</code></a>.</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">value</span> <span class=\"param-type\">(*)</span> <div data-render-html=\"/#synthetic\"><p>要检查的值 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(boolean)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 如果是整数返回 <code>true</code>，否则返回 <code>false</code></p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >isInteger</span><span class=\"token punctuation\" >(</span><span class=\"token number\" >3</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => true</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >isInteger</span><span class=\"token punctuation\" >(</span>Number<span class=\"token punctuation\" >.</span>MIN_VALUE<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => false</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >isInteger</span><span class=\"token punctuation\" >(</span><span class=\"token number\" >Infinity</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => false</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >isInteger</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'3'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => false</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/isLength",
  "html":"<div data-render-page=\"entry\"><h2>isLength <a class=\"fa-link\" href=\"./isLength\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L9895\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.islength\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.isLength(value)</div>\n\n<div data-render-html=\"/isLength\"><p>检查 <code>value</code> 是否是有效长度\n<br>\n<br>\n<strong>注意:</strong> 这个方法参考自 <a href=\"http://ecma-international.org/ecma-262/6.0/#sec-tolength\" target=\"_blank\"><code>ToLength</code></a>.</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">value</span> <span class=\"param-type\">(*)</span> <div data-render-html=\"/#synthetic\"><p>要检查的值 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(boolean)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 如果是有效长度返回 <code>true</code>，否则返回 <code>false</code></p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >isLength</span><span class=\"token punctuation\" >(</span><span class=\"token number\" >3</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => true</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >isLength</span><span class=\"token punctuation\" >(</span>Number<span class=\"token punctuation\" >.</span>MIN_VALUE<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => false</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >isLength</span><span class=\"token punctuation\" >(</span><span class=\"token number\" >Infinity</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => false</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >isLength</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'3'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => false</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/isMap",
  "html":"<div data-render-page=\"entry\"><h2>isMap <a class=\"fa-link\" href=\"./isMap\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L9970\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.ismap\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.isMap(value)</div>\n\n<div data-render-html=\"/isMap\"><p>检查 <code>value</code> 是否是个 <code>Map</code> 对象</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">value</span> <span class=\"param-type\">(*)</span> <div data-render-html=\"/#synthetic\"><p>要检查的值 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(boolean)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 如果是 <code>Map</code> 对象返回 <code>true</code>，否则返回 <code>false</code></p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >isMap</span><span class=\"token punctuation\" >(</span><span class=\"token keyword\" >new</span> <span class=\"token class-name\" >Map</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => true</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >isMap</span><span class=\"token punctuation\" >(</span><span class=\"token keyword\" >new</span> <span class=\"token class-name\" >WeakMap</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => false</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/isMatch",
  "html":"<div data-render-page=\"entry\"><h2>isMatch <a class=\"fa-link\" href=\"./isMatch\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L9995\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.ismatch\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.isMatch(object, source)</div>\n\n<div data-render-html=\"/isMatch\"><p>执行一个深比较来确定<code>object</code> 是否包含有 <code>source</code> 的属性值。\n<br>\n<br>\n<strong>注意:</strong> 这个方法支持比较相同的值和 <code>_.isEqual</code> 一样</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">object</span> <span class=\"param-type\">(Object)</span> <div data-render-html=\"/#synthetic\"><p>要检查的值 </p>\n</div></li>\n<li><span class=\"param-name\">source</span> <span class=\"param-type\">(Object)</span> <div data-render-html=\"/#synthetic\"><p>匹配包含在 object 的对象 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(boolean)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 如果匹配返回 <code>true</code>，否则返回 <code>false</code></p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token keyword\" >var</span> object <span class=\"token operator\" >=</span> <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'user'</span><span class=\"token punctuation\" >:</span> <span class=\"token string\" >'fred'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'age'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >40</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >;</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >isMatch</span><span class=\"token punctuation\" >(</span>object<span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'age'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >40</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => true</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >isMatch</span><span class=\"token punctuation\" >(</span>object<span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'age'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >36</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => false</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/isMatchWith",
  "html":"<div data-render-page=\"entry\"><h2>isMatchWith <a class=\"fa-link\" href=\"./isMatchWith\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L10029\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.ismatchwith\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.isMatchWith(object, source, [customizer])</div>\n\n<div data-render-html=\"/isMatchWith\"><p>这个方法类似 <code>_.isMatch</code>。\n除了它接受一个 customizer 定制比较的值。\n如果 customizer 返回 undefined 将会比较处理方法代替。 customizer 会传入5个参数：(objValue, srcValue, index|key, object, source)</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">object</span> <span class=\"param-type\">(Object)</span> <div data-render-html=\"/#synthetic\"><p>要检查的值 </p>\n</div></li>\n<li><span class=\"param-name\">source</span> <span class=\"param-type\">(Object)</span> <div data-render-html=\"/#synthetic\"><p>匹配包含在 object 的对象 </p>\n</div></li>\n<li><span class=\"param-name\">[customizer]</span> <span class=\"param-type\">(Function)</span> <div data-render-html=\"/#synthetic\"><p>这个函数定制比较值 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(boolean)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 如果匹配返回 <code>true</code>，否则返回 <code>false</code></p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token keyword\" >function</span> <span class=\"token function\" >isGreeting</span><span class=\"token punctuation\" >(</span>value<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span>\n  <span class=\"token keyword\" >return</span> <span class=\"token regex\" >/^h(?:i|ello)$/</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >test</span><span class=\"token punctuation\" >(</span>value<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token punctuation\" >}</span>\n\n<span class=\"token keyword\" >function</span> <span class=\"token function\" >customizer</span><span class=\"token punctuation\" >(</span>objValue<span class=\"token punctuation\" >,</span> srcValue<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span>\n  <span class=\"token keyword\" >if</span> <span class=\"token punctuation\" >(</span><span class=\"token function\" >isGreeting</span><span class=\"token punctuation\" >(</span>objValue<span class=\"token punctuation\" >)</span> <span class=\"token operator\" >&amp;&amp;</span> <span class=\"token function\" >isGreeting</span><span class=\"token punctuation\" >(</span>srcValue<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span>\n    <span class=\"token keyword\" >return</span> <span class=\"token keyword\" >true</span><span class=\"token punctuation\" >;</span>\n  <span class=\"token punctuation\" >}</span>\n<span class=\"token punctuation\" >}</span>\n\n<span class=\"token keyword\" >var</span> object <span class=\"token operator\" >=</span> <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'greeting'</span><span class=\"token punctuation\" >:</span> <span class=\"token string\" >'hello'</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >;</span>\n<span class=\"token keyword\" >var</span> source <span class=\"token operator\" >=</span> <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'greeting'</span><span class=\"token punctuation\" >:</span> <span class=\"token string\" >'hi'</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >;</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >isMatchWith</span><span class=\"token punctuation\" >(</span>object<span class=\"token punctuation\" >,</span> source<span class=\"token punctuation\" >,</span> customizer<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => true</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/isNaN",
  "html":"<div data-render-page=\"entry\"><h2>isNaN <a class=\"fa-link\" href=\"./isNaN\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L10059\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.isnan\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.isNaN(value)</div>\n\n<div data-render-html=\"/isNaN\"><p>检查 <code>value</code> 是否是 <code>NaN</code>.\n<br>\n<br>\n<strong>注意:</strong> 这个方法不同于 <a href=\"https://es5.github.io/#x15.1.2.4\" target=\"_blank\"><code>isNaN</code></a>\n对 undefind 和 其他非数值返回 true.</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">value</span> <span class=\"param-type\">(*)</span> <div data-render-html=\"/#synthetic\"><p>要检查的值 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(boolean)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 如果符合 <code>NaN</code> 返回 <code>true</code>，否则返回 <code>false</code></p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >isNaN</span><span class=\"token punctuation\" >(</span><span class=\"token number\" >NaN</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => true</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >isNaN</span><span class=\"token punctuation\" >(</span><span class=\"token keyword\" >new</span> <span class=\"token class-name\" >Number</span><span class=\"token punctuation\" >(</span><span class=\"token number\" >NaN</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => true</span>\n\n<span class=\"token function\" >isNaN</span><span class=\"token punctuation\" >(</span>undefined<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => true</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >isNaN</span><span class=\"token punctuation\" >(</span>undefined<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => false</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/isNative",
  "html":"<div data-render-page=\"entry\"><h2>isNative <a class=\"fa-link\" href=\"./isNative\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L10081\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.isnative\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.isNative(value)</div>\n\n<div data-render-html=\"/isNative\"><p>检查 <code>value</code> 是否是原生函数</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">value</span> <span class=\"param-type\">(*)</span> <div data-render-html=\"/#synthetic\"><p>要检查的值 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(boolean)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 如果是原生函数返回 <code>true</code>，否则返回 <code>false</code></p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >isNative</span><span class=\"token punctuation\" >(</span>Array<span class=\"token punctuation\" >.</span>prototype<span class=\"token punctuation\" >.</span>push<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => true</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >isNative</span><span class=\"token punctuation\" >(</span>_<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => false</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/isNil",
  "html":"<div data-render-page=\"entry\"><h2>isNil <a class=\"fa-link\" href=\"./isNil\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L10131\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.isnil\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.isNil(value)</div>\n\n<div data-render-html=\"/isNil\"><p>检查 <code>value</code> 是否是 <code>null</code> 或者 <code>undefined</code>。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">value</span> <span class=\"param-type\">(*)</span> <div data-render-html=\"/#synthetic\"><p>要检查的值 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(boolean)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 如果是 <code>null</code> 或者 <code>undefined</code> 返回 <code>true</code>，否则返回 <code>false</code></p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >isNil</span><span class=\"token punctuation\" >(</span><span class=\"token keyword\" >null</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => true</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >isNil</span><span class=\"token punctuation\" >(</span><span class=\"token keyword\" >void</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => true</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >isNil</span><span class=\"token punctuation\" >(</span><span class=\"token number\" >NaN</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => false</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/isNull",
  "html":"<div data-render-page=\"entry\"><h2>isNull <a class=\"fa-link\" href=\"./isNull\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L10108\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.isnull\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.isNull(value)</div>\n\n<div data-render-html=\"/isNull\"><p>检查 <code>value</code> 是否是 <code>null</code>.</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">value</span> <span class=\"param-type\">(*)</span> <div data-render-html=\"/#synthetic\"><p>要检查的值 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(boolean)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 如果是 <code>null</code> 返回 <code>true</code>，否则返回 <code>false</code></p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >isNull</span><span class=\"token punctuation\" >(</span><span class=\"token keyword\" >null</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => true</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >isNull</span><span class=\"token punctuation\" >(</span><span class=\"token keyword\" >void</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => false</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/isNumber",
  "html":"<div data-render-page=\"entry\"><h2>isNumber <a class=\"fa-link\" href=\"./isNumber\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L10159\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.isnumber\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.isNumber(value)</div>\n\n<div data-render-html=\"/isNumber\"><p>检查 <code>value</code> 是否是原始数值型 或者 对象。\n<br>\n<br>\n<strong>注意:</strong> 要排除 <code>Infinity</code>, <code>-Infinity</code>, 以及 <code>NaN</code> 数值类型，用 <code>_.isFinite</code> 方法</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">value</span> <span class=\"param-type\">(*)</span> <div data-render-html=\"/#synthetic\"><p>要检查的值 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(boolean)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 如果是正确的类型，返回 <code>true</code>，否则返回 <code>false</code></p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >isNumber</span><span class=\"token punctuation\" >(</span><span class=\"token number\" >3</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => true</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >isNumber</span><span class=\"token punctuation\" >(</span>Number<span class=\"token punctuation\" >.</span>MIN_VALUE<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => true</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >isNumber</span><span class=\"token punctuation\" >(</span><span class=\"token number\" >Infinity</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => true</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >isNumber</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'3'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => false</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/isObject",
  "html":"<div data-render-page=\"entry\"><h2>isObject <a class=\"fa-link\" href=\"./isObject\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L9922\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.isobject\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.isObject(value)</div>\n\n<div data-render-html=\"/isObject\"><p>检查 <code>value</code> 是否是 <code>Object</code> 的 <a href=\"https://es5.github.io/#x8\" target=\"_blank\">language type</a>。\n(例如： arrays, functions, objects, regexes, <code>new Number(0)</code>, 以及 <code>new String(&#39;&#39;)</code>)</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">value</span> <span class=\"param-type\">(*)</span> <div data-render-html=\"/#synthetic\"><p>要检查的值 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(boolean)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 如果是对象返回 <code>true</code>，否则返回 <code>false</code></p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >isObject</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span><span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => true</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >isObject</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => true</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >isObject</span><span class=\"token punctuation\" >(</span>_<span class=\"token punctuation\" >.</span>noop<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => true</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >isObject</span><span class=\"token punctuation\" >(</span><span class=\"token keyword\" >null</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => false</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/isObjectLike",
  "html":"<div data-render-page=\"entry\"><h2>isObjectLike <a class=\"fa-link\" href=\"./isObjectLike\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L9950\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.isobjectlike\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.isObjectLike(value)</div>\n\n<div data-render-html=\"/isObjectLike\"><p>检查 <code>value</code> 是否是 类对象。\n类对象应该不是 <code>null</code> 以及 <code>typeof</code> 的结果是 &quot;object&quot;。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">value</span> <span class=\"param-type\">(*)</span> <div data-render-html=\"/#synthetic\"><p>要检查的值 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(boolean)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 如果是类对象返回 <code>true</code>，否则返回 <code>false</code></p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >isObjectLike</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span><span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => true</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >isObjectLike</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => true</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >isObjectLike</span><span class=\"token punctuation\" >(</span>_<span class=\"token punctuation\" >.</span>noop<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => false</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >isObjectLike</span><span class=\"token punctuation\" >(</span><span class=\"token keyword\" >null</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => false</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/isPlainObject",
  "html":"<div data-render-page=\"entry\"><h2>isPlainObject <a class=\"fa-link\" href=\"./isPlainObject\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L10191\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.isplainobject\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.isPlainObject(value)</div>\n\n<div data-render-html=\"/isPlainObject\"><p>检查 <code>value</code> 是否是普通对象。\n也就是说该对象由 <code>Object</code> 构造函数创建或者 <code>[[Prototype]]</code> 为空。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">value</span> <span class=\"param-type\">(*)</span> <div data-render-html=\"/#synthetic\"><p>要检查的值 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(boolean)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 如果是普通对象返回 <code>true</code>，否则返回 <code>false</code></p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token keyword\" >function</span> <span class=\"token function\" >Foo</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span>\n  <span class=\"token keyword\" >this</span><span class=\"token punctuation\" >.</span>a <span class=\"token operator\" >=</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >;</span>\n<span class=\"token punctuation\" >}</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >isPlainObject</span><span class=\"token punctuation\" >(</span><span class=\"token keyword\" >new</span> <span class=\"token class-name\" >Foo</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => false</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >isPlainObject</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => false</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >isPlainObject</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> <span class=\"token string\" >'x'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'y'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >0</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => true</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >isPlainObject</span><span class=\"token punctuation\" >(</span>Object<span class=\"token punctuation\" >.</span><span class=\"token function\" >create</span><span class=\"token punctuation\" >(</span><span class=\"token keyword\" >null</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => true</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/isRegExp",
  "html":"<div data-render-page=\"entry\"><h2>isRegExp <a class=\"fa-link\" href=\"./isRegExp\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L10220\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.isregexp\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.isRegExp(value)</div>\n\n<div data-render-html=\"/isRegExp\"><p>检查 <code>value</code> 是否是 <code>RegExp</code> 对象</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">value</span> <span class=\"param-type\">(*)</span> <div data-render-html=\"/#synthetic\"><p>要检查的值 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(boolean)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 如果是正确的类型，返回 <code>true</code>，否则返回 <code>false</code></p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >isRegExp</span><span class=\"token punctuation\" >(</span><span class=\"token regex\" >/abc/</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => true</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >isRegExp</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'/abc/'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => false</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/isSafeInteger",
  "html":"<div data-render-page=\"entry\"><h2>isSafeInteger <a class=\"fa-link\" href=\"./isSafeInteger\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L10249\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.issafeinteger\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.isSafeInteger(value)</div>\n\n<div data-render-html=\"/isSafeInteger\"><p>检查 <code>value</code> 是否是安全整数。\n这个整数应该是符合 IEEE-754 标准的非双精度浮点数。\n<br>\n<br>\n<strong>注意:</strong> 这个方法基于 <a href=\"https://mdn.io/Number/isSafeInteger\" target=\"_blank\"><code>Number.isSafeInteger</code></a>.</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">value</span> <span class=\"param-type\">(*)</span> <div data-render-html=\"/#synthetic\"><p>要检查的值 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(boolean)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 如果是安全整数返回<code>true</code>，否则返回 <code>false</code></p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >isSafeInteger</span><span class=\"token punctuation\" >(</span><span class=\"token number\" >3</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => true</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >isSafeInteger</span><span class=\"token punctuation\" >(</span>Number<span class=\"token punctuation\" >.</span>MIN_VALUE<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => false</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >isSafeInteger</span><span class=\"token punctuation\" >(</span><span class=\"token number\" >Infinity</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => false</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >isSafeInteger</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'3'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => false</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/isSet",
  "html":"<div data-render-page=\"entry\"><h2>isSet <a class=\"fa-link\" href=\"./isSet\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L10269\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.isset\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.isSet(value)</div>\n\n<div data-render-html=\"/isSet\"><p>检查 <code>value</code> 是否是 <code>Set</code> 对象。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">value</span> <span class=\"param-type\">(*)</span> <div data-render-html=\"/#synthetic\"><p>要检查的值 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(boolean)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 如果是正确的类型，返回 <code>true</code>，否则返回 <code>false</code></p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >isSet</span><span class=\"token punctuation\" >(</span><span class=\"token keyword\" >new</span> <span class=\"token class-name\" >Set</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => true</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >isSet</span><span class=\"token punctuation\" >(</span><span class=\"token keyword\" >new</span> <span class=\"token class-name\" >WeakSet</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => false</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/isString",
  "html":"<div data-render-page=\"entry\"><h2>isString <a class=\"fa-link\" href=\"./isString\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L10289\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.isstring\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.isString(value)</div>\n\n<div data-render-html=\"/isString\"><p>检查 <code>value</code> 是否是原始字符串或者对象。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">value</span> <span class=\"param-type\">(*)</span> <div data-render-html=\"/#synthetic\"><p>要检查的值 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(boolean)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 如果是正确的类型，返回 <code>true</code>，否则返回 <code>false</code></p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >isString</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'abc'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => true</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >isString</span><span class=\"token punctuation\" >(</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => false</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/isSymbol",
  "html":"<div data-render-page=\"entry\"><h2>isSymbol <a class=\"fa-link\" href=\"./isSymbol\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L10310\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.issymbol\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.isSymbol(value)</div>\n\n<div data-render-html=\"/isSymbol\"><p>检查 <code>value</code> 是否是原始 <code>Symbol</code> 或者对象。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">value</span> <span class=\"param-type\">(*)</span> <div data-render-html=\"/#synthetic\"><p>要检查的值 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(boolean)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 如果是正确的类型，返回 <code>true</code>，否则返回 <code>false</code></p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >isSymbol</span><span class=\"token punctuation\" >(</span>Symbol<span class=\"token punctuation\" >.</span>iterator<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => true</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >isSymbol</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'abc'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => false</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/isTypedArray",
  "html":"<div data-render-page=\"entry\"><h2>isTypedArray <a class=\"fa-link\" href=\"./isTypedArray\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L10331\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.istypedarray\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.isTypedArray(value)</div>\n\n<div data-render-html=\"/isTypedArray\"><p>检查 <code>value</code> 是否是TypedArray。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">value</span> <span class=\"param-type\">(*)</span> <div data-render-html=\"/#synthetic\"><p>要检查的值 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(boolean)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 如果是正确的类型，返回 <code>true</code>，否则返回 <code>false</code></p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >isTypedArray</span><span class=\"token punctuation\" >(</span><span class=\"token keyword\" >new</span> <span class=\"token class-name\" >Uint8Array</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => true</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >isTypedArray</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => false</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/isUndefined",
  "html":"<div data-render-page=\"entry\"><h2>isUndefined <a class=\"fa-link\" href=\"./isUndefined\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L10351\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.isundefined\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.isUndefined(value)</div>\n\n<div data-render-html=\"/isUndefined\"><p>检查 <code>value</code> 是否是 <code>undefined</code>.</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">value</span> <span class=\"param-type\">(*)</span> <div data-render-html=\"/#synthetic\"><p>要检查的值 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(boolean)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 如果是正确的类型，返回 <code>true</code>，否则返回 <code>false</code></p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >isUndefined</span><span class=\"token punctuation\" >(</span><span class=\"token keyword\" >void</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => true</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >isUndefined</span><span class=\"token punctuation\" >(</span><span class=\"token keyword\" >null</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => false</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/isWeakMap",
  "html":"<div data-render-page=\"entry\"><h2>isWeakMap <a class=\"fa-link\" href=\"./isWeakMap\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L10371\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.isweakmap\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.isWeakMap(value)</div>\n\n<div data-render-html=\"/isWeakMap\"><p>检查 <code>value</code> 是否是 <code>WeakMap</code> 对象</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">value</span> <span class=\"param-type\">(*)</span> <div data-render-html=\"/#synthetic\"><p>要检查的值 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(boolean)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 如果是正确的类型，返回 <code>true</code>，否则返回 <code>false</code></p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >isWeakMap</span><span class=\"token punctuation\" >(</span><span class=\"token keyword\" >new</span> <span class=\"token class-name\" >WeakMap</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => true</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >isWeakMap</span><span class=\"token punctuation\" >(</span><span class=\"token keyword\" >new</span> <span class=\"token class-name\" >Map</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => false</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/isWeakSet",
  "html":"<div data-render-page=\"entry\"><h2>isWeakSet <a class=\"fa-link\" href=\"./isWeakSet\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L10391\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.isweakset\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.isWeakSet(value)</div>\n\n<div data-render-html=\"/isWeakSet\"><p>检查 <code>value</code> 是否是 <code>WeakSet</code> 对象</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">value</span> <span class=\"param-type\">(*)</span> <div data-render-html=\"/#synthetic\"><p>要检查的值 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(boolean)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 如果是正确的类型，返回 <code>true</code>，否则返回 <code>false</code></p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >isWeakSet</span><span class=\"token punctuation\" >(</span><span class=\"token keyword\" >new</span> <span class=\"token class-name\" >WeakSet</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => true</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >isWeakSet</span><span class=\"token punctuation\" >(</span><span class=\"token keyword\" >new</span> <span class=\"token class-name\" >Set</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => false</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/lt",
  "html":"<div data-render-page=\"entry\"><h2>lt <a class=\"fa-link\" href=\"./lt\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L10415\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.lt\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.lt(value, other)</div>\n\n<div data-render-html=\"/lt\"><p>检查 <code>value</code> 是否是 小于 <code>other</code>。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">value</span> <span class=\"param-type\">(*)</span> <div data-render-html=\"/#synthetic\"><p>要比较的值 </p>\n</div></li>\n<li><span class=\"param-name\">other</span> <span class=\"param-type\">(*)</span> <div data-render-html=\"/#synthetic\"><p>其他要比较的值 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(boolean)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 如果 <code>value</code> 小于 <code>other</code> 返回 <code>true</code>，否则返回 <code>false</code></p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >lt</span><span class=\"token punctuation\" >(</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => true</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >lt</span><span class=\"token punctuation\" >(</span><span class=\"token number\" >3</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => false</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >lt</span><span class=\"token punctuation\" >(</span><span class=\"token number\" >3</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => false</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/lte",
  "html":"<div data-render-page=\"entry\"><h2>lte <a class=\"fa-link\" href=\"./lte\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L10439\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.lte\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.lte(value, other)</div>\n\n<div data-render-html=\"/lte\"><p>检查 <code>value</code> 是否是 小于等于 <code>other</code>.</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">value</span> <span class=\"param-type\">(*)</span> <div data-render-html=\"/#synthetic\"><p>要比较的值 </p>\n</div></li>\n<li><span class=\"param-name\">other</span> <span class=\"param-type\">(*)</span> <div data-render-html=\"/#synthetic\"><p>其他要比较的值 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(boolean)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 如果 <code>value</code> 小于等于 <code>other</code> 返回 <code>true</code>，否则返回 <code>false</code></p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >lte</span><span class=\"token punctuation\" >(</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => true</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >lte</span><span class=\"token punctuation\" >(</span><span class=\"token number\" >3</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => true</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >lte</span><span class=\"token punctuation\" >(</span><span class=\"token number\" >3</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => false</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/toArray",
  "html":"<div data-render-page=\"entry\"><h2>toArray <a class=\"fa-link\" href=\"./toArray\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L10465\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.toarray\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.toArray(value)</div>\n\n<div data-render-html=\"/toArray\"><p>转换 <code>value</code> 为数组</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">value</span> <span class=\"param-type\">(*)</span> <div data-render-html=\"/#synthetic\"><p>要转换的值 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Array)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 然后转换后的数组</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >toArray</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> <span class=\"token string\" >'a'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'b'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => [1, 2]</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >toArray</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'abc'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => ['a', 'b', 'c']</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >toArray</span><span class=\"token punctuation\" >(</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => []</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >toArray</span><span class=\"token punctuation\" >(</span><span class=\"token keyword\" >null</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => []</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/toInteger",
  "html":"<div data-render-page=\"entry\"><h2>toInteger <a class=\"fa-link\" href=\"./toInteger\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L10505\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.tointeger\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.toInteger(value)</div>\n\n<div data-render-html=\"/toInteger\"><p>转换 <code>value</code> 为整数\n<br>\n<br>\n<strong>注意:</strong> 这个函数参考 <a href=\"http://www.ecma-international.org/ecma-262/6.0/#sec-tointeger\" target=\"_blank\"><code>ToInteger</code></a>.</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">value</span> <span class=\"param-type\">(*)</span> <div data-render-html=\"/#synthetic\"><p>要转换的值 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(number)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回转换后的整数</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >toInteger</span><span class=\"token punctuation\" >(</span><span class=\"token number\" >3</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 3</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >toInteger</span><span class=\"token punctuation\" >(</span>Number<span class=\"token punctuation\" >.</span>MIN_VALUE<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 0</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >toInteger</span><span class=\"token punctuation\" >(</span><span class=\"token number\" >Infinity</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 1.7976931348623157e+308</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >toInteger</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'3'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 3</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/toLength",
  "html":"<div data-render-page=\"entry\"><h2>toLength <a class=\"fa-link\" href=\"./toLength\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L10542\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.tolength\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.toLength(value)</div>\n\n<div data-render-html=\"/toLength\"><p>转换 <code>value</code> 为用作类数组对象的长度整数。\n<br>\n<br>\n<strong>注意:</strong> 这个方法基于 <a href=\"http://ecma-international.org/ecma-262/6.0/#sec-tolength\" target=\"_blank\"><code>ToLength</code></a>.</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">value</span> <span class=\"param-type\">(*)</span> <div data-render-html=\"/#synthetic\"><p>要转换的值 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(number)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回转换后的整数</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >toLength</span><span class=\"token punctuation\" >(</span><span class=\"token number\" >3</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 3</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >toLength</span><span class=\"token punctuation\" >(</span>Number<span class=\"token punctuation\" >.</span>MIN_VALUE<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 0</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >toLength</span><span class=\"token punctuation\" >(</span><span class=\"token number\" >Infinity</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 4294967295</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >toLength</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'3'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 3</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/toNumber",
  "html":"<div data-render-page=\"entry\"><h2>toNumber <a class=\"fa-link\" href=\"./toNumber\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L10568\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.tonumber\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.toNumber(value)</div>\n\n<div data-render-html=\"/toNumber\"><p>转换 <code>value</code> 为数值</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">value</span> <span class=\"param-type\">(*)</span> <div data-render-html=\"/#synthetic\"><p>要处理的值 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(number)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回数值</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >toNumber</span><span class=\"token punctuation\" >(</span><span class=\"token number\" >3</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 3</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >toNumber</span><span class=\"token punctuation\" >(</span>Number<span class=\"token punctuation\" >.</span>MIN_VALUE<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 5e-324</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >toNumber</span><span class=\"token punctuation\" >(</span><span class=\"token number\" >Infinity</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => Infinity</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >toNumber</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'3'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 3</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/toPlainObject",
  "html":"<div data-render-page=\"entry\"><h2>toPlainObject <a class=\"fa-link\" href=\"./toPlainObject\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L10606\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.toplainobject\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.toPlainObject(value)</div>\n\n<div data-render-html=\"/toPlainObject\"><p>转换 <code>value</code> 为普通对象。\n包括继承的可枚举属性。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">value</span> <span class=\"param-type\">(*)</span> <div data-render-html=\"/#synthetic\"><p>要转换的值 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Object)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回转换后的普通对象</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token keyword\" >function</span> <span class=\"token function\" >Foo</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span>\n  <span class=\"token keyword\" >this</span><span class=\"token punctuation\" >.</span>b <span class=\"token operator\" >=</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >;</span>\n<span class=\"token punctuation\" >}</span>\n\nFoo<span class=\"token punctuation\" >.</span>prototype<span class=\"token punctuation\" >.</span>c <span class=\"token operator\" >=</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >;</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >assign</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> <span class=\"token string\" >'a'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span> <span class=\"token keyword\" >new</span> <span class=\"token class-name\" >Foo</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => { 'a': 1, 'b': 2 }</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >assign</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> <span class=\"token string\" >'a'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span> _<span class=\"token punctuation\" >.</span><span class=\"token function\" >toPlainObject</span><span class=\"token punctuation\" >(</span><span class=\"token keyword\" >new</span> <span class=\"token class-name\" >Foo</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => { 'a': 1, 'b': 2, 'c': 3 }</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/toSafeInteger",
  "html":"<div data-render-page=\"entry\"><h2>toSafeInteger <a class=\"fa-link\" href=\"./toSafeInteger\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L10633\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.tosafeinteger\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.toSafeInteger(value)</div>\n\n<div data-render-html=\"/toSafeInteger\"><p>转换 <code>value</code> 为安全整数。\n安全整数可以用于比较和准确的表示。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">value</span> <span class=\"param-type\">(*)</span> <div data-render-html=\"/#synthetic\"><p>要转换的值 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(number)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回转换后的整数</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >toSafeInteger</span><span class=\"token punctuation\" >(</span><span class=\"token number\" >3</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 3</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >toSafeInteger</span><span class=\"token punctuation\" >(</span>Number<span class=\"token punctuation\" >.</span>MIN_VALUE<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 0</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >toSafeInteger</span><span class=\"token punctuation\" >(</span><span class=\"token number\" >Infinity</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 9007199254740991</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >toSafeInteger</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'3'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 3</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/toString",
  "html":"<div data-render-page=\"entry\"><h2>toString <a class=\"fa-link\" href=\"./toString\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L10657\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.tostring\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.toString(value)</div>\n\n<div data-render-html=\"/toString\"><p>如果 <code>value</code> 不是字符串，将其转换为字符串。\n<code>null</code> 和 <code>undefined</code> 将返回空字符串。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">value</span> <span class=\"param-type\">(*)</span> <div data-render-html=\"/#synthetic\"><p>要转换的值 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(string)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回字符串</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >toString</span><span class=\"token punctuation\" >(</span><span class=\"token keyword\" >null</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => ''</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >toString</span><span class=\"token punctuation\" >(</span><span class=\"token operator\" >-</span><span class=\"token number\" >0</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => '-0'</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >toString</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => '1,2,3'</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/add",
  "html":"<div data-render-page=\"entry\"><h2>add <a class=\"fa-link\" href=\"./add\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L13849\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.add\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.add(augend, addend)</div>\n\n<div data-render-html=\"/add\"><p>相加两个数</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">augend</span> <span class=\"param-type\">(number)</span> <div data-render-html=\"/#synthetic\"><p>相加的第一个数 </p>\n</div></li>\n<li><span class=\"param-name\">addend</span> <span class=\"param-type\">(number)</span> <div data-render-html=\"/#synthetic\"><p>相加的第二个数 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(number)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回总和</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >add</span><span class=\"token punctuation\" >(</span><span class=\"token number\" >6</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >4</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 10</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/ceil",
  "html":"<div data-render-page=\"entry\"><h2>ceil <a class=\"fa-link\" href=\"./ceil\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L13883\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.ceil\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.ceil(number, [precision&#x3D;0])</div>\n\n<div data-render-html=\"/ceil\"><p>根据 <code>precision</code> 向上舍入 <code>number</code>。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">number</span> <span class=\"param-type\">(number)</span> <div data-render-html=\"/#synthetic\"><p>要向上舍入的值 </p>\n</div></li>\n<li><span class=\"param-name\">[precision&#x3D;0]</span> <span class=\"param-type\">(number)</span> <div data-render-html=\"/#synthetic\"><p>精度 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(number)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p>返回向上舍入的结果</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >ceil</span><span class=\"token punctuation\" >(</span><span class=\"token number\" >4.006</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 5</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >ceil</span><span class=\"token punctuation\" >(</span><span class=\"token number\" >6.004</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 6.01</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >ceil</span><span class=\"token punctuation\" >(</span><span class=\"token number\" >6040</span><span class=\"token punctuation\" >,</span> <span class=\"token operator\" >-</span><span class=\"token number\" >2</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 6100</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/floor",
  "html":"<div data-render-page=\"entry\"><h2>floor <a class=\"fa-link\" href=\"./floor\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L13905\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.floor\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.floor(number, [precision&#x3D;0])</div>\n\n<div data-render-html=\"/floor\"><p>根据 <code>precision</code> 向下保留 <code>number</code>。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">number</span> <span class=\"param-type\">(number)</span> <div data-render-html=\"/#synthetic\"><p>要向下保留的数 </p>\n</div></li>\n<li><span class=\"param-name\">[precision&#x3D;0]</span> <span class=\"param-type\">(number)</span> <div data-render-html=\"/#synthetic\"><p>精度 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(number)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回向下保留的结果</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >floor</span><span class=\"token punctuation\" >(</span><span class=\"token number\" >4.006</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 4</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >floor</span><span class=\"token punctuation\" >(</span><span class=\"token number\" >0.046</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 0.04</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >floor</span><span class=\"token punctuation\" >(</span><span class=\"token number\" >4060</span><span class=\"token punctuation\" >,</span> <span class=\"token operator\" >-</span><span class=\"token number\" >2</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 4000</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/max",
  "html":"<div data-render-page=\"entry\"><h2>max <a class=\"fa-link\" href=\"./max\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L13924\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.max\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.max(array)</div>\n\n<div data-render-html=\"/max\"><p>计算 <code>array</code> 中最大的值。\n如果 <code>array</code> 是 空的或者假值将会返回 undefined。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">array</span> <span class=\"param-type\">(Array)</span> <div data-render-html=\"/#synthetic\"><p>要计算的数组 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(*)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回最大的值</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >max</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token number\" >4</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >8</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >6</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 8</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >max</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => undefined</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/maxBy",
  "html":"<div data-render-page=\"entry\"><h2>maxBy <a class=\"fa-link\" href=\"./maxBy\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L13952\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.maxby\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.maxBy(array, [iteratee&#x3D;_.identity])</div>\n\n<div data-render-html=\"/maxBy\"><p>这个方法类似 <code>_.max</code>\n除了它接受 <code>iteratee</code> 调用每一个元素，根据返回的 value 决定排序准则。\niteratee 会传入1个参数：(value)。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">array</span> <span class=\"param-type\">(Array)</span> <div data-render-html=\"/#synthetic\"><p>要遍历的数组 </p>\n</div></li>\n<li><span class=\"param-name\">[iteratee&#x3D;_.identity]</span> <span class=\"param-type\">(Function|Object|string)</span> <div data-render-html=\"/#synthetic\"><p>这个函数会处理每一个元素 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(*)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回最大值</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token keyword\" >var</span> objects <span class=\"token operator\" >=</span> <span class=\"token punctuation\" >[</span><span class=\"token punctuation\" >{</span> <span class=\"token string\" >'n'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'n'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >;</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >maxBy</span><span class=\"token punctuation\" >(</span>objects<span class=\"token punctuation\" >,</span> <span class=\"token keyword\" >function</span><span class=\"token punctuation\" >(</span>o<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span> <span class=\"token keyword\" >return</span> o<span class=\"token punctuation\" >.</span>n<span class=\"token punctuation\" >;</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => { 'n': 2 }</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 使用了 `_.property` iteratee 的回调结果</span>\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >maxBy</span><span class=\"token punctuation\" >(</span>objects<span class=\"token punctuation\" >,</span> <span class=\"token string\" >'n'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => { 'n': 2 }</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/mean",
  "html":"<div data-render-page=\"entry\"><h2>mean <a class=\"fa-link\" href=\"./mean\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L13971\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.mean\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.mean(array)</div>\n\n<div data-render-html=\"/mean\"><p>计算 <code>array</code> 的平均值。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">array</span> <span class=\"param-type\">(Array)</span> <div data-render-html=\"/#synthetic\"><p>要遍历的数组 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(number)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回平均值</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >mean</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token number\" >4</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >8</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >6</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 5</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/min",
  "html":"<div data-render-page=\"entry\"><h2>min <a class=\"fa-link\" href=\"./min\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L13991\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.min\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.min(array)</div>\n\n<div data-render-html=\"/min\"><p>计算 array 中最小的值。 如果 array 是 空的或者假值将会返回 undefined。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">array</span> <span class=\"param-type\">(Array)</span> <div data-render-html=\"/#synthetic\"><p>要计算的数组 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(*)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回最小值</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >min</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token number\" >4</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >8</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >6</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 2</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >min</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => undefined</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/minBy",
  "html":"<div data-render-page=\"entry\"><h2>minBy <a class=\"fa-link\" href=\"./minBy\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L14018\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.minby\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.minBy(array, [iteratee&#x3D;_.identity])</div>\n\n<div data-render-html=\"/minBy\"><p>这个方法类似 <code>_.min</code>。\n除了它接受 iteratee 调用每一个元素，根据返回的 value 决定排序准则。 iteratee 会传入1个参数：(value)。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">array</span> <span class=\"param-type\">(Array)</span> <div data-render-html=\"/#synthetic\"><p>要遍历的数组 </p>\n</div></li>\n<li><span class=\"param-name\">[iteratee&#x3D;_.identity]</span> <span class=\"param-type\">(Function|Object|string)</span> <div data-render-html=\"/#synthetic\"><p>这个函数会处理每一个元素 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(*)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回最小值</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token keyword\" >var</span> objects <span class=\"token operator\" >=</span> <span class=\"token punctuation\" >[</span><span class=\"token punctuation\" >{</span> <span class=\"token string\" >'n'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'n'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >;</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >minBy</span><span class=\"token punctuation\" >(</span>objects<span class=\"token punctuation\" >,</span> <span class=\"token keyword\" >function</span><span class=\"token punctuation\" >(</span>o<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span> <span class=\"token keyword\" >return</span> o<span class=\"token punctuation\" >.</span>n<span class=\"token punctuation\" >;</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => { 'n': 1 }</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 使用了 `_.property` iteratee 的回调结果</span>\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >minBy</span><span class=\"token punctuation\" >(</span>objects<span class=\"token punctuation\" >,</span> <span class=\"token string\" >'n'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => { 'n': 1 }</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/round",
  "html":"<div data-render-page=\"entry\"><h2>round <a class=\"fa-link\" href=\"./round\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L14044\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.round\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.round(number, [precision&#x3D;0])</div>\n\n<div data-render-html=\"/round\"><p>根据 precision 四舍五入 number。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">number</span> <span class=\"param-type\">(number)</span> <div data-render-html=\"/#synthetic\"><p>要四舍五入的值 </p>\n</div></li>\n<li><span class=\"param-name\">[precision&#x3D;0]</span> <span class=\"param-type\">(number)</span> <div data-render-html=\"/#synthetic\"><p>精度 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(number)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p>返回四舍五入的结果</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >round</span><span class=\"token punctuation\" >(</span><span class=\"token number\" >4.006</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 4</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >round</span><span class=\"token punctuation\" >(</span><span class=\"token number\" >4.006</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 4.01</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >round</span><span class=\"token punctuation\" >(</span><span class=\"token number\" >4060</span><span class=\"token punctuation\" >,</span> <span class=\"token operator\" >-</span><span class=\"token number\" >2</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 4100</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/subtract",
  "html":"<div data-render-page=\"entry\"><h2>subtract <a class=\"fa-link\" href=\"./subtract\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L14060\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.subtract\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.subtract(minuend, subtrahend)</div>\n\n<div data-render-html=\"/subtract\"><p>两双相减</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">minuend</span> <span class=\"param-type\">(number)</span> <div data-render-html=\"/#synthetic\"><p>相减的第一个数 </p>\n</div></li>\n<li><span class=\"param-name\">subtrahend</span> <span class=\"param-type\">(number)</span> <div data-render-html=\"/#synthetic\"><p>相减的第二个数 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(number)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p>返回结果</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >subtract</span><span class=\"token punctuation\" >(</span><span class=\"token number\" >6</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >4</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 2</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/sum",
  "html":"<div data-render-page=\"entry\"><h2>sum <a class=\"fa-link\" href=\"./sum\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L14087\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.sum\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.sum(array)</div>\n\n<div data-render-html=\"/sum\"><p>计算 <code>array</code> 中值的总和</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">array</span> <span class=\"param-type\">(Array)</span> <div data-render-html=\"/#synthetic\"><p>要遍历的数组 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(number)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回总和</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >sum</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token number\" >4</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >8</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >6</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 20</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/sumBy",
  "html":"<div data-render-page=\"entry\"><h2>sumBy <a class=\"fa-link\" href=\"./sumBy\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L14115\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.sumby\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.sumBy(array, [iteratee&#x3D;_.identity])</div>\n\n<div data-render-html=\"/sumBy\"><p>这个方法类似 <code>_.sum</code>。\n除了它接受 iteratee 调用每一个元素，根据返回的 value 决定如何计算。\niteratee 会传入1个参数：(value)。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">array</span> <span class=\"param-type\">(Array)</span> <div data-render-html=\"/#synthetic\"><p>要遍历的数组 </p>\n</div></li>\n<li><span class=\"param-name\">[iteratee&#x3D;_.identity]</span> <span class=\"param-type\">(Function|Object|string)</span> <div data-render-html=\"/#synthetic\"><p>这个函数会处理每一个元素 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(number)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回总和</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token keyword\" >var</span> objects <span class=\"token operator\" >=</span> <span class=\"token punctuation\" >[</span><span class=\"token punctuation\" >{</span> <span class=\"token string\" >'n'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >4</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'n'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'n'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >8</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'n'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >6</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >;</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >sumBy</span><span class=\"token punctuation\" >(</span>objects<span class=\"token punctuation\" >,</span> <span class=\"token keyword\" >function</span><span class=\"token punctuation\" >(</span>o<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span> <span class=\"token keyword\" >return</span> o<span class=\"token punctuation\" >.</span>n<span class=\"token punctuation\" >;</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 20</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 使用了 `_.property` 的回调结果</span>\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >sumBy</span><span class=\"token punctuation\" >(</span>objects<span class=\"token punctuation\" >,</span> <span class=\"token string\" >'n'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 20</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/templateSettings-imports-_",
  "html":"<div data-render-page=\"entry\"><h2>templateSettings.imports._ <a class=\"fa-link\" href=\"./templateSettings-imports-_\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L1586\" title=\"View in source.\" target=\"github\">source</a> </h2>\n<div class=\"signature\">_.templateSettings.imports._</div>\n\n<div data-render-html=\"/templateSettings-imports-_\"><p><code>lodash</code> 函数的引用</p>\n</div>\n\n</div>" }
,{ "href":"/clamp",
  "html":"<div data-render-page=\"entry\"><h2>clamp <a class=\"fa-link\" href=\"./clamp\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L11907\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.clamp\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.clamp(number, [min], max)</div>\n\n<div data-render-html=\"/clamp\"><p>返回限制在 <code>min</code> 和 <code>max</code> 之间的值</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">number</span> <span class=\"param-type\">(number)</span> <div data-render-html=\"/#synthetic\"><p>被限制的值 </p>\n</div></li>\n<li><span class=\"param-name\">[min]</span> <span class=\"param-type\">(number)</span> <div data-render-html=\"/#synthetic\"><p>最小绝对值 </p>\n</div></li>\n<li><span class=\"param-name\">max</span> <span class=\"param-type\">(number)</span> <div data-render-html=\"/#synthetic\"><p>最大绝对值 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(number)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> [min, max] 中的一个</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >clamp</span><span class=\"token punctuation\" >(</span><span class=\"token operator\" >-</span><span class=\"token number\" >10</span><span class=\"token punctuation\" >,</span> <span class=\"token operator\" >-</span><span class=\"token number\" >5</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >5</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => -5</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >clamp</span><span class=\"token punctuation\" >(</span><span class=\"token number\" >10</span><span class=\"token punctuation\" >,</span> <span class=\"token operator\" >-</span><span class=\"token number\" >5</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >5</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 5</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/inRange",
  "html":"<div data-render-page=\"entry\"><h2>inRange <a class=\"fa-link\" href=\"./inRange\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L11958\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.inrange\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.inRange(number, [start&#x3D;0], end)</div>\n\n<div data-render-html=\"/inRange\"><p>检查 <code>n</code> 是否在 <code>start</code> 与 <code>end</code> 之间，但不包括 <code>end</code>。\n如果 <code>end</code> 没有指定，那么 <code>start</code> 设置为0。\n如果 <code>start</code> 大于 <code>end</code>，那么参数会交换以便支持负范围。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">number</span> <span class=\"param-type\">(number)</span> <div data-render-html=\"/#synthetic\"><p>要检查的值 </p>\n</div></li>\n<li><span class=\"param-name\">[start&#x3D;0]</span> <span class=\"param-type\">(number)</span> <div data-render-html=\"/#synthetic\"><p>开始范围 </p>\n</div></li>\n<li><span class=\"param-name\">end</span> <span class=\"param-type\">(number)</span> <div data-render-html=\"/#synthetic\"><p>结束范围 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(boolean)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 如果值在范围内返回<code>true</code>，否则返回 <code>false</code></p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >inRange</span><span class=\"token punctuation\" >(</span><span class=\"token number\" >3</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >4</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => true</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >inRange</span><span class=\"token punctuation\" >(</span><span class=\"token number\" >4</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >8</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => true</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >inRange</span><span class=\"token punctuation\" >(</span><span class=\"token number\" >4</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => false</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >inRange</span><span class=\"token punctuation\" >(</span><span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => false</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >inRange</span><span class=\"token punctuation\" >(</span><span class=\"token number\" >1.2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => true</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >inRange</span><span class=\"token punctuation\" >(</span><span class=\"token number\" >5.2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >4</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => false</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >inRange</span><span class=\"token punctuation\" >(</span><span class=\"token operator\" >-</span><span class=\"token number\" >3</span><span class=\"token punctuation\" >,</span> <span class=\"token operator\" >-</span><span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token operator\" >-</span><span class=\"token number\" >6</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => true</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/random",
  "html":"<div data-render-page=\"entry\"><h2>random <a class=\"fa-link\" href=\"./random\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L11998\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.random\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.random([min&#x3D;0], [max&#x3D;1], [floating])</div>\n\n<div data-render-html=\"/random\"><p>产生一个包括  <code>min</code> 与 <code>max</code> 之间的数。\n如果只提供一个参数返回一个0到提供数之间的数。\n如果 <code>floating</code> 设为 true，或者 <code>min</code> 或 <code>max</code> 是浮点数，结果返回浮点数。\n<br>\n<br>\n<strong>注意:</strong> JavaScript 遵循 IEEE-754 标准处理无法预料的浮点数结果。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">[min&#x3D;0]</span> <span class=\"param-type\">(number)</span> <div data-render-html=\"/#synthetic\"><p>最小值 </p>\n</div></li>\n<li><span class=\"param-name\">[max&#x3D;1]</span> <span class=\"param-type\">(number)</span> <div data-render-html=\"/#synthetic\"><p>最大值 </p>\n</div></li>\n<li><span class=\"param-name\">[floating]</span> <span class=\"param-type\">(boolean)</span> <div data-render-html=\"/#synthetic\"><p>是否返回浮点数 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(number)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回随机数</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >random</span><span class=\"token punctuation\" >(</span><span class=\"token number\" >0</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >5</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// =>  0 和 5 之间的数</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >random</span><span class=\"token punctuation\" >(</span><span class=\"token number\" >5</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 同样是 0 和 5 之间的数</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >random</span><span class=\"token punctuation\" >(</span><span class=\"token number\" >5</span><span class=\"token punctuation\" >,</span> <span class=\"token keyword\" >true</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 0 和 5 之间的浮点数</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >random</span><span class=\"token punctuation\" >(</span><span class=\"token number\" >1.2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >5.2</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// =>  1.2 和 5.2 之间的浮点数</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/assign",
  "html":"<div data-render-page=\"entry\"><h2>assign <a class=\"fa-link\" href=\"./assign\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L10703\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.assign\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.assign(object, [sources])</div>\n\n<div data-render-html=\"/assign\"><p>分配来源对象的可枚举属性到目标对象上。\n来源对象的应用规则是从左到右，随后的下一个对象的属性会覆盖上一个对象的属性。\n<br>\n<br>\n<strong>注意:</strong> 这方法会改变源对象，参考自\n<a href=\"https://mdn.io/Object/assign\" target=\"_blank\"><code>Object.assign</code></a>.</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">object</span> <span class=\"param-type\">(Object)</span> <div data-render-html=\"/#synthetic\"><p>目标对象 </p>\n</div></li>\n<li><span class=\"param-name\">[sources]</span> <span class=\"param-type\">(...Object)</span> <div data-render-html=\"/#synthetic\"><p>来源对象 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Object)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回对象</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token keyword\" >function</span> <span class=\"token function\" >Foo</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span>\n  <span class=\"token keyword\" >this</span><span class=\"token punctuation\" >.</span>c <span class=\"token operator\" >=</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >;</span>\n<span class=\"token punctuation\" >}</span>\n\n<span class=\"token keyword\" >function</span> <span class=\"token function\" >Bar</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span>\n  <span class=\"token keyword\" >this</span><span class=\"token punctuation\" >.</span>e <span class=\"token operator\" >=</span> <span class=\"token number\" >5</span><span class=\"token punctuation\" >;</span>\n<span class=\"token punctuation\" >}</span>\n\nFoo<span class=\"token punctuation\" >.</span>prototype<span class=\"token punctuation\" >.</span>d <span class=\"token operator\" >=</span> <span class=\"token number\" >4</span><span class=\"token punctuation\" >;</span>\nBar<span class=\"token punctuation\" >.</span>prototype<span class=\"token punctuation\" >.</span>f <span class=\"token operator\" >=</span> <span class=\"token number\" >6</span><span class=\"token punctuation\" >;</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >assign</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> <span class=\"token string\" >'a'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span> <span class=\"token keyword\" >new</span> <span class=\"token class-name\" >Foo</span><span class=\"token punctuation\" >,</span> <span class=\"token keyword\" >new</span> <span class=\"token class-name\" >Bar</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => { 'a': 1, 'c': 3, 'e': 5 }</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/assignIn",
  "html":"<div data-render-page=\"entry\"><h2>assignIn <span class=\"aliases\">extend</span> <a class=\"fa-link\" href=\"./assignIn\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L10736\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.assignin\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.assignIn(object, [sources])</div>\n\n<div data-render-html=\"/assignIn\"><p>这个方法类似 <code>_.assign</code>。\n除了它会遍历并继承来源对象的属性。\n<br>\n<br>\n<strong>注意:</strong> 这方法会改变源对象</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">object</span> <span class=\"param-type\">(Object)</span> <div data-render-html=\"/#synthetic\"><p>目标对象 </p>\n</div></li>\n<li><span class=\"param-name\">[sources]</span> <span class=\"param-type\">(...Object)</span> <div data-render-html=\"/#synthetic\"><p>来源对象 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Object)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回对象</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token keyword\" >function</span> <span class=\"token function\" >Foo</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span>\n  <span class=\"token keyword\" >this</span><span class=\"token punctuation\" >.</span>b <span class=\"token operator\" >=</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >;</span>\n<span class=\"token punctuation\" >}</span>\n\n<span class=\"token keyword\" >function</span> <span class=\"token function\" >Bar</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span>\n  <span class=\"token keyword\" >this</span><span class=\"token punctuation\" >.</span>d <span class=\"token operator\" >=</span> <span class=\"token number\" >4</span><span class=\"token punctuation\" >;</span>\n<span class=\"token punctuation\" >}</span>\n\nFoo<span class=\"token punctuation\" >.</span>prototype<span class=\"token punctuation\" >.</span>c <span class=\"token operator\" >=</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >;</span>\nBar<span class=\"token punctuation\" >.</span>prototype<span class=\"token punctuation\" >.</span>e <span class=\"token operator\" >=</span> <span class=\"token number\" >5</span><span class=\"token punctuation\" >;</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >assignIn</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> <span class=\"token string\" >'a'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span> <span class=\"token keyword\" >new</span> <span class=\"token class-name\" >Foo</span><span class=\"token punctuation\" >,</span> <span class=\"token keyword\" >new</span> <span class=\"token class-name\" >Bar</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => { 'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5 }</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/assignInWith",
  "html":"<div data-render-page=\"entry\"><h2>assignInWith <span class=\"aliases\">extendWith</span> <a class=\"fa-link\" href=\"./assignInWith\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L10767\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.assigninwith\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.assignInWith(object, sources, [customizer])</div>\n\n<div data-render-html=\"/assignInWith\"><p>这个方法类似 <code>_.assignIn</code>。\n除了它接受一个 customizer<code>决定如何分配值。\n如果</code>customizer<code>返回</code>undefined<code>将会由分配处理方法代替。</code>customizer` 会传入5个参数：(objValue, srcValue, key, object, source)。\n<br>\n<br>\n<strong>注意:</strong> 这方法会改变源对象</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">object</span> <span class=\"param-type\">(Object)</span> <div data-render-html=\"/#synthetic\"><p>目标对象 </p>\n</div></li>\n<li><span class=\"param-name\">sources</span> <span class=\"param-type\">(...Object)</span> <div data-render-html=\"/#synthetic\"><p>来源对象 </p>\n</div></li>\n<li><span class=\"param-name\">[customizer]</span> <span class=\"param-type\">(Function)</span> <div data-render-html=\"/#synthetic\"><p>这个函数决定分配的值 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Object)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回对象</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token keyword\" >function</span> <span class=\"token function\" >customizer</span><span class=\"token punctuation\" >(</span>objValue<span class=\"token punctuation\" >,</span> srcValue<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span>\n  <span class=\"token keyword\" >return</span> _<span class=\"token punctuation\" >.</span><span class=\"token function\" >isUndefined</span><span class=\"token punctuation\" >(</span>objValue<span class=\"token punctuation\" >)</span> <span class=\"token operator\" >?</span> srcValue <span class=\"token punctuation\" >:</span> objValue<span class=\"token punctuation\" >;</span>\n<span class=\"token punctuation\" >}</span>\n\n<span class=\"token keyword\" >var</span> defaults <span class=\"token operator\" >=</span> _<span class=\"token punctuation\" >.</span><span class=\"token function\" >partialRight</span><span class=\"token punctuation\" >(</span>_<span class=\"token punctuation\" >.</span>assignInWith<span class=\"token punctuation\" >,</span> customizer<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n\n<span class=\"token function\" >defaults</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> <span class=\"token string\" >'a'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'b'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'a'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >3</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => { 'a': 1, 'b': 2 }</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/assignWith",
  "html":"<div data-render-page=\"entry\"><h2>assignWith <a class=\"fa-link\" href=\"./assignWith\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L10797\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.assignwith\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.assignWith(object, sources, [customizer])</div>\n\n<div data-render-html=\"/assignWith\"><p>这个方法类似 <code>_.assign</code>。\n除了它接受一个 customizer<code>决定如何分配值。\n如果</code>customizer<code>返回</code>undefined<code>将会由分配处理方法代替。</code>customizer` 会传入5个参数：(objValue, srcValue, key, object, source)。\n<br>\n<br>\n<strong>注意:</strong> 这方法会改变源对象</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">object</span> <span class=\"param-type\">(Object)</span> <div data-render-html=\"/#synthetic\"><p>目标对象 </p>\n</div></li>\n<li><span class=\"param-name\">sources</span> <span class=\"param-type\">(...Object)</span> <div data-render-html=\"/#synthetic\"><p>来源对象 </p>\n</div></li>\n<li><span class=\"param-name\">[customizer]</span> <span class=\"param-type\">(Function)</span> <div data-render-html=\"/#synthetic\"><p>这个函数决定分配的值 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Object)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回对象</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token keyword\" >function</span> <span class=\"token function\" >customizer</span><span class=\"token punctuation\" >(</span>objValue<span class=\"token punctuation\" >,</span> srcValue<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span>\n  <span class=\"token keyword\" >return</span> _<span class=\"token punctuation\" >.</span><span class=\"token function\" >isUndefined</span><span class=\"token punctuation\" >(</span>objValue<span class=\"token punctuation\" >)</span> <span class=\"token operator\" >?</span> srcValue <span class=\"token punctuation\" >:</span> objValue<span class=\"token punctuation\" >;</span>\n<span class=\"token punctuation\" >}</span>\n\n<span class=\"token keyword\" >var</span> defaults <span class=\"token operator\" >=</span> _<span class=\"token punctuation\" >.</span><span class=\"token function\" >partialRight</span><span class=\"token punctuation\" >(</span>_<span class=\"token punctuation\" >.</span>assignWith<span class=\"token punctuation\" >,</span> customizer<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n\n<span class=\"token function\" >defaults</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> <span class=\"token string\" >'a'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'b'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'a'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >3</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => { 'a': 1, 'b': 2 }</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/at",
  "html":"<div data-render-page=\"entry\"><h2>at <a class=\"fa-link\" href=\"./at\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L10820\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.at\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.at(object, [paths])</div>\n\n<div data-render-html=\"/at\"><p>根据 <code>object</code> 的路径获取值为数组。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">object</span> <span class=\"param-type\">(Object)</span> <div data-render-html=\"/#synthetic\"><p>要遍历的对象 </p>\n</div></li>\n<li><span class=\"param-name\">[paths]</span> <span class=\"param-type\">(...(string|string[])</span> <div data-render-html=\"/#synthetic\"><p>要获取的对象的元素路径，单独指定或者指定在数组中 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Array)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回选中值的数组</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token keyword\" >var</span> object <span class=\"token operator\" >=</span> <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'a'</span><span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >[</span><span class=\"token punctuation\" >{</span> <span class=\"token string\" >'b'</span><span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'c'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >3</span> <span class=\"token punctuation\" >}</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >4</span><span class=\"token punctuation\" >]</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >;</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >at</span><span class=\"token punctuation\" >(</span>object<span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >[</span><span class=\"token string\" >'a[0].b.c'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'a[1]'</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => [3, 4]</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >at</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token string\" >'a'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'b'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'c'</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => ['a', 'c']</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/create",
  "html":"<div data-render-page=\"entry\"><h2>create <a class=\"fa-link\" href=\"./create\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L10856\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.create\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.create(prototype, [properties])</div>\n\n<div data-render-html=\"/create\"><p>创建一个继承 <code>prototype</code> 的对象。\n如果提供了 <code>properties</code>，它的可枚举属性会被分配到创建的对象上。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">prototype</span> <span class=\"param-type\">(Object)</span> <div data-render-html=\"/#synthetic\"><p>要继承的对象 </p>\n</div></li>\n<li><span class=\"param-name\">[properties]</span> <span class=\"param-type\">(Object)</span> <div data-render-html=\"/#synthetic\"><p>待分配的属性 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Object)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回新对象</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token keyword\" >function</span> <span class=\"token function\" >Shape</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span>\n  <span class=\"token keyword\" >this</span><span class=\"token punctuation\" >.</span>x <span class=\"token operator\" >=</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >;</span>\n  <span class=\"token keyword\" >this</span><span class=\"token punctuation\" >.</span>y <span class=\"token operator\" >=</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >;</span>\n<span class=\"token punctuation\" >}</span>\n\n<span class=\"token keyword\" >function</span> <span class=\"token function\" >Circle</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span>\n  Shape<span class=\"token punctuation\" >.</span><span class=\"token function\" >call</span><span class=\"token punctuation\" >(</span><span class=\"token keyword\" >this</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token punctuation\" >}</span>\n\nCircle<span class=\"token punctuation\" >.</span>prototype <span class=\"token operator\" >=</span> _<span class=\"token punctuation\" >.</span><span class=\"token function\" >create</span><span class=\"token punctuation\" >(</span>Shape<span class=\"token punctuation\" >.</span>prototype<span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >{</span>\n  <span class=\"token string\" >'constructor'</span><span class=\"token punctuation\" >:</span> Circle\n<span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n\n<span class=\"token keyword\" >var</span> circle <span class=\"token operator\" >=</span> <span class=\"token keyword\" >new</span> <span class=\"token class-name\" >Circle</span><span class=\"token punctuation\" >;</span>\ncircle <span class=\"token keyword\" >instanceof</span> <span class=\"token class-name\" >Circle</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => true</span>\n\ncircle <span class=\"token keyword\" >instanceof</span> <span class=\"token class-name\" >Shape</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => true</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/defaults",
  "html":"<div data-render-page=\"entry\"><h2>defaults <a class=\"fa-link\" href=\"./defaults\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L10879\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.defaults\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.defaults(object, [sources])</div>\n\n<div data-render-html=\"/defaults\"><p>分配来源对象的可枚举属性到目标对象所有解析为 <code>undefined</code> 的属性上。\n来源对象从左到右应用。\n一旦设置了相同属性的值，后续的将被忽略掉。\n<br>\n<br>\n<strong>注意:</strong> 这方法会改变源对象</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">object</span> <span class=\"param-type\">(Object)</span> <div data-render-html=\"/#synthetic\"><p>目标对象 </p>\n</div></li>\n<li><span class=\"param-name\">[sources]</span> <span class=\"param-type\">(...Object)</span> <div data-render-html=\"/#synthetic\"><p>来源对象 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Object)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回对象</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >defaults</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> <span class=\"token string\" >'user'</span><span class=\"token punctuation\" >:</span> <span class=\"token string\" >'barney'</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'age'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >36</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'user'</span><span class=\"token punctuation\" >:</span> <span class=\"token string\" >'fred'</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => { 'user': 'barney', 'age': 36 }</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/defaultsDeep",
  "html":"<div data-render-page=\"entry\"><h2>defaultsDeep <a class=\"fa-link\" href=\"./defaultsDeep\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L10901\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.defaultsdeep\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.defaultsDeep(object, [sources])</div>\n\n<div data-render-html=\"/defaultsDeep\"><p>这个方法类似 <code>_.defaults</code>，除了它会递归分配默认属性。\n<br>\n<br>\n<strong>注意:</strong> 这方法会改变源对象</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">object</span> <span class=\"param-type\">(Object)</span> <div data-render-html=\"/#synthetic\"><p>目标对象 </p>\n</div></li>\n<li><span class=\"param-name\">[sources]</span> <span class=\"param-type\">(...Object)</span> <div data-render-html=\"/#synthetic\"><p>来源对象 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Object)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回对象</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >defaultsDeep</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> <span class=\"token string\" >'user'</span><span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'name'</span><span class=\"token punctuation\" >:</span> <span class=\"token string\" >'barney'</span> <span class=\"token punctuation\" >}</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'user'</span><span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'name'</span><span class=\"token punctuation\" >:</span> <span class=\"token string\" >'fred'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'age'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >36</span> <span class=\"token punctuation\" >}</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => { 'user': { 'name': 'barney', 'age': 36 } }</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/findKey",
  "html":"<div data-render-page=\"entry\"><h2>findKey <a class=\"fa-link\" href=\"./findKey\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L10940\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.findkey\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.findKey(object, [predicate&#x3D;_.identity])</div>\n\n<div data-render-html=\"/findKey\"><p>这个方法类似 <code>_.find</code>。\n除了它返回最先被 <code>predicate</code> 判断为真值的元素 key，而不是元素本身。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">object</span> <span class=\"param-type\">(Object)</span> <div data-render-html=\"/#synthetic\"><p>需要检索的对象 </p>\n</div></li>\n<li><span class=\"param-name\">[predicate&#x3D;_.identity]</span> <span class=\"param-type\">(Function|Object|string)</span> <div data-render-html=\"/#synthetic\"><p>这个函数会处理每一个元素 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(string|undefined)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回匹配的 key，否则返回 <code>undefined</code>。</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token keyword\" >var</span> users <span class=\"token operator\" >=</span> <span class=\"token punctuation\" >{</span>\n  <span class=\"token string\" >'barney'</span><span class=\"token punctuation\" >:</span>  <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'age'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >36</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'active'</span><span class=\"token punctuation\" >:</span> <span class=\"token keyword\" >true</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token string\" >'fred'</span><span class=\"token punctuation\" >:</span>    <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'age'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >40</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'active'</span><span class=\"token punctuation\" >:</span> <span class=\"token keyword\" >false</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token string\" >'pebbles'</span><span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'age'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span>  <span class=\"token string\" >'active'</span><span class=\"token punctuation\" >:</span> <span class=\"token keyword\" >true</span> <span class=\"token punctuation\" >}</span>\n<span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >;</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >findKey</span><span class=\"token punctuation\" >(</span>users<span class=\"token punctuation\" >,</span> <span class=\"token keyword\" >function</span><span class=\"token punctuation\" >(</span>o<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span> <span class=\"token keyword\" >return</span> o<span class=\"token punctuation\" >.</span>age <span class=\"token operator\" >&lt;</span> <span class=\"token number\" >40</span><span class=\"token punctuation\" >;</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 'barney' (无法保证遍历的顺序)</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 使用了 `_.matches` 的回调结果</span>\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >findKey</span><span class=\"token punctuation\" >(</span>users<span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'age'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'active'</span><span class=\"token punctuation\" >:</span> <span class=\"token keyword\" >true</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 'pebbles'</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 使用了 `_.matchesProperty` 的回调结果</span>\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >findKey</span><span class=\"token punctuation\" >(</span>users<span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >[</span><span class=\"token string\" >'active'</span><span class=\"token punctuation\" >,</span> <span class=\"token keyword\" >false</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 'fred'</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 使用了 `_.property` 的回调结果</span>\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >findKey</span><span class=\"token punctuation\" >(</span>users<span class=\"token punctuation\" >,</span> <span class=\"token string\" >'active'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 'barney'</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/findLastKey",
  "html":"<div data-render-page=\"entry\"><h2>findLastKey <a class=\"fa-link\" href=\"./findLastKey\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L10977\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.findlastkey\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.findLastKey(object, [predicate&#x3D;_.identity])</div>\n\n<div data-render-html=\"/findLastKey\"><p>这个方法类似 <code>_.findKey</code>。\n不过它是反方向开始遍历的。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">object</span> <span class=\"param-type\">(Object)</span> <div data-render-html=\"/#synthetic\"><p>需要检索的对象 </p>\n</div></li>\n<li><span class=\"param-name\">[predicate&#x3D;_.identity]</span> <span class=\"param-type\">(Function|Object|string)</span> <div data-render-html=\"/#synthetic\"><p>这个函数会处理每一个元素 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(string|undefined)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回匹配的 key，否则返回 <code>undefined</code>。</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token keyword\" >var</span> users <span class=\"token operator\" >=</span> <span class=\"token punctuation\" >{</span>\n  <span class=\"token string\" >'barney'</span><span class=\"token punctuation\" >:</span>  <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'age'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >36</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'active'</span><span class=\"token punctuation\" >:</span> <span class=\"token keyword\" >true</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token string\" >'fred'</span><span class=\"token punctuation\" >:</span>    <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'age'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >40</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'active'</span><span class=\"token punctuation\" >:</span> <span class=\"token keyword\" >false</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token string\" >'pebbles'</span><span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'age'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span>  <span class=\"token string\" >'active'</span><span class=\"token punctuation\" >:</span> <span class=\"token keyword\" >true</span> <span class=\"token punctuation\" >}</span>\n<span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >;</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >findLastKey</span><span class=\"token punctuation\" >(</span>users<span class=\"token punctuation\" >,</span> <span class=\"token keyword\" >function</span><span class=\"token punctuation\" >(</span>o<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span> <span class=\"token keyword\" >return</span> o<span class=\"token punctuation\" >.</span>age <span class=\"token operator\" >&lt;</span> <span class=\"token number\" >40</span><span class=\"token punctuation\" >;</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 返回 'pebbles'， `_.findKey` 会返回 'barney'</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 使用了 `_.matches` 的回调结果</span>\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >findLastKey</span><span class=\"token punctuation\" >(</span>users<span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'age'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >36</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'active'</span><span class=\"token punctuation\" >:</span> <span class=\"token keyword\" >true</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 'barney'</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 使用了 `_.matchesProperty` 的回调结果</span>\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >findLastKey</span><span class=\"token punctuation\" >(</span>users<span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >[</span><span class=\"token string\" >'active'</span><span class=\"token punctuation\" >,</span> <span class=\"token keyword\" >false</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 'fred'</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 使用了 `_.property` 的回调结果</span>\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >findLastKey</span><span class=\"token punctuation\" >(</span>users<span class=\"token punctuation\" >,</span> <span class=\"token string\" >'active'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 'pebbles'</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/forIn",
  "html":"<div data-render-page=\"entry\"><h2>forIn <a class=\"fa-link\" href=\"./forIn\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L11006\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.forin\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.forIn(object, [iteratee&#x3D;_.identity])</div>\n\n<div data-render-html=\"/forIn\"><p>使用 <code>iteratee</code> 遍历对象的自身和继承的可枚举属性。\niteratee 会传入3个参数：(value, key, object)。\n如果返回 false，iteratee 会提前退出遍历。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">object</span> <span class=\"param-type\">(Object)</span> <div data-render-html=\"/#synthetic\"><p>要遍历的对象 </p>\n</div></li>\n<li><span class=\"param-name\">[iteratee&#x3D;_.identity]</span> <span class=\"param-type\">(Function)</span> <div data-render-html=\"/#synthetic\"><p>这个函数会处理每一个元素 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Object)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回对象</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token keyword\" >function</span> <span class=\"token function\" >Foo</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span>\n  <span class=\"token keyword\" >this</span><span class=\"token punctuation\" >.</span>a <span class=\"token operator\" >=</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >;</span>\n  <span class=\"token keyword\" >this</span><span class=\"token punctuation\" >.</span>b <span class=\"token operator\" >=</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >;</span>\n<span class=\"token punctuation\" >}</span>\n\nFoo<span class=\"token punctuation\" >.</span>prototype<span class=\"token punctuation\" >.</span>c <span class=\"token operator\" >=</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >;</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >forIn</span><span class=\"token punctuation\" >(</span><span class=\"token keyword\" >new</span> <span class=\"token class-name\" >Foo</span><span class=\"token punctuation\" >,</span> <span class=\"token keyword\" >function</span><span class=\"token punctuation\" >(</span>value<span class=\"token punctuation\" >,</span> key<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span>\n  console<span class=\"token punctuation\" >.</span><span class=\"token function\" >log</span><span class=\"token punctuation\" >(</span>key<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 输出 'a', 'b', 然后 'c' (无法保证遍历的顺序)</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/forInRight",
  "html":"<div data-render-page=\"entry\"><h2>forInRight <a class=\"fa-link\" href=\"./forInRight\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L11036\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.forinright\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.forInRight(object, [iteratee&#x3D;_.identity])</div>\n\n<div data-render-html=\"/forInRight\"><p>这个方法类似 <code>_.forIn</code>。\n除了它是反方向开始遍历的。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">object</span> <span class=\"param-type\">(Object)</span> <div data-render-html=\"/#synthetic\"><p>要遍历的对象 </p>\n</div></li>\n<li><span class=\"param-name\">[iteratee&#x3D;_.identity]</span> <span class=\"param-type\">(Function)</span> <div data-render-html=\"/#synthetic\"><p>这个函数会处理每一个元素 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Object)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回对象</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token keyword\" >function</span> <span class=\"token function\" >Foo</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span>\n  <span class=\"token keyword\" >this</span><span class=\"token punctuation\" >.</span>a <span class=\"token operator\" >=</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >;</span>\n  <span class=\"token keyword\" >this</span><span class=\"token punctuation\" >.</span>b <span class=\"token operator\" >=</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >;</span>\n<span class=\"token punctuation\" >}</span>\n\nFoo<span class=\"token punctuation\" >.</span>prototype<span class=\"token punctuation\" >.</span>c <span class=\"token operator\" >=</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >;</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >forInRight</span><span class=\"token punctuation\" >(</span><span class=\"token keyword\" >new</span> <span class=\"token class-name\" >Foo</span><span class=\"token punctuation\" >,</span> <span class=\"token keyword\" >function</span><span class=\"token punctuation\" >(</span>value<span class=\"token punctuation\" >,</span> key<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span>\n  console<span class=\"token punctuation\" >.</span><span class=\"token function\" >log</span><span class=\"token punctuation\" >(</span>key<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 输出 'c', 'b', 然后 'a'， `_.forIn` 会输出 'a', 'b', 然后 'c'</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/forOwn",
  "html":"<div data-render-page=\"entry\"><h2>forOwn <a class=\"fa-link\" href=\"./forOwn\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L11066\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.forown\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.forOwn(object, [iteratee&#x3D;_.identity])</div>\n\n<div data-render-html=\"/forOwn\"><p>使用 <code>iteratee</code> 遍历自身的可枚举属性。\niteratee 会传入3个参数：(value, key, object)。 如果返回 false，iteratee 会提前退出遍历。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">object</span> <span class=\"param-type\">(Object)</span> <div data-render-html=\"/#synthetic\"><p>要遍历的对象 </p>\n</div></li>\n<li><span class=\"param-name\">[iteratee&#x3D;_.identity]</span> <span class=\"param-type\">(Function)</span> <div data-render-html=\"/#synthetic\"><p>这个函数会处理每一个元素 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Object)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回对象</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token keyword\" >function</span> <span class=\"token function\" >Foo</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span>\n  <span class=\"token keyword\" >this</span><span class=\"token punctuation\" >.</span>a <span class=\"token operator\" >=</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >;</span>\n  <span class=\"token keyword\" >this</span><span class=\"token punctuation\" >.</span>b <span class=\"token operator\" >=</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >;</span>\n<span class=\"token punctuation\" >}</span>\n\nFoo<span class=\"token punctuation\" >.</span>prototype<span class=\"token punctuation\" >.</span>c <span class=\"token operator\" >=</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >;</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >forOwn</span><span class=\"token punctuation\" >(</span><span class=\"token keyword\" >new</span> <span class=\"token class-name\" >Foo</span><span class=\"token punctuation\" >,</span> <span class=\"token keyword\" >function</span><span class=\"token punctuation\" >(</span>value<span class=\"token punctuation\" >,</span> key<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span>\n  console<span class=\"token punctuation\" >.</span><span class=\"token function\" >log</span><span class=\"token punctuation\" >(</span>key<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 输出 'a' 然后 'b' (无法保证遍历的顺序)</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/forOwnRight",
  "html":"<div data-render-page=\"entry\"><h2>forOwnRight <a class=\"fa-link\" href=\"./forOwnRight\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L11093\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.forownright\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.forOwnRight(object, [iteratee&#x3D;_.identity])</div>\n\n<div data-render-html=\"/forOwnRight\"><p>这个方法类似 <code>_.forOwn</code>。 除了它是反方向开始遍历的。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">object</span> <span class=\"param-type\">(Object)</span> <div data-render-html=\"/#synthetic\"><p>要遍历的对象 </p>\n</div></li>\n<li><span class=\"param-name\">[iteratee&#x3D;_.identity]</span> <span class=\"param-type\">(Function)</span> <div data-render-html=\"/#synthetic\"><p>这个函数会处理每一个元素 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Object)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回对象</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token keyword\" >function</span> <span class=\"token function\" >Foo</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span>\n  <span class=\"token keyword\" >this</span><span class=\"token punctuation\" >.</span>a <span class=\"token operator\" >=</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >;</span>\n  <span class=\"token keyword\" >this</span><span class=\"token punctuation\" >.</span>b <span class=\"token operator\" >=</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >;</span>\n<span class=\"token punctuation\" >}</span>\n\nFoo<span class=\"token punctuation\" >.</span>prototype<span class=\"token punctuation\" >.</span>c <span class=\"token operator\" >=</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >;</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >forOwnRight</span><span class=\"token punctuation\" >(</span><span class=\"token keyword\" >new</span> <span class=\"token class-name\" >Foo</span><span class=\"token punctuation\" >,</span> <span class=\"token keyword\" >function</span><span class=\"token punctuation\" >(</span>value<span class=\"token punctuation\" >,</span> key<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span>\n  console<span class=\"token punctuation\" >.</span><span class=\"token function\" >log</span><span class=\"token punctuation\" >(</span>key<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 输出 'b' 然后 'a'， `_.forOwn` 会输出 'a' 然后 'b'</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/functions",
  "html":"<div data-render-page=\"entry\"><h2>functions <a class=\"fa-link\" href=\"./functions\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L11117\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.functions\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.functions(object)</div>\n\n<div data-render-html=\"/functions\"><p>返回一个 function 对象自身可枚举属性名的数组。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">object</span> <span class=\"param-type\">(Object)</span> <div data-render-html=\"/#synthetic\"><p>要检索的对象 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Array)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回包含属性名的新数组</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token keyword\" >function</span> <span class=\"token function\" >Foo</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span>\n  <span class=\"token keyword\" >this</span><span class=\"token punctuation\" >.</span>a <span class=\"token operator\" >=</span> _<span class=\"token punctuation\" >.</span><span class=\"token function\" >constant</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'a'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n  <span class=\"token keyword\" >this</span><span class=\"token punctuation\" >.</span>b <span class=\"token operator\" >=</span> _<span class=\"token punctuation\" >.</span><span class=\"token function\" >constant</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'b'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token punctuation\" >}</span>\n\nFoo<span class=\"token punctuation\" >.</span>prototype<span class=\"token punctuation\" >.</span>c <span class=\"token operator\" >=</span> _<span class=\"token punctuation\" >.</span><span class=\"token function\" >constant</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'c'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >functions</span><span class=\"token punctuation\" >(</span><span class=\"token keyword\" >new</span> <span class=\"token class-name\" >Foo</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => ['a', 'b']</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/functionsIn",
  "html":"<div data-render-page=\"entry\"><h2>functionsIn <a class=\"fa-link\" href=\"./functionsIn\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L11141\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.functionsin\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.functionsIn(object)</div>\n\n<div data-render-html=\"/functionsIn\"><p>返回一个 function 对象自身和继承的可枚举属性名的数组。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">object</span> <span class=\"param-type\">(Object)</span> <div data-render-html=\"/#synthetic\"><p>要检索的对象 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Array)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回包含属性名的新数组</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token keyword\" >function</span> <span class=\"token function\" >Foo</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span>\n  <span class=\"token keyword\" >this</span><span class=\"token punctuation\" >.</span>a <span class=\"token operator\" >=</span> _<span class=\"token punctuation\" >.</span><span class=\"token function\" >constant</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'a'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n  <span class=\"token keyword\" >this</span><span class=\"token punctuation\" >.</span>b <span class=\"token operator\" >=</span> _<span class=\"token punctuation\" >.</span><span class=\"token function\" >constant</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'b'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token punctuation\" >}</span>\n\nFoo<span class=\"token punctuation\" >.</span>prototype<span class=\"token punctuation\" >.</span>c <span class=\"token operator\" >=</span> _<span class=\"token punctuation\" >.</span><span class=\"token function\" >constant</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'c'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >functionsIn</span><span class=\"token punctuation\" >(</span><span class=\"token keyword\" >new</span> <span class=\"token class-name\" >Foo</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => ['a', 'b', 'c']</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/get",
  "html":"<div data-render-page=\"entry\"><h2>get <a class=\"fa-link\" href=\"./get\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L11169\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.get\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.get(object, path, [defaultValue])</div>\n\n<div data-render-html=\"/get\"><p>根据对象路径获取值。\n如果解析 value 是 <code>undefined</code> 会以 <code>defaultValue</code> 取代。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">object</span> <span class=\"param-type\">(Object)</span> <div data-render-html=\"/#synthetic\"><p>要检索的对象 </p>\n</div></li>\n<li><span class=\"param-name\">path</span> <span class=\"param-type\">(Array|string)</span> <div data-render-html=\"/#synthetic\"><p>要获取的对象路径 </p>\n</div></li>\n<li><span class=\"param-name\">[defaultValue]</span> <span class=\"param-type\">(*)</span> <div data-render-html=\"/#synthetic\"><p>如果解析值是 <code>undefined</code>，这值会被返回 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(*)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回解析的值</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token keyword\" >var</span> object <span class=\"token operator\" >=</span> <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'a'</span><span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >[</span><span class=\"token punctuation\" >{</span> <span class=\"token string\" >'b'</span><span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'c'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >3</span> <span class=\"token punctuation\" >}</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >]</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >;</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token keyword\" >get</span><span class=\"token punctuation\" >(</span>object<span class=\"token punctuation\" >,</span> <span class=\"token string\" >'a[0].b.c'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 3</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token keyword\" >get</span><span class=\"token punctuation\" >(</span>object<span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >[</span><span class=\"token string\" >'a'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'0'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'b'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'c'</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 3</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token keyword\" >get</span><span class=\"token punctuation\" >(</span>object<span class=\"token punctuation\" >,</span> <span class=\"token string\" >'a.b.c'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'default'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 'default'</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/has",
  "html":"<div data-render-page=\"entry\"><h2>has <a class=\"fa-link\" href=\"./has\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L11200\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.has\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.has(object, path)</div>\n\n<div data-render-html=\"/has\"><p>检查 <code>path</code> 是否是对象的直接属性。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">object</span> <span class=\"param-type\">(Object)</span> <div data-render-html=\"/#synthetic\"><p>要检索的对象 </p>\n</div></li>\n<li><span class=\"param-name\">path</span> <span class=\"param-type\">(Array|string)</span> <div data-render-html=\"/#synthetic\"><p>要检查的路径 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(boolean)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 如果存在返回 true，否则返回 <code>false</code></p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token keyword\" >var</span> object <span class=\"token operator\" >=</span> <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'a'</span><span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'b'</span><span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'c'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >3</span> <span class=\"token punctuation\" >}</span> <span class=\"token punctuation\" >}</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >;</span>\n<span class=\"token keyword\" >var</span> other <span class=\"token operator\" >=</span> _<span class=\"token punctuation\" >.</span><span class=\"token function\" >create</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> <span class=\"token string\" >'a'</span><span class=\"token punctuation\" >:</span> _<span class=\"token punctuation\" >.</span><span class=\"token function\" >create</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> <span class=\"token string\" >'b'</span><span class=\"token punctuation\" >:</span> _<span class=\"token punctuation\" >.</span><span class=\"token function\" >create</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> <span class=\"token string\" >'c'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >3</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >has</span><span class=\"token punctuation\" >(</span>object<span class=\"token punctuation\" >,</span> <span class=\"token string\" >'a'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => true</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >has</span><span class=\"token punctuation\" >(</span>object<span class=\"token punctuation\" >,</span> <span class=\"token string\" >'a.b.c'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => true</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >has</span><span class=\"token punctuation\" >(</span>object<span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >[</span><span class=\"token string\" >'a'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'b'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'c'</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => true</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >has</span><span class=\"token punctuation\" >(</span>other<span class=\"token punctuation\" >,</span> <span class=\"token string\" >'a'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => false</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/hasIn",
  "html":"<div data-render-page=\"entry\"><h2>hasIn <a class=\"fa-link\" href=\"./hasIn\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L11229\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.hasin\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.hasIn(object, path)</div>\n\n<div data-render-html=\"/hasIn\"><p>检查 <code>path</code> 是否是对象的直接 或者 继承属性。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">object</span> <span class=\"param-type\">(Object)</span> <div data-render-html=\"/#synthetic\"><p>要检索的对象 </p>\n</div></li>\n<li><span class=\"param-name\">path</span> <span class=\"param-type\">(Array|string)</span> <div data-render-html=\"/#synthetic\"><p>要检查的路径 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(boolean)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 如果存在返回 true，否则返回 <code>false</code></p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token keyword\" >var</span> object <span class=\"token operator\" >=</span> _<span class=\"token punctuation\" >.</span><span class=\"token function\" >create</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> <span class=\"token string\" >'a'</span><span class=\"token punctuation\" >:</span> _<span class=\"token punctuation\" >.</span><span class=\"token function\" >create</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> <span class=\"token string\" >'b'</span><span class=\"token punctuation\" >:</span> _<span class=\"token punctuation\" >.</span><span class=\"token function\" >create</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> <span class=\"token string\" >'c'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >3</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >hasIn</span><span class=\"token punctuation\" >(</span>object<span class=\"token punctuation\" >,</span> <span class=\"token string\" >'a'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => true</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >hasIn</span><span class=\"token punctuation\" >(</span>object<span class=\"token punctuation\" >,</span> <span class=\"token string\" >'a.b.c'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => true</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >hasIn</span><span class=\"token punctuation\" >(</span>object<span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >[</span><span class=\"token string\" >'a'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'b'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'c'</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => true</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >hasIn</span><span class=\"token punctuation\" >(</span>object<span class=\"token punctuation\" >,</span> <span class=\"token string\" >'b'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => false</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/invert",
  "html":"<div data-render-page=\"entry\"><h2>invert <a class=\"fa-link\" href=\"./invert\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L11252\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.invert\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.invert(object, [multiVal])</div>\n\n<div data-render-html=\"/invert\"><p>创建一个键值倒置的对象。\n如果 <code>object</code> 有重复的值，后面的值会覆盖前面的值。\n如果 <code>multiVal</code> 为 true，重复的值则组成数组。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">object</span> <span class=\"param-type\">(Object)</span> <div data-render-html=\"/#synthetic\"><p>要倒置的对象 </p>\n</div></li>\n<li><span class=\"param-name\">[multiVal]</span> <span class=\"param-type\">(boolean)</span> <div data-render-html=\"/#synthetic\"><p>每个 key 允许多个值 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Object)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回新的倒置的对象</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token keyword\" >var</span> object <span class=\"token operator\" >=</span> <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'a'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'b'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'c'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >;</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >invert</span><span class=\"token punctuation\" >(</span>object<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => { '1': 'c', '2': 'b' }</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/invertBy",
  "html":"<div data-render-page=\"entry\"><h2>invertBy <a class=\"fa-link\" href=\"./invertBy\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L11279\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.invertby\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.invertBy(object, [iteratee&#x3D;_.identity])</div>\n\n<div data-render-html=\"/invertBy\"><p>这个方法类似 <code>_.invert</code>。\n除了它接受 iteratee 调用每一个元素，可在返回值中定制key。\niteratee 会传入1个参数：(value)。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">object</span> <span class=\"param-type\">(Object)</span> <div data-render-html=\"/#synthetic\"><p>要倒置的对象 </p>\n</div></li>\n<li><span class=\"param-name\">[iteratee&#x3D;_.identity]</span> <span class=\"param-type\">(Function|Object|string)</span> <div data-render-html=\"/#synthetic\"><p>这个函数会调用每一个元素 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Object)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回新的倒置的对象</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token keyword\" >var</span> object <span class=\"token operator\" >=</span> <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'a'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'b'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'c'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >;</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >invertBy</span><span class=\"token punctuation\" >(</span>object<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => { '1': ['a', 'c'], '2': ['b'] }</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >invertBy</span><span class=\"token punctuation\" >(</span>object<span class=\"token punctuation\" >,</span> <span class=\"token keyword\" >function</span><span class=\"token punctuation\" >(</span>value<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span>\n  <span class=\"token keyword\" >return</span> <span class=\"token string\" >'group'</span> <span class=\"token operator\" >+</span> value<span class=\"token punctuation\" >;</span>\n<span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => { 'group1': ['a', 'c'], 'group2': ['b'] }</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/invoke",
  "html":"<div data-render-page=\"entry\"><h2>invoke <a class=\"fa-link\" href=\"./invoke\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L11303\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.invoke\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.invoke(object, path, [args])</div>\n\n<div data-render-html=\"/invoke\"><p>调用对象路径的方法</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">object</span> <span class=\"param-type\">(Object)</span> <div data-render-html=\"/#synthetic\"><p>要检索的对象 </p>\n</div></li>\n<li><span class=\"param-name\">path</span> <span class=\"param-type\">(Array|string)</span> <div data-render-html=\"/#synthetic\"><p>要调用方法的路径 </p>\n</div></li>\n<li><span class=\"param-name\">[args]</span> <span class=\"param-type\">(...*)</span> <div data-render-html=\"/#synthetic\"><p>调用方法的参数 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(*)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回调用方法的结果</p>\n<p>var object = { &#39;a&#39;: [{ &#39;b&#39;: { &#39;c&#39;: [1, 2, 3, 4] } }] };</p>\n<p>_.invoke(object, &#39;a[0].b.c.slice&#39;, 1, 3);\n// =&gt; [2, 3]</p>\n</div></div>\n</div>" }
,{ "href":"/keys",
  "html":"<div data-render-page=\"entry\"><h2>keys <a class=\"fa-link\" href=\"./keys\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L11332\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.keys\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.keys(object)</div>\n\n<div data-render-html=\"/keys\"><p>创建 <code>object</code> 自身可枚举属性名为一个数组。\n<br>\n<br>\n<strong>注意:</strong> 非对象的值会被强制转换为对象，查看\n<a href=\"http://ecma-international.org/ecma-262/6.0/#sec-object.keys\" target=\"_blank\">ES spec</a>\n了解详情</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">object</span> <span class=\"param-type\">(Object)</span> <div data-render-html=\"/#synthetic\"><p>要检索的对象 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Array)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回包含属性名的数组</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token keyword\" >function</span> <span class=\"token function\" >Foo</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span>\n  <span class=\"token keyword\" >this</span><span class=\"token punctuation\" >.</span>a <span class=\"token operator\" >=</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >;</span>\n  <span class=\"token keyword\" >this</span><span class=\"token punctuation\" >.</span>b <span class=\"token operator\" >=</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >;</span>\n<span class=\"token punctuation\" >}</span>\n\nFoo<span class=\"token punctuation\" >.</span>prototype<span class=\"token punctuation\" >.</span>c <span class=\"token operator\" >=</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >;</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >keys</span><span class=\"token punctuation\" >(</span><span class=\"token keyword\" >new</span> <span class=\"token class-name\" >Foo</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => ['a', 'b'] (无法保证遍历的顺序)</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >keys</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'hi'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => ['0', '1']</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/keysIn",
  "html":"<div data-render-page=\"entry\"><h2>keysIn <a class=\"fa-link\" href=\"./keysIn\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L11372\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.keysin\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.keysIn(object)</div>\n\n<div data-render-html=\"/keysIn\"><p>创建 <code>object</code> 自身 或 继承的可枚举属性名为一个数组。\n<br>\n<br>\n<strong>注意:</strong> 非对象的值会被强制转换为对象</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">object</span> <span class=\"param-type\">(Object)</span> <div data-render-html=\"/#synthetic\"><p>要检索的对象 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Array)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回包含属性名的数组</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token keyword\" >function</span> <span class=\"token function\" >Foo</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span>\n  <span class=\"token keyword\" >this</span><span class=\"token punctuation\" >.</span>a <span class=\"token operator\" >=</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >;</span>\n  <span class=\"token keyword\" >this</span><span class=\"token punctuation\" >.</span>b <span class=\"token operator\" >=</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >;</span>\n<span class=\"token punctuation\" >}</span>\n\nFoo<span class=\"token punctuation\" >.</span>prototype<span class=\"token punctuation\" >.</span>c <span class=\"token operator\" >=</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >;</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >keysIn</span><span class=\"token punctuation\" >(</span><span class=\"token keyword\" >new</span> <span class=\"token class-name\" >Foo</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => ['a', 'b', 'c'] (无法保证遍历的顺序)</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/mapKeys",
  "html":"<div data-render-page=\"entry\"><h2>mapKeys <a class=\"fa-link\" href=\"./mapKeys\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L11408\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.mapkeys\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.mapKeys(object, [iteratee&#x3D;_.identity])</div>\n\n<div data-render-html=\"/mapKeys\"><p>反向版 <code>_.mapValues</code>。\n这个方法创建一个对象，对象的值与源对象相同，但 key 是通过 <code>iteratee</code> 产生的。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">object</span> <span class=\"param-type\">(Object)</span> <div data-render-html=\"/#synthetic\"><p>要遍历的对象 </p>\n</div></li>\n<li><span class=\"param-name\">[iteratee&#x3D;_.identity]</span> <span class=\"param-type\">(Function|Object|string)</span> <div data-render-html=\"/#synthetic\"><p>这个函数会处理每一个元素 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Object)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回映射后的新对象</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >mapKeys</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> <span class=\"token string\" >'a'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'b'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span> <span class=\"token keyword\" >function</span><span class=\"token punctuation\" >(</span>value<span class=\"token punctuation\" >,</span> key<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span>\n  <span class=\"token keyword\" >return</span> key <span class=\"token operator\" >+</span> value<span class=\"token punctuation\" >;</span>\n<span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => { 'a1': 1, 'b2': 2 }</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/mapValues",
  "html":"<div data-render-page=\"entry\"><h2>mapValues <a class=\"fa-link\" href=\"./mapValues\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L11442\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.mapvalues\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.mapValues(object, [iteratee&#x3D;_.identity])</div>\n\n<div data-render-html=\"/mapValues\"><p>创建一个对象，对象的key相同，值是通过 <code>iteratee</code> 产生的。\niteratee 会传入3个参数： (value, key, object)</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">object</span> <span class=\"param-type\">(Object)</span> <div data-render-html=\"/#synthetic\"><p>要遍历的对象 </p>\n</div></li>\n<li><span class=\"param-name\">[iteratee&#x3D;_.identity]</span> <span class=\"param-type\">(Function|Object|string)</span> <div data-render-html=\"/#synthetic\"><p>这个函数会处理每一个元素 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Object)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回映射后的对象</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token keyword\" >var</span> users <span class=\"token operator\" >=</span> <span class=\"token punctuation\" >{</span>\n  <span class=\"token string\" >'fred'</span><span class=\"token punctuation\" >:</span>    <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'user'</span><span class=\"token punctuation\" >:</span> <span class=\"token string\" >'fred'</span><span class=\"token punctuation\" >,</span>    <span class=\"token string\" >'age'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >40</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token string\" >'pebbles'</span><span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'user'</span><span class=\"token punctuation\" >:</span> <span class=\"token string\" >'pebbles'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'age'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span> <span class=\"token punctuation\" >}</span>\n<span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >;</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >mapValues</span><span class=\"token punctuation\" >(</span>users<span class=\"token punctuation\" >,</span> <span class=\"token keyword\" >function</span><span class=\"token punctuation\" >(</span>o<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span> <span class=\"token keyword\" >return</span> o<span class=\"token punctuation\" >.</span>age<span class=\"token punctuation\" >;</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => { 'fred': 40, 'pebbles': 1 } (无法保证遍历的顺序)</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 使用了 `_.property` 的回调结果</span>\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >mapValues</span><span class=\"token punctuation\" >(</span>users<span class=\"token punctuation\" >,</span> <span class=\"token string\" >'age'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => { 'fred': 40, 'pebbles': 1 } (无法保证遍历的顺序)</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/merge",
  "html":"<div data-render-page=\"entry\"><h2>merge <a class=\"fa-link\" href=\"./merge\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L11479\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.merge\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.merge(object, [sources])</div>\n\n<div data-render-html=\"/merge\"><p>递归合并来源对象的自身和继承的可枚举属性到目标对象。\n跳过来源对象解析为 <code>undefined</code> 的属性。\n数组和普通对象会递归合并，其他对象和值会被直接分配。\n来源对象从左到右分配，后续的来源对象属性会覆盖之前分配的属性。\n<br>\n<br>\n<strong>注意:</strong> 这方法会改变源对象</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">object</span> <span class=\"param-type\">(Object)</span> <div data-render-html=\"/#synthetic\"><p>目标对象 </p>\n</div></li>\n<li><span class=\"param-name\">[sources]</span> <span class=\"param-type\">(...Object)</span> <div data-render-html=\"/#synthetic\"><p>来源对象 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Object)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回对象</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token keyword\" >var</span> users <span class=\"token operator\" >=</span> <span class=\"token punctuation\" >{</span>\n  <span class=\"token string\" >'data'</span><span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >[</span><span class=\"token punctuation\" >{</span> <span class=\"token string\" >'user'</span><span class=\"token punctuation\" >:</span> <span class=\"token string\" >'barney'</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'user'</span><span class=\"token punctuation\" >:</span> <span class=\"token string\" >'fred'</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >]</span>\n<span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >;</span>\n\n<span class=\"token keyword\" >var</span> ages <span class=\"token operator\" >=</span> <span class=\"token punctuation\" >{</span>\n  <span class=\"token string\" >'data'</span><span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >[</span><span class=\"token punctuation\" >{</span> <span class=\"token string\" >'age'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >36</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'age'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >40</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >]</span>\n<span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >;</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >merge</span><span class=\"token punctuation\" >(</span>users<span class=\"token punctuation\" >,</span> ages<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => { 'data': [{ 'user': 'barney', 'age': 36 }, { 'user': 'fred', 'age': 40 }] }</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/mergeWith",
  "html":"<div data-render-page=\"entry\"><h2>mergeWith <a class=\"fa-link\" href=\"./mergeWith\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L11516\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.mergewith\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.mergeWith(object, sources, customizer)</div>\n\n<div data-render-html=\"/mergeWith\"><p>这个方法类似 <code>_.merge</code>。\n除了它接受一个 <code>customizer</code> 决定如何合并。\n如果 <code>customizer</code> 返回 <code>undefined</code> 将会由合并处理方法代替。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">object</span> <span class=\"param-type\">(Object)</span> <div data-render-html=\"/#synthetic\"><p>目标对象 </p>\n</div></li>\n<li><span class=\"param-name\">sources</span> <span class=\"param-type\">(...Object)</span> <div data-render-html=\"/#synthetic\"><p>来源对象 </p>\n</div></li>\n<li><span class=\"param-name\">customizer</span> <span class=\"param-type\">(Function)</span> <div data-render-html=\"/#synthetic\"><p>这个方法决定如何合并 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Object)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回对象</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token keyword\" >function</span> <span class=\"token function\" >customizer</span><span class=\"token punctuation\" >(</span>objValue<span class=\"token punctuation\" >,</span> srcValue<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span>\n  <span class=\"token keyword\" >if</span> <span class=\"token punctuation\" >(</span>_<span class=\"token punctuation\" >.</span><span class=\"token function\" >isArray</span><span class=\"token punctuation\" >(</span>objValue<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span>\n    <span class=\"token keyword\" >return</span> objValue<span class=\"token punctuation\" >.</span><span class=\"token function\" >concat</span><span class=\"token punctuation\" >(</span>srcValue<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n  <span class=\"token punctuation\" >}</span>\n<span class=\"token punctuation\" >}</span>\n\n<span class=\"token keyword\" >var</span> object <span class=\"token operator\" >=</span> <span class=\"token punctuation\" >{</span>\n  <span class=\"token string\" >'fruits'</span><span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >[</span><span class=\"token string\" >'apple'</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token string\" >'vegetables'</span><span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >[</span><span class=\"token string\" >'beet'</span><span class=\"token punctuation\" >]</span>\n<span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >;</span>\n\n<span class=\"token keyword\" >var</span> other <span class=\"token operator\" >=</span> <span class=\"token punctuation\" >{</span>\n  <span class=\"token string\" >'fruits'</span><span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >[</span><span class=\"token string\" >'banana'</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token string\" >'vegetables'</span><span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >[</span><span class=\"token string\" >'carrot'</span><span class=\"token punctuation\" >]</span>\n<span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >;</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >mergeWith</span><span class=\"token punctuation\" >(</span>object<span class=\"token punctuation\" >,</span> other<span class=\"token punctuation\" >,</span> customizer<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => { 'fruits': ['apple', 'banana'], 'vegetables': ['beet', 'carrot'] }</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/omit",
  "html":"<div data-render-page=\"entry\"><h2>omit <a class=\"fa-link\" href=\"./omit\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L11537\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.omit\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.omit(object, [props])</div>\n\n<div data-render-html=\"/omit\"><p>反向版 <code>_.pick</code>。\n这个方法返回忽略属性之外的自身和继承的可枚举属性。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">object</span> <span class=\"param-type\">(Object)</span> <div data-render-html=\"/#synthetic\"><p>来源对象 </p>\n</div></li>\n<li><span class=\"param-name\">[props]</span> <span class=\"param-type\">(...(string|string[])</span> <div data-render-html=\"/#synthetic\"><p>要被忽略的属性，单独指定或指定在数组中 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Object)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回新对象</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token keyword\" >var</span> object <span class=\"token operator\" >=</span> <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'a'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'b'</span><span class=\"token punctuation\" >:</span> <span class=\"token string\" >'2'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'c'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >3</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >;</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >omit</span><span class=\"token punctuation\" >(</span>object<span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >[</span><span class=\"token string\" >'a'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'c'</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => { 'b': '2' }</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/omitBy",
  "html":"<div data-render-page=\"entry\"><h2>omitBy <a class=\"fa-link\" href=\"./omitBy\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L11562\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.omitby\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.omitBy(object, [predicate&#x3D;_.identity])</div>\n\n<div data-render-html=\"/omitBy\"><p>反向版 <code>_.pickBy</code>。\n这个方法返回经 <code>predicate</code> 判断不是真值的属性的自身和继承的可枚举属性。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">object</span> <span class=\"param-type\">(Object)</span> <div data-render-html=\"/#synthetic\"><p>来源对象 </p>\n</div></li>\n<li><span class=\"param-name\">[predicate&#x3D;_.identity]</span> <span class=\"param-type\">(Function|Object|string)</span> <div data-render-html=\"/#synthetic\"><p>这个函数会调用每一个属性 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Object)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回新对象</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token keyword\" >var</span> object <span class=\"token operator\" >=</span> <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'a'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'b'</span><span class=\"token punctuation\" >:</span> <span class=\"token string\" >'2'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'c'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >3</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >;</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >omitBy</span><span class=\"token punctuation\" >(</span>object<span class=\"token punctuation\" >,</span> _<span class=\"token punctuation\" >.</span>isNumber<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => { 'b': '2' }</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/pick",
  "html":"<div data-render-page=\"entry\"><h2>pick <a class=\"fa-link\" href=\"./pick\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L11585\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.pick\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.pick(object, [props])</div>\n\n<div data-render-html=\"/pick\"><p>创建一个从 <code>object</code> 中选中的属性的对象。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">object</span> <span class=\"param-type\">(Object)</span> <div data-render-html=\"/#synthetic\"><p>来源对象 </p>\n</div></li>\n<li><span class=\"param-name\">[props]</span> <span class=\"param-type\">(...(string|string[])</span> <div data-render-html=\"/#synthetic\"><p>要选中的属性名，单独指定或指定在数组中 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Object)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回新对象</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token keyword\" >var</span> object <span class=\"token operator\" >=</span> <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'a'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'b'</span><span class=\"token punctuation\" >:</span> <span class=\"token string\" >'2'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'c'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >3</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >;</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >pick</span><span class=\"token punctuation\" >(</span>object<span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >[</span><span class=\"token string\" >'a'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'c'</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => { 'a': 1, 'c': 3 }</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/pickBy",
  "html":"<div data-render-page=\"entry\"><h2>pickBy <a class=\"fa-link\" href=\"./pickBy\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L11606\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.pickby\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.pickBy(object, [predicate&#x3D;_.identity])</div>\n\n<div data-render-html=\"/pickBy\"><p>创建一个从 <code>object</code> 中经 <code>predicate</code> 判断为真值的属性为对象。\npredicate 会传入1个参数：(value)</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">object</span> <span class=\"param-type\">(Object)</span> <div data-render-html=\"/#synthetic\"><p>来源对象 </p>\n</div></li>\n<li><span class=\"param-name\">[predicate&#x3D;_.identity]</span> <span class=\"param-type\">(Function|Object|string)</span> <div data-render-html=\"/#synthetic\"><p>这个函数会调用每一个属性 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Object)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回新对象</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token keyword\" >var</span> object <span class=\"token operator\" >=</span> <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'a'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'b'</span><span class=\"token punctuation\" >:</span> <span class=\"token string\" >'2'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'c'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >3</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >;</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >pickBy</span><span class=\"token punctuation\" >(</span>object<span class=\"token punctuation\" >,</span> _<span class=\"token punctuation\" >.</span>isNumber<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => { 'a': 1, 'c': 3 }</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/result",
  "html":"<div data-render-page=\"entry\"><h2>result <a class=\"fa-link\" href=\"./result\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L11637\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.result\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.result(object, path, [defaultValue])</div>\n\n<div data-render-html=\"/result\"><p>这个方法类似 <code>_.get</code>。\n除了如果解析到的值是一个函数的话，就绑定 <code>this</code> 到这个函数并返回执行后的结果。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">object</span> <span class=\"param-type\">(Object)</span> <div data-render-html=\"/#synthetic\"><p>要检索的对象 </p>\n</div></li>\n<li><span class=\"param-name\">path</span> <span class=\"param-type\">(Array|string)</span> <div data-render-html=\"/#synthetic\"><p>要解析的属性路径 </p>\n</div></li>\n<li><span class=\"param-name\">[defaultValue]</span> <span class=\"param-type\">(*)</span> <div data-render-html=\"/#synthetic\"><p>如果值是 <code>undefined</code>，返回这个值 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(*)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回解析后的值</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token keyword\" >var</span> object <span class=\"token operator\" >=</span> <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'a'</span><span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >[</span><span class=\"token punctuation\" >{</span> <span class=\"token string\" >'b'</span><span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'c1'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'c2'</span><span class=\"token punctuation\" >:</span> _<span class=\"token punctuation\" >.</span><span class=\"token function\" >constant</span><span class=\"token punctuation\" >(</span><span class=\"token number\" >4</span><span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >}</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >]</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >;</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >result</span><span class=\"token punctuation\" >(</span>object<span class=\"token punctuation\" >,</span> <span class=\"token string\" >'a[0].b.c1'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 3</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >result</span><span class=\"token punctuation\" >(</span>object<span class=\"token punctuation\" >,</span> <span class=\"token string\" >'a[0].b.c2'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 4</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >result</span><span class=\"token punctuation\" >(</span>object<span class=\"token punctuation\" >,</span> <span class=\"token string\" >'a[0].b.c3'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'default'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 'default'</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >result</span><span class=\"token punctuation\" >(</span>object<span class=\"token punctuation\" >,</span> <span class=\"token string\" >'a[0].b.c3'</span><span class=\"token punctuation\" >,</span> _<span class=\"token punctuation\" >.</span><span class=\"token function\" >constant</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'default'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 'default'</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/set",
  "html":"<div data-render-page=\"entry\"><h2>set <a class=\"fa-link\" href=\"./set\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L11675\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.set\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.set(object, path, value)</div>\n\n<div data-render-html=\"/set\"><p>设置值到对象对应的属性路径上，如果没有则创建这部分路径。\n缺少的索引属性会创建为数组，而缺少的属性会创建为对象。\n使用 <code>_.setWith</code> 定制创建。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">object</span> <span class=\"param-type\">(Object)</span> <div data-render-html=\"/#synthetic\"><p>要修改的对象 </p>\n</div></li>\n<li><span class=\"param-name\">path</span> <span class=\"param-type\">(Array|string)</span> <div data-render-html=\"/#synthetic\"><p>要设置的对象路径 </p>\n</div></li>\n<li><span class=\"param-name\">value</span> <span class=\"param-type\">(*)</span> <div data-render-html=\"/#synthetic\"><p>要设置的值 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Object)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回对象</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token keyword\" >var</span> object <span class=\"token operator\" >=</span> <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'a'</span><span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >[</span><span class=\"token punctuation\" >{</span> <span class=\"token string\" >'b'</span><span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'c'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >3</span> <span class=\"token punctuation\" >}</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >]</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >;</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token keyword\" >set</span><span class=\"token punctuation\" >(</span>object<span class=\"token punctuation\" >,</span> <span class=\"token string\" >'a[0].b.c'</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >4</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\nconsole<span class=\"token punctuation\" >.</span><span class=\"token function\" >log</span><span class=\"token punctuation\" >(</span>object<span class=\"token punctuation\" >.</span>a<span class=\"token punctuation\" >[</span><span class=\"token number\" >0</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >.</span>b<span class=\"token punctuation\" >.</span>c<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 4</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token keyword\" >set</span><span class=\"token punctuation\" >(</span>object<span class=\"token punctuation\" >,</span> <span class=\"token string\" >'x[0].y.z'</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >5</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\nconsole<span class=\"token punctuation\" >.</span><span class=\"token function\" >log</span><span class=\"token punctuation\" >(</span>object<span class=\"token punctuation\" >.</span>x<span class=\"token punctuation\" >[</span><span class=\"token number\" >0</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >.</span>y<span class=\"token punctuation\" >.</span>z<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 5</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/setWith",
  "html":"<div data-render-page=\"entry\"><h2>setWith <a class=\"fa-link\" href=\"./setWith\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L11700\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.setwith\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.setWith(object, path, value, [customizer])</div>\n\n<div data-render-html=\"/setWith\"><p>这个方法类似 <code>_.set</code>。\n除了它接受一个 <code>customizer</code> 决定如何设置对象路径的值。\n如果 <code>customizer</code> 返回 <code>undefined</code> 将会有它的处理方法代替。\n<code>customizer</code> 会传入3个参数：(nsValue, key, nsObject)\n <strong>注意:</strong> 这个方法会改变源对象</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">object</span> <span class=\"param-type\">(Object)</span> <div data-render-html=\"/#synthetic\"><p>要修改的对象 </p>\n</div></li>\n<li><span class=\"param-name\">path</span> <span class=\"param-type\">(Array|string)</span> <div data-render-html=\"/#synthetic\"><p>要设置的对象路径 </p>\n</div></li>\n<li><span class=\"param-name\">value</span> <span class=\"param-type\">(*)</span> <div data-render-html=\"/#synthetic\"><p>要设置的值 </p>\n</div></li>\n<li><span class=\"param-name\">[customizer]</span> <span class=\"param-type\">(Function)</span> <div data-render-html=\"/#synthetic\"><p>这个函数决定如何分配值 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Object)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回对象</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >setWith</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> <span class=\"token string\" >'0'</span><span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'length'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span> <span class=\"token punctuation\" >}</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'[0][1][2]'</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >,</span> Object<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => { '0': { '1': { '2': 3 }, 'length': 2 } }</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/toPairs",
  "html":"<div data-render-page=\"entry\"><h2>toPairs <a class=\"fa-link\" href=\"./toPairs\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L11725\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.topairs\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.toPairs(object)</div>\n\n<div data-render-html=\"/toPairs\"><p>创建一个对象自身可枚举属性的键值对数组。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">object</span> <span class=\"param-type\">(Object)</span> <div data-render-html=\"/#synthetic\"><p>要检索的对象 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Array)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回键值对的数组</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token keyword\" >function</span> <span class=\"token function\" >Foo</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span>\n  <span class=\"token keyword\" >this</span><span class=\"token punctuation\" >.</span>a <span class=\"token operator\" >=</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >;</span>\n  <span class=\"token keyword\" >this</span><span class=\"token punctuation\" >.</span>b <span class=\"token operator\" >=</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >;</span>\n<span class=\"token punctuation\" >}</span>\n\nFoo<span class=\"token punctuation\" >.</span>prototype<span class=\"token punctuation\" >.</span>c <span class=\"token operator\" >=</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >;</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >toPairs</span><span class=\"token punctuation\" >(</span><span class=\"token keyword\" >new</span> <span class=\"token class-name\" >Foo</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => [['a', 1], ['b', 2]] (无法保证遍历的顺序)</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/toPairsIn",
  "html":"<div data-render-page=\"entry\"><h2>toPairsIn <a class=\"fa-link\" href=\"./toPairsIn\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L11749\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.topairsin\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.toPairsIn(object)</div>\n\n<div data-render-html=\"/toPairsIn\"><p>创建一个对象自身和继承的可枚举属性的键值对数组。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">object</span> <span class=\"param-type\">(Object)</span> <div data-render-html=\"/#synthetic\"><p>要检索的对象 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Array)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回键值对的数组</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token keyword\" >function</span> <span class=\"token function\" >Foo</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span>\n  <span class=\"token keyword\" >this</span><span class=\"token punctuation\" >.</span>a <span class=\"token operator\" >=</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >;</span>\n  <span class=\"token keyword\" >this</span><span class=\"token punctuation\" >.</span>b <span class=\"token operator\" >=</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >;</span>\n<span class=\"token punctuation\" >}</span>\n\nFoo<span class=\"token punctuation\" >.</span>prototype<span class=\"token punctuation\" >.</span>c <span class=\"token operator\" >=</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >;</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >toPairsIn</span><span class=\"token punctuation\" >(</span><span class=\"token keyword\" >new</span> <span class=\"token class-name\" >Foo</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => [['a', 1], ['b', 2], ['c', 1]] (无法保证遍历的顺序)</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/transform",
  "html":"<div data-render-page=\"entry\"><h2>transform <a class=\"fa-link\" href=\"./transform\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L11780\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.transform\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.transform(object, [iteratee&#x3D;_.identity], [accumulator])</div>\n\n<div data-render-html=\"/transform\"><p><code>_.reduce</code> 的代替方法。\n这个方法会改变对象为一个新的 <code>accumulator</code> 对象，来自每一次经 <code>iteratee</code> 处理自身可枚举对象的结果。\n每次调用可能会改变 <code>accumulator</code> 对象。\niteratee 会传入4个对象：(accumulator, value, key, object)。\n如果返回 <code>false</code>，iteratee 会提前退出。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">object</span> <span class=\"param-type\">(Array|Object)</span> <div data-render-html=\"/#synthetic\"><p>要遍历的对象 </p>\n</div></li>\n<li><span class=\"param-name\">[iteratee&#x3D;_.identity]</span> <span class=\"param-type\">(Function)</span> <div data-render-html=\"/#synthetic\"><p>这个函数会处理每一个元素 </p>\n</div></li>\n<li><span class=\"param-name\">[accumulator]</span> <span class=\"param-type\">(*)</span> <div data-render-html=\"/#synthetic\"><p>定制叠加的值 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(*)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回叠加后的值</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >transform</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >4</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> <span class=\"token keyword\" >function</span><span class=\"token punctuation\" >(</span>result<span class=\"token punctuation\" >,</span> n<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span>\n  result<span class=\"token punctuation\" >.</span><span class=\"token function\" >push</span><span class=\"token punctuation\" >(</span>n <span class=\"token operator\" >*</span><span class=\"token operator\" >=</span> n<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n  <span class=\"token keyword\" >return</span> n <span class=\"token operator\" >%</span> <span class=\"token number\" >2</span> <span class=\"token operator\" >==</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >;</span>\n<span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >[</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => [4, 9]</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >transform</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> <span class=\"token string\" >'a'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'b'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'c'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span> <span class=\"token keyword\" >function</span><span class=\"token punctuation\" >(</span>result<span class=\"token punctuation\" >,</span> value<span class=\"token punctuation\" >,</span> key<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span>\n  <span class=\"token punctuation\" >(</span>result<span class=\"token punctuation\" >[</span>value<span class=\"token punctuation\" >]</span> <span class=\"token operator\" >||</span> <span class=\"token punctuation\" >(</span>result<span class=\"token punctuation\" >[</span>value<span class=\"token punctuation\" >]</span> <span class=\"token operator\" >=</span> <span class=\"token punctuation\" >[</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >push</span><span class=\"token punctuation\" >(</span>key<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >{</span><span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => { '1': ['a', 'c'], '2': ['b'] }</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/unset",
  "html":"<div data-render-page=\"entry\"><h2>unset <a class=\"fa-link\" href=\"./unset\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L11828\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.unset\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.unset(object, path)</div>\n\n<div data-render-html=\"/unset\"><p>移除对象路径的属性。\n <strong>注意:</strong> 这个方法会改变源对象</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">object</span> <span class=\"param-type\">(Object)</span> <div data-render-html=\"/#synthetic\"><p>要修改的对象 </p>\n</div></li>\n<li><span class=\"param-name\">path</span> <span class=\"param-type\">(Array|string)</span> <div data-render-html=\"/#synthetic\"><p>要移除的对象路径 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(boolean)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 移除成功返回 <code>true</code>，否则返回 <code>false</code></p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token keyword\" >var</span> object <span class=\"token operator\" >=</span> <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'a'</span><span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >[</span><span class=\"token punctuation\" >{</span> <span class=\"token string\" >'b'</span><span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'c'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >7</span> <span class=\"token punctuation\" >}</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >]</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >;</span>\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >unset</span><span class=\"token punctuation\" >(</span>object<span class=\"token punctuation\" >,</span> <span class=\"token string\" >'a[0].b.c'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => true</span>\n\nconsole<span class=\"token punctuation\" >.</span><span class=\"token function\" >log</span><span class=\"token punctuation\" >(</span>object<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => { 'a': [{ 'b': {} }] };</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >unset</span><span class=\"token punctuation\" >(</span>object<span class=\"token punctuation\" >,</span> <span class=\"token string\" >'a[0].b.c'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => true</span>\n\nconsole<span class=\"token punctuation\" >.</span><span class=\"token function\" >log</span><span class=\"token punctuation\" >(</span>object<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => { 'a': [{ 'b': {} }] };</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/values",
  "html":"<div data-render-page=\"entry\"><h2>values <a class=\"fa-link\" href=\"./values\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L11857\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.values\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.values(object)</div>\n\n<div data-render-html=\"/values\"><p>创建 <code>object</code> 自身可枚举属性的值为数组\n<br>\n<br>\n<strong>注意:</strong> 非对象的值会强制转换为对象</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">object</span> <span class=\"param-type\">(Object)</span> <div data-render-html=\"/#synthetic\"><p>要检索的对象 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Array)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回对象属性的值的数组</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token keyword\" >function</span> <span class=\"token function\" >Foo</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span>\n  <span class=\"token keyword\" >this</span><span class=\"token punctuation\" >.</span>a <span class=\"token operator\" >=</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >;</span>\n  <span class=\"token keyword\" >this</span><span class=\"token punctuation\" >.</span>b <span class=\"token operator\" >=</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >;</span>\n<span class=\"token punctuation\" >}</span>\n\nFoo<span class=\"token punctuation\" >.</span>prototype<span class=\"token punctuation\" >.</span>c <span class=\"token operator\" >=</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >;</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >values</span><span class=\"token punctuation\" >(</span><span class=\"token keyword\" >new</span> <span class=\"token class-name\" >Foo</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => [1, 2] (无法保证遍历的顺序)</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >values</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'hi'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => ['h', 'i']</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/valuesIn",
  "html":"<div data-render-page=\"entry\"><h2>valuesIn <a class=\"fa-link\" href=\"./valuesIn\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L11883\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.valuesin\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.valuesIn(object)</div>\n\n<div data-render-html=\"/valuesIn\"><p>创建 <code>object</code> 自身和继承的可枚举属性的值为数组\n<br>\n<br>\n<strong>注意:</strong> 非对象的值会强制转换为对象</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">object</span> <span class=\"param-type\">(Object)</span> <div data-render-html=\"/#synthetic\"><p>要检索的对象 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Array)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> Returns the array of property values.</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token keyword\" >function</span> <span class=\"token function\" >Foo</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span>\n  <span class=\"token keyword\" >this</span><span class=\"token punctuation\" >.</span>a <span class=\"token operator\" >=</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >;</span>\n  <span class=\"token keyword\" >this</span><span class=\"token punctuation\" >.</span>b <span class=\"token operator\" >=</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >;</span>\n<span class=\"token punctuation\" >}</span>\n\nFoo<span class=\"token punctuation\" >.</span>prototype<span class=\"token punctuation\" >.</span>c <span class=\"token operator\" >=</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >;</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >valuesIn</span><span class=\"token punctuation\" >(</span><span class=\"token keyword\" >new</span> <span class=\"token class-name\" >Foo</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => [1, 2, 3] (无法保证遍历的顺序)</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/templateSettings",
  "html":"<div data-render-page=\"entry\"><h2>templateSettings <a class=\"fa-link\" href=\"./templateSettings\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L1538\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.templatesettings\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.templateSettings</div>\n\n<div data-render-html=\"/templateSettings\"><p>(Object): 默认情况下，这些都是用于处理lodash的模板，类似 Ruby 的嵌入式 (ERB)。\n可以改变接下来的设置用新的方式代替。</p>\n</div>\n\n</div>" }
,{ "href":"/templateSettings-escape",
  "html":"<div data-render-page=\"entry\"><h2>templateSettings.escape <a class=\"fa-link\" href=\"./templateSettings-escape\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L1546\" title=\"View in source.\" target=\"github\">source</a> </h2>\n<div class=\"signature\">_.templateSettings.escape</div>\n\n<div data-render-html=\"/templateSettings-escape\"><p>(RegExp): 用于检测要进行HTML转义 <code>data</code> 的属性值。</p>\n</div>\n\n</div>" }
,{ "href":"/templateSettings-evaluate",
  "html":"<div data-render-page=\"entry\"><h2>templateSettings.evaluate <a class=\"fa-link\" href=\"./templateSettings-evaluate\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L1554\" title=\"View in source.\" target=\"github\">source</a> </h2>\n<div class=\"signature\">_.templateSettings.evaluate</div>\n\n<div data-render-html=\"/templateSettings-evaluate\"><p>(RegExp): 用于检测表达式代码</p>\n</div>\n\n</div>" }
,{ "href":"/templateSettings-imports",
  "html":"<div data-render-page=\"entry\"><h2>templateSettings.imports <a class=\"fa-link\" href=\"./templateSettings-imports\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L1578\" title=\"View in source.\" target=\"github\">source</a> </h2>\n<div class=\"signature\">_.templateSettings.imports</div>\n\n<div data-render-html=\"/templateSettings-imports\"><p>(Object): 用于导入变量到编译模板</p>\n</div>\n\n</div>" }
,{ "href":"/templateSettings-interpolate",
  "html":"<div data-render-page=\"entry\"><h2>templateSettings.interpolate <a class=\"fa-link\" href=\"./templateSettings-interpolate\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L1562\" title=\"View in source.\" target=\"github\">source</a> </h2>\n<div class=\"signature\">_.templateSettings.interpolate</div>\n\n<div data-render-html=\"/templateSettings-interpolate\"><p>(RegExp): 用于检测要插入的 <code>data</code> 的属性值。</p>\n</div>\n\n</div>" }
,{ "href":"/templateSettings-variable",
  "html":"<div data-render-page=\"entry\"><h2>templateSettings.variable <a class=\"fa-link\" href=\"./templateSettings-variable\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L1570\" title=\"View in source.\" target=\"github\">source</a> </h2>\n<div class=\"signature\">_.templateSettings.variable</div>\n\n<div data-render-html=\"/templateSettings-variable\"><p>(string): 用于引用模板文本中的 <code>data</code> 对象</p>\n</div>\n\n</div>" }
,{ "href":"/VERSION",
  "html":"<div data-render-page=\"entry\"><h2>VERSION <a class=\"fa-link\" href=\"./VERSION\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L14473\" title=\"View in source.\" target=\"github\">source</a> </h2>\n<div class=\"signature\">_.VERSION</div>\n\n<div data-render-html=\"/VERSION\"><p>(string): 语义化版本号</p>\n</div>\n\n</div>" }
,{ "href":"/_",
  "html":"<div data-render-page=\"entry\"><h2>_ <a class=\"fa-link\" href=\"./_\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L1494\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash._\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_(value)</div>\n\n<div data-render-html=\"/_\"><p>创建一个经 <code>lodash</code> 包装后的对象会启用隐式链。返回的数组、集合、方法相互之间能够链式调用。\n检索唯一值或返回原始值会自动解除链条并返回计算后的值，否则需要调用 <code>_#value</code> 方法解除链(即获得计算结果)。\n<br>\n<br>\n显式链式调用，在任何情况下需要先用 <code>_#value</code> 解除链后，才能使用 <code>_.chain</code> 开启。\n<br>\n<br>\n链式方法是惰性计算的，直到隐式或者显式调用了 <code>_#value</code> 才会执行计算。\n<br>\n<br>\n惰性计算接受几种支持 shortcut fusion 的方法，\nshortcut fusion 是一种通过合并链式 iteratee 调用从而大大降低迭代的次数以提高执行性能的方式。\n部分链有资格 shortcut fusion，如果它至少有超过二百个元素的数组和任何只接受一个参数的 iteratees。\n触发的方式是任何一个 shortcut fusion 有了变化。\n<br>\n<br>\n链式方法支持定制版本，只要 <code>_#value</code> 包含或者间接包含在版本中。\n<br>\n<br>\n除了 lodash 的自身方法，包装后的对象还支持  <code>Array</code> 的 <code>String</code> 的方法。\n<br>\n<br>\n支持 <code>Array</code> 的方法:<br>\n<code>concat</code>, <code>join</code>, <code>pop</code>, <code>push</code>, <code>shift</code>, <code>sort</code>, <code>splice</code>, 以及 <code>unshift</code>\n<br>\n<br>\n支持 <code>String</code> 的方法:<br>\n<code>replace</code> 以及 <code>split</code>\n<br>\n<br>\n支持 shortcut fusion 的方法:<br>\n<code>at</code>, <code>compact</code>, <code>drop</code>, <code>dropRight</code>, <code>dropWhile</code>, <code>filter</code>, <code>find</code>,\n<code>findLast</code>, <code>head</code>, <code>initial</code>, <code>last</code>, <code>map</code>, <code>reject</code>, <code>reverse</code>, <code>slice</code>,\n<code>tail</code>, <code>take</code>, <code>takeRight</code>, <code>takeRightWhile</code>, <code>takeWhile</code>, 以及 <code>toArray</code>\n<br>\n<br>\n默认不支持 链式调用 的方法:<br>\n<code>add</code>, <code>attempt</code>, <code>camelCase</code>, <code>capitalize</code>, <code>ceil</code>, <code>clamp</code>, <code>clone</code>,\n<code>cloneDeep</code>, <code>cloneDeepWith</code>, <code>cloneWith</code>, <code>deburr</code>, <code>endsWith</code>, <code>eq</code>,\n<code>escape</code>, <code>escapeRegExp</code>, <code>every</code>, <code>find</code>, <code>findIndex</code>, <code>findKey</code>, <code>findLast</code>,\n<code>findLastIndex</code>, <code>findLastKey</code>, <code>floor</code>, <code>forEach</code>, <code>forEachRight</code>, <code>forIn</code>,\n<code>forInRight</code>, <code>forOwn</code>, <code>forOwnRight</code>, <code>get</code>, <code>gt</code>, <code>gte</code>, <code>has</code>, <code>hasIn</code>,\n<code>head</code>, <code>identity</code>, <code>includes</code>, <code>indexOf</code>, <code>inRange</code>, <code>invoke</code>, <code>isArguments</code>,\n<code>isArray</code>, <code>isArrayBuffer</code>, <code>isArrayLike</code>, <code>isArrayLikeObject</code>, <code>isBoolean</code>,\n<code>isBuffer</code>, <code>isDate</code>, <code>isElement</code>, <code>isEmpty</code>, <code>isEqual</code>, <code>isEqualWith</code>,\n<code>isError</code>, <code>isFinite</code>, <code>isFunction</code>, <code>isInteger</code>, <code>isLength</code>, <code>isMap</code>,\n<code>isMatch</code>, <code>isMatchWith</code>, <code>isNaN</code>, <code>isNative</code>, <code>isNil</code>, <code>isNull</code>, <code>isNumber</code>,\n<code>isObject</code>, <code>isObjectLike</code>, <code>isPlainObject</code>, <code>isRegExp</code>, <code>isSafeInteger</code>,\n<code>isSet</code>, <code>isString</code>, <code>isUndefined</code>, <code>isTypedArray</code>, <code>isWeakMap</code>, <code>isWeakSet</code>,\n<code>join</code>, <code>kebabCase</code>, <code>last</code>, <code>lastIndexOf</code>, <code>lowerCase</code>, <code>lowerFirst</code>,\n<code>lt</code>, <code>lte</code>, <code>max</code>, <code>maxBy</code>, <code>mean</code>, <code>min</code>, <code>minBy</code>, <code>noConflict</code>, <code>noop</code>,\n<code>now</code>, <code>pad</code>, <code>padEnd</code>, <code>padStart</code>, <code>parseInt</code>, <code>pop</code>, <code>random</code>, <code>reduce</code>,\n<code>reduceRight</code>, <code>repeat</code>, <code>result</code>, <code>round</code>, <code>runInContext</code>, <code>sample</code>,\n<code>shift</code>, <code>size</code>, <code>snakeCase</code>, <code>some</code>, <code>sortedIndex</code>, <code>sortedIndexBy</code>,\n<code>sortedLastIndex</code>, <code>sortedLastIndexBy</code>, <code>startCase</code>, <code>startsWith</code>, <code>subtract</code>,\n<code>sum</code>, <code>sumBy</code>, <code>template</code>, <code>times</code>, <code>toLower</code>, <code>toInteger</code>, <code>toLength</code>,\n<code>toNumber</code>, <code>toSafeInteger</code>, <code>toString</code>, <code>toUpper</code>, <code>trim</code>, <code>trimEnd</code>,\n<code>trimStart</code>, <code>truncate</code>, <code>unescape</code>, <code>uniqueId</code>, <code>upperCase</code>, <code>upperFirst</code>,\n<code>value</code>, 以及 <code>words</code>\n<br>\n<br>\n支持 链式调用 的方法:<br>\n<code>after</code>, <code>ary</code>, <code>assign</code>, <code>assignIn</code>, <code>assignInWith</code>, <code>assignWith</code>, <code>at</code>,\n<code>before</code>, <code>bind</code>, <code>bindAll</code>, <code>bindKey</code>, <code>castArray</code>, <code>chain</code>, <code>chunk</code>,\n<code>commit</code>, <code>compact</code>, <code>concat</code>, <code>conforms</code>, <code>constant</code>, <code>countBy</code>, <code>create</code>,\n<code>curry</code>, <code>debounce</code>, <code>defaults</code>, <code>defaultsDeep</code>, <code>defer</code>, <code>delay</code>, <code>difference</code>,\n<code>differenceBy</code>, <code>differenceWith</code>, <code>drop</code>, <code>dropRight</code>, <code>dropRightWhile</code>,\n<code>dropWhile</code>, <code>fill</code>, <code>filter</code>, <code>flatten</code>, <code>flattenDeep</code>, <code>flattenDepth</code>,\n<code>flip</code>, <code>flow</code>, <code>flowRight</code>, <code>fromPairs</code>, <code>functions</code>, <code>functionsIn</code>,\n<code>groupBy</code>, <code>initial</code>, <code>intersection</code>, <code>intersectionBy</code>, <code>intersectionWith</code>,\n<code>invert</code>, <code>invertBy</code>, <code>invokeMap</code>, <code>iteratee</code>, <code>keyBy</code>, <code>keys</code>, <code>keysIn</code>,\n<code>map</code>, <code>mapKeys</code>, <code>mapValues</code>, <code>matches</code>, <code>matchesProperty</code>, <code>memoize</code>,\n<code>merge</code>, <code>mergeWith</code>, <code>method</code>, <code>methodOf</code>, <code>mixin</code>, <code>negate</code>, <code>nthArg</code>,\n<code>omit</code>, <code>omitBy</code>, <code>once</code>, <code>orderBy</code>, <code>over</code>, <code>overArgs</code>, <code>overEvery</code>,\n<code>overSome</code>, <code>partial</code>, <code>partialRight</code>, <code>partition</code>, <code>pick</code>, <code>pickBy</code>, <code>plant</code>,\n<code>property</code>, <code>propertyOf</code>, <code>pull</code>, <code>pullAll</code>, <code>pullAllBy</code>, <code>pullAt</code>, <code>push</code>,\n<code>range</code>, <code>rangeRight</code>, <code>rearg</code>, <code>reject</code>, <code>remove</code>, <code>rest</code>, <code>reverse</code>,\n<code>sampleSize</code>, <code>set</code>, <code>setWith</code>, <code>shuffle</code>, <code>slice</code>, <code>sort</code>, <code>sortBy</code>,\n<code>splice</code>, <code>spread</code>, <code>tail</code>, <code>take</code>, <code>takeRight</code>, <code>takeRightWhile</code>,\n<code>takeWhile</code>, <code>tap</code>, <code>throttle</code>, <code>thru</code>, <code>toArray</code>, <code>toPairs</code>, <code>toPairsIn</code>,\n<code>toPath</code>, <code>toPlainObject</code>, <code>transform</code>, <code>unary</code>, <code>union</code>, <code>unionBy</code>,\n<code>unionWith</code>, <code>uniq</code>, <code>uniqBy</code>, <code>uniqWith</code>, <code>unset</code>, <code>unshift</code>, <code>unzip</code>,\n<code>unzipWith</code>, <code>values</code>, <code>valuesIn</code>, <code>without</code>, <code>wrap</code>, <code>xor</code>, <code>xorBy</code>,\n<code>xorWith</code>, <code>zip</code>, <code>zipObject</code>, <code>zipObjectDeep</code>, 以及 <code>zipWith</code></p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">value</span> <span class=\"param-type\">(*)</span> <div data-render-html=\"/#synthetic\"><p>需要被包装为 <code>lodash</code> 实例的值. </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Object)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回 <code>lodash</code> 包装后的实例</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token keyword\" >function</span> <span class=\"token function\" >square</span><span class=\"token punctuation\" >(</span>n<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span>\n  <span class=\"token keyword\" >return</span> n <span class=\"token operator\" >*</span> n<span class=\"token punctuation\" >;</span>\n<span class=\"token punctuation\" >}</span>\n\n<span class=\"token keyword\" >var</span> wrapped <span class=\"token operator\" >=</span> <span class=\"token function\" >_</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 返回未包装的值</span>\nwrapped<span class=\"token punctuation\" >.</span><span class=\"token function\" >reduce</span><span class=\"token punctuation\" >(</span>_<span class=\"token punctuation\" >.</span>add<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 6</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 返回链式包装的值</span>\n<span class=\"token keyword\" >var</span> squares <span class=\"token operator\" >=</span> wrapped<span class=\"token punctuation\" >.</span><span class=\"token function\" >map</span><span class=\"token punctuation\" >(</span>square<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >isArray</span><span class=\"token punctuation\" >(</span>squares<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => false</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >isArray</span><span class=\"token punctuation\" >(</span>squares<span class=\"token punctuation\" >.</span><span class=\"token function\" >value</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => true</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/chain",
  "html":"<div data-render-page=\"entry\"><h2>chain <a class=\"fa-link\" href=\"./chain\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L7163\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.chain\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.chain(value)</div>\n\n<div data-render-html=\"/chain\"><p>创建一个经 <code>lodash</code> 包装的对象以启用显式链模式，要解除链必须使用 <code>_#value</code> 方法。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">value</span> <span class=\"param-type\">(*)</span> <div data-render-html=\"/#synthetic\"><p>要包装的值 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Object)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回 <code>lodash</code> 包装的实例</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token keyword\" >var</span> users <span class=\"token operator\" >=</span> <span class=\"token punctuation\" >[</span>\n  <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'user'</span><span class=\"token punctuation\" >:</span> <span class=\"token string\" >'barney'</span><span class=\"token punctuation\" >,</span>  <span class=\"token string\" >'age'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >36</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'user'</span><span class=\"token punctuation\" >:</span> <span class=\"token string\" >'fred'</span><span class=\"token punctuation\" >,</span>    <span class=\"token string\" >'age'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >40</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'user'</span><span class=\"token punctuation\" >:</span> <span class=\"token string\" >'pebbles'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'age'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span> <span class=\"token punctuation\" >}</span>\n<span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >;</span>\n\n<span class=\"token keyword\" >var</span> youngest <span class=\"token operator\" >=</span> _\n  <span class=\"token punctuation\" >.</span><span class=\"token function\" >chain</span><span class=\"token punctuation\" >(</span>users<span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span><span class=\"token function\" >sortBy</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'age'</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span><span class=\"token function\" >map</span><span class=\"token punctuation\" >(</span><span class=\"token keyword\" >function</span><span class=\"token punctuation\" >(</span>o<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span>\n    <span class=\"token keyword\" >return</span> o<span class=\"token punctuation\" >.</span>user <span class=\"token operator\" >+</span> <span class=\"token string\" >' is '</span> <span class=\"token operator\" >+</span> o<span class=\"token punctuation\" >.</span>age<span class=\"token punctuation\" >;</span>\n  <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span><span class=\"token function\" >head</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span><span class=\"token function\" >value</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 'pebbles is 1'</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/prototype-at",
  "html":"<div data-render-page=\"entry\"><h2>prototype.at <a class=\"fa-link\" href=\"./prototype-at\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L7238\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.prototype.at\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.prototype.at([paths])</div>\n\n<div data-render-html=\"/prototype-at\"><p>这个方法是 <code>_.at</code> 的包装版本</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">[paths]</span> <span class=\"param-type\">(...(string|string[])</span> <div data-render-html=\"/#synthetic\"><p>要选择元素的属性路径， 单独指定或者数组 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Object)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回 <code>lodash</code> 的包装实例</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token keyword\" >var</span> object <span class=\"token operator\" >=</span> <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'a'</span><span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >[</span><span class=\"token punctuation\" >{</span> <span class=\"token string\" >'b'</span><span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'c'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >3</span> <span class=\"token punctuation\" >}</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >4</span><span class=\"token punctuation\" >]</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >;</span>\n\n<span class=\"token function\" >_</span><span class=\"token punctuation\" >(</span>object<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >at</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token string\" >'a[0].b.c'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'a[1]'</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >value</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => [3, 4]</span>\n\n<span class=\"token function\" >_</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token string\" >'a'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'b'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'c'</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >at</span><span class=\"token punctuation\" >(</span><span class=\"token number\" >0</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >value</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => ['a', 'c']</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/prototype-chain",
  "html":"<div data-render-page=\"entry\"><h2>prototype.chain <a class=\"fa-link\" href=\"./prototype-chain\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L7286\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.prototype.chain\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.prototype.chain()</div>\n\n<div data-render-html=\"/prototype-chain\"><p>开启包装对象的显式链。</p>\n</div>\n\n<h3>返回值 <span class=\"return-type\">(Object)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回 <code>lodash</code> 的包装实例</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token keyword\" >var</span> users <span class=\"token operator\" >=</span> <span class=\"token punctuation\" >[</span>\n  <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'user'</span><span class=\"token punctuation\" >:</span> <span class=\"token string\" >'barney'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'age'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >36</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'user'</span><span class=\"token punctuation\" >:</span> <span class=\"token string\" >'fred'</span><span class=\"token punctuation\" >,</span>   <span class=\"token string\" >'age'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >40</span> <span class=\"token punctuation\" >}</span>\n<span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 不启用显式链</span>\n<span class=\"token function\" >_</span><span class=\"token punctuation\" >(</span>users<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >head</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => { 'user': 'barney', 'age': 36 }</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 启用显式链</span>\n<span class=\"token function\" >_</span><span class=\"token punctuation\" >(</span>users<span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span><span class=\"token function\" >chain</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span><span class=\"token function\" >head</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span><span class=\"token function\" >pick</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'user'</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span><span class=\"token function\" >value</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => { 'user': 'barney' }</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/prototype-commit",
  "html":"<div data-render-page=\"entry\"><h2>prototype.commit <a class=\"fa-link\" href=\"./prototype-commit\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L7315\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.prototype.commit\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.prototype.commit()</div>\n\n<div data-render-html=\"/prototype-commit\"><p>执行链式队列并返回结果</p>\n</div>\n\n<h3>返回值 <span class=\"return-type\">(Object)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回 <code>lodash</code> 的包装实例</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token keyword\" >var</span> array <span class=\"token operator\" >=</span> <span class=\"token punctuation\" >[</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >;</span>\n<span class=\"token keyword\" >var</span> wrapped <span class=\"token operator\" >=</span> <span class=\"token function\" >_</span><span class=\"token punctuation\" >(</span>array<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >push</span><span class=\"token punctuation\" >(</span><span class=\"token number\" >3</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n\nconsole<span class=\"token punctuation\" >.</span><span class=\"token function\" >log</span><span class=\"token punctuation\" >(</span>array<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => [1, 2]</span>\n\nwrapped <span class=\"token operator\" >=</span> wrapped<span class=\"token punctuation\" >.</span><span class=\"token function\" >commit</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\nconsole<span class=\"token punctuation\" >.</span><span class=\"token function\" >log</span><span class=\"token punctuation\" >(</span>array<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => [1, 2, 3]</span>\n\nwrapped<span class=\"token punctuation\" >.</span><span class=\"token function\" >last</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 3</span>\n\nconsole<span class=\"token punctuation\" >.</span><span class=\"token function\" >log</span><span class=\"token punctuation\" >(</span>array<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => [1, 2, 3]</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/prototype-next",
  "html":"<div data-render-page=\"entry\"><h2>prototype.next <a class=\"fa-link\" href=\"./prototype-next\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L7361\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.prototype.next\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.prototype.next()</div>\n\n<div data-render-html=\"/prototype-next\"><p>获得包装对象的下一个值，遵循 <a href=\"https://mdn.io/iteration_protocols#iterator\" target=\"_blank\">iterator 协议</a>。</p>\n</div>\n\n<h3>返回值 <span class=\"return-type\">(Object)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回下一个 iterator 值</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token keyword\" >var</span> wrapped <span class=\"token operator\" >=</span> <span class=\"token function\" >_</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n\nwrapped<span class=\"token punctuation\" >.</span><span class=\"token function\" >next</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => { 'done': false, 'value': 1 }</span>\n\nwrapped<span class=\"token punctuation\" >.</span><span class=\"token function\" >next</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => { 'done': false, 'value': 2 }</span>\n\nwrapped<span class=\"token punctuation\" >.</span><span class=\"token function\" >next</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => { 'done': true, 'value': undefined }</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/prototype-plant",
  "html":"<div data-render-page=\"entry\"><h2>prototype.plant <a class=\"fa-link\" href=\"./prototype-plant\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L7415\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.prototype.plant\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.prototype.plant(value)</div>\n\n<div data-render-html=\"/prototype-plant\"><p>创建一个链式队列的拷贝，传入的值作为链式队列的值。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">value</span> <span class=\"param-type\">(*)</span> <div data-render-html=\"/#synthetic\"><p>替换原值的值 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Object)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回 <code>lodash</code> 的包装实例</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token keyword\" >function</span> <span class=\"token function\" >square</span><span class=\"token punctuation\" >(</span>n<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span>\n  <span class=\"token keyword\" >return</span> n <span class=\"token operator\" >*</span> n<span class=\"token punctuation\" >;</span>\n<span class=\"token punctuation\" >}</span>\n\n<span class=\"token keyword\" >var</span> wrapped <span class=\"token operator\" >=</span> <span class=\"token function\" >_</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >map</span><span class=\"token punctuation\" >(</span>square<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token keyword\" >var</span> other <span class=\"token operator\" >=</span> wrapped<span class=\"token punctuation\" >.</span><span class=\"token function\" >plant</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token number\" >3</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >4</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n\nother<span class=\"token punctuation\" >.</span><span class=\"token function\" >value</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => [9, 16]</span>\n\nwrapped<span class=\"token punctuation\" >.</span><span class=\"token function\" >value</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => [1, 4]</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/prototype-Symbol-iterator",
  "html":"<div data-render-page=\"entry\"><h2>prototype.Symbol.iterator <a class=\"fa-link\" href=\"./prototype-Symbol-iterator\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L7388\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.prototype.symbol.iterator\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.prototype.Symbol.iterator()</div>\n\n<div data-render-html=\"/prototype-Symbol-iterator\"><p>启用包装对象为 iterable。</p>\n</div>\n\n<h3>返回值 <span class=\"return-type\">(Object)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回包装对象</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token keyword\" >var</span> wrapped <span class=\"token operator\" >=</span> <span class=\"token function\" >_</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n\nwrapped<span class=\"token punctuation\" >[</span>Symbol<span class=\"token punctuation\" >.</span>iterator<span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span> <span class=\"token operator\" >===</span> wrapped<span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => true</span>\n\nArray<span class=\"token punctuation\" >.</span><span class=\"token keyword\" >from</span><span class=\"token punctuation\" >(</span>wrapped<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => [1, 2]</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/prototype-value",
  "html":"<div data-render-page=\"entry\"><h2>prototype.value <span class=\"aliases\">run, toJSON, valueOf</span> <a class=\"fa-link\" href=\"./prototype-value\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L7481\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.prototype.value\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.prototype.value()</div>\n\n<div data-render-html=\"/prototype-value\"><p>执行链式队列并提取解链后的值</p>\n</div>\n\n<h3>返回值 <span class=\"return-type\">(*)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回解链后的值</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token function\" >_</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >value</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => [1, 2, 3]</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/tap",
  "html":"<div data-render-page=\"entry\"><h2>tap <a class=\"fa-link\" href=\"./tap\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L7190\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.tap\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.tap(value, interceptor)</div>\n\n<div data-render-html=\"/tap\"><p>这个方法调用一个 <code>interceptor</code> 并返回 <code>value</code>。<code>interceptor</code> 传入一个参数：(value)\n目的是 <code>进入</code> 链的中间以便执行操作。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">value</span> <span class=\"param-type\">(*)</span> <div data-render-html=\"/#synthetic\"><p>提供给 <code>interceptor</code> 的值 </p>\n</div></li>\n<li><span class=\"param-name\">interceptor</span> <span class=\"param-type\">(Function)</span> <div data-render-html=\"/#synthetic\"><p>调用函数 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(*)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回 <code>value</code></p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token function\" >_</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span>\n <span class=\"token punctuation\" >.</span><span class=\"token function\" >tap</span><span class=\"token punctuation\" >(</span><span class=\"token keyword\" >function</span><span class=\"token punctuation\" >(</span>array<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span>\n   <span class=\"token comment\" spellcheck=\"true\">// 改变传入的数组</span>\n   array<span class=\"token punctuation\" >.</span><span class=\"token function\" >pop</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span>\n <span class=\"token punctuation\" >.</span><span class=\"token function\" >reverse</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span>\n <span class=\"token punctuation\" >.</span><span class=\"token function\" >value</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => [2, 1]</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/thru",
  "html":"<div data-render-page=\"entry\"><h2>thru <a class=\"fa-link\" href=\"./thru\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L7215\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.thru\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.thru(value, interceptor)</div>\n\n<div data-render-html=\"/thru\"><p>这个方法类似 <code>_.tap</code>， 除了它返回 <code>interceptor</code> 的返回结果</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">value</span> <span class=\"param-type\">(*)</span> <div data-render-html=\"/#synthetic\"><p>提供给 <code>interceptor</code> 的值 </p>\n</div></li>\n<li><span class=\"param-name\">interceptor</span> <span class=\"param-type\">(Function)</span> <div data-render-html=\"/#synthetic\"><p>调用函数 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(*)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回 <code>interceptor</code> 的返回结果</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token function\" >_</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'  abc  '</span><span class=\"token punctuation\" >)</span>\n <span class=\"token punctuation\" >.</span><span class=\"token function\" >chain</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span>\n <span class=\"token punctuation\" >.</span><span class=\"token function\" >trim</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span>\n <span class=\"token punctuation\" >.</span><span class=\"token function\" >thru</span><span class=\"token punctuation\" >(</span><span class=\"token keyword\" >function</span><span class=\"token punctuation\" >(</span>value<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span>\n   <span class=\"token keyword\" >return</span> <span class=\"token punctuation\" >[</span>value<span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >;</span>\n <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span>\n <span class=\"token punctuation\" >.</span><span class=\"token function\" >value</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => ['abc']</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/wrapperFlatMap",
  "html":"<div data-render-page=\"entry\"><h2>wrapperFlatMap <a class=\"fa-link\" href=\"./wrapperFlatMap\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L7336\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.wrapperflatmap\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.wrapperFlatMap([iteratee&#x3D;_.identity])</div>\n\n<div data-render-html=\"/wrapperFlatMap\"><p>这个方法是 <code>_.flatMap</code> 的包装版本。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">[iteratee&#x3D;_.identity]</span> <span class=\"param-type\">(Function|Object|string)</span> <div data-render-html=\"/#synthetic\"><p>这个函数会处理每一个元素 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Object)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回 <code>lodash</code> 的包装实例</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token keyword\" >function</span> <span class=\"token function\" >duplicate</span><span class=\"token punctuation\" >(</span>n<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span>\n  <span class=\"token keyword\" >return</span> <span class=\"token punctuation\" >[</span>n<span class=\"token punctuation\" >,</span> n<span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >;</span>\n<span class=\"token punctuation\" >}</span>\n\n<span class=\"token function\" >_</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >flatMap</span><span class=\"token punctuation\" >(</span>duplicate<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >value</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => [1, 1, 2, 2]</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/camelCase",
  "html":"<div data-render-page=\"entry\"><h2>camelCase <a class=\"fa-link\" href=\"./camelCase\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L12058\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.camelcase\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.camelCase([string&#x3D;&#x27;&#x27;])</div>\n\n<div data-render-html=\"/camelCase\"><p>转换字符串为 <a href=\"https://en.wikipedia.org/wiki/CamelCase\" target=\"_blank\">驼峰写法</a></p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">[string&#x3D;&#x27;&#x27;]</span> <span class=\"param-type\">(string)</span> <div data-render-html=\"/#synthetic\"><p>要转换的字符串 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(string)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回驼峰写法的字符串</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >camelCase</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'Foo Bar'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 'fooBar'</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >camelCase</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'--foo-bar'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 'fooBar'</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >camelCase</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'__foo_bar__'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 'fooBar'</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/capitalize",
  "html":"<div data-render-page=\"entry\"><h2>capitalize <a class=\"fa-link\" href=\"./capitalize\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L12076\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.capitalize\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.capitalize([string&#x3D;&#x27;&#x27;])</div>\n\n<div data-render-html=\"/capitalize\"><p>转换字符串首字母为大写，剩下为小写。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">[string&#x3D;&#x27;&#x27;]</span> <span class=\"param-type\">(string)</span> <div data-render-html=\"/#synthetic\"><p>要大写开头的字符串 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(string)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回大写开头的字符串</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >capitalize</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'FRED'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 'Fred'</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/deburr",
  "html":"<div data-render-page=\"entry\"><h2>deburr <a class=\"fa-link\" href=\"./deburr\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L12093\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.deburr\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.deburr([string&#x3D;&#x27;&#x27;])</div>\n\n<div data-render-html=\"/deburr\"><p>转换 <a href=\"https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block\" target=\"_blank\">latin-1 supplementary letters</a>#Character_table) 为基本拉丁字母，并删除<a href=\"https://en.wikipedia.org/wiki/Combining_Diacritical_Marks\" target=\"_blank\">变音符</a>。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">[string&#x3D;&#x27;&#x27;]</span> <span class=\"param-type\">(string)</span> <div data-render-html=\"/#synthetic\"><p>要处理的字符串 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(string)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回处理后的字符串</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >deburr</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'déjà vu'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 'deja vu'</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/endsWith",
  "html":"<div data-render-page=\"entry\"><h2>endsWith <a class=\"fa-link\" href=\"./endsWith\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L12119\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.endswith\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.endsWith([string&#x3D;&#x27;&#x27;], [target], [position&#x3D;string.length])</div>\n\n<div data-render-html=\"/endsWith\"><p>检查给定的字符是否是字符串的结尾</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">[string&#x3D;&#x27;&#x27;]</span> <span class=\"param-type\">(string)</span> <div data-render-html=\"/#synthetic\"><p>要检索的字符串 </p>\n</div></li>\n<li><span class=\"param-name\">[target]</span> <span class=\"param-type\">(string)</span> <div data-render-html=\"/#synthetic\"><p>要检索字符 </p>\n</div></li>\n<li><span class=\"param-name\">[position&#x3D;string.length]</span> <span class=\"param-type\">(number)</span> <div data-render-html=\"/#synthetic\"><p>检索的位置 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(boolean)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 如果是结尾返回 <code>true</code>，否则返回 <code>false</code></p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >endsWith</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'abc'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'c'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => true</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >endsWith</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'abc'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'b'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => false</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >endsWith</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'abc'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'b'</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => true</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/escape",
  "html":"<div data-render-page=\"entry\"><h2>escape <a class=\"fa-link\" href=\"./escape\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L12160\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.escape\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.escape([string&#x3D;&#x27;&#x27;])</div>\n\n<div data-render-html=\"/escape\"><p>转义字符 &quot;&amp;&quot;, &quot;&lt;&quot;, &quot;&gt;&quot;, &#39;&quot;&#39;, &quot;&#39;&quot;, 以及 &quot;`&quot; 为HTML实体字符。\n<br>\n<br>\n<strong>注意:</strong> 不会转义其他字符，如果需要，可以使用第三方库，例如 <a href=\"https://mths.be/he\" target=\"_blank\">_he_</a>。\n<br>\n<br>\n虽然 &quot;&gt;&quot; 是对称转义的，像是 &quot;&gt;&quot; 和 &quot;/&quot; 没有特殊的意义，所以不需要在 HTML 中转义。\n除非它们是标签的一部分，或者是不带引号的属性值。\n查看 <a href=\"https://mathiasbynens.be/notes/ambiguous-ampersands\" target=\"_blank\">Mathias Bynens 的文章</a>\n(under &quot;semi-related fun fact&quot;) 了解详情\n<br>\n<br>\n在 IE &lt; 9 中转义引号，因为会中断属性值或 HTML 注释，查看\n<a href=\"https://html5sec.org/\" target=\"_blank\">HTML5 安全列表</a> 的 <a href=\"https://html5sec.org/#59\" target=\"_blank\">#59</a>,\n<a href=\"https://html5sec.org/#102\" target=\"_blank\">#102</a>, <a href=\"https://html5sec.org/#108\" target=\"_blank\">#108</a>, 以及\n<a href=\"https://html5sec.org/#133\" target=\"_blank\">#133</a> 了解详情\n<br>\n<br>\n当解析为 HTML 时应该总是 <a href=\"http://wonko.com/post/html-escaping\" target=\"_blank\">引用属性值</a>\n以减少 XSS 的可能性。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">[string&#x3D;&#x27;&#x27;]</span> <span class=\"param-type\">(string)</span> <div data-render-html=\"/#synthetic\"><p>要转义的字符串 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(string)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回转义后的字符串</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >escape</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'fred, barney, &amp; pebbles'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 'fred, barney, &amp;amp; pebbles'</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/escapeRegExp",
  "html":"<div data-render-page=\"entry\"><h2>escapeRegExp <a class=\"fa-link\" href=\"./escapeRegExp\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L12181\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.escaperegexp\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.escapeRegExp([string&#x3D;&#x27;&#x27;])</div>\n\n<div data-render-html=\"/escapeRegExp\"><p>转义<code>RegExp</code> 中特殊的字符 &quot;^&quot;, &quot;$&quot;, &quot;\\&quot;, &quot;.&quot;, &quot;*&quot;, &quot;+&quot;,\n&quot;?&quot;, &quot;(&quot;, &quot;)&quot;, &quot;[&quot;, &quot;]&quot;, &quot;{&quot;, &quot;}&quot;, 以及 &quot;|&quot;。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">[string&#x3D;&#x27;&#x27;]</span> <span class=\"param-type\">(string)</span> <div data-render-html=\"/#synthetic\"><p>要转义的字符串 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(string)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回转义后的字符串</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >escapeRegExp</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'[lodash](https://lodash.com/)'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => '\\[lodash\\]\\(https://lodash\\.com/\\)'</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/kebabCase",
  "html":"<div data-render-page=\"entry\"><h2>kebabCase <a class=\"fa-link\" href=\"./kebabCase\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L12207\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.kebabcase\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.kebabCase([string&#x3D;&#x27;&#x27;])</div>\n\n<div data-render-html=\"/kebabCase\"><p>转换字符串为 <a href=\"https://en.wikipedia.org/wiki/Letter_case#Special_case_styles\" target=\"_blank\">kebab case</a>。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">[string&#x3D;&#x27;&#x27;]</span> <span class=\"param-type\">(string)</span> <div data-render-html=\"/#synthetic\"><p>要转换的字符串 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(string)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回转换后的字符串</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >kebabCase</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'Foo Bar'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 'foo-bar'</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >kebabCase</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'fooBar'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 'foo-bar'</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >kebabCase</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'__foo_bar__'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 'foo-bar'</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/lowerCase",
  "html":"<div data-render-page=\"entry\"><h2>lowerCase <a class=\"fa-link\" href=\"./lowerCase\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L12230\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.lowercase\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.lowerCase([string&#x3D;&#x27;&#x27;])</div>\n\n<div data-render-html=\"/lowerCase\"><p>以空格分开单词并转换为小写。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">[string&#x3D;&#x27;&#x27;]</span> <span class=\"param-type\">(string)</span> <div data-render-html=\"/#synthetic\"><p>要转换的字符串 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(string)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回小写的字符串</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >lowerCase</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'--Foo-Bar'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 'foo bar'</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >lowerCase</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'fooBar'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 'foo bar'</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >lowerCase</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'__FOO_BAR__'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 'foo bar'</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/lowerFirst",
  "html":"<div data-render-page=\"entry\"><h2>lowerFirst <a class=\"fa-link\" href=\"./lowerFirst\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L12250\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.lowerfirst\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.lowerFirst([string&#x3D;&#x27;&#x27;])</div>\n\n<div data-render-html=\"/lowerFirst\"><p>转换首字母为小写。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">[string&#x3D;&#x27;&#x27;]</span> <span class=\"param-type\">(string)</span> <div data-render-html=\"/#synthetic\"><p>要转换的字符串 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(string)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回转换后的字符串</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >lowerFirst</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'Fred'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 'fred'</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >lowerFirst</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'FRED'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 'fRED'</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/pad",
  "html":"<div data-render-page=\"entry\"><h2>pad <a class=\"fa-link\" href=\"./pad\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L12292\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.pad\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.pad([string&#x3D;&#x27;&#x27;], [length&#x3D;0], [chars&#x3D;&#x27; &#x27;])</div>\n\n<div data-render-html=\"/pad\"><p>如果字符串长度小于 <code>length</code> 则从左到右填充字符。\n如果没法平均分配，则截断超出的长度。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">[string&#x3D;&#x27;&#x27;]</span> <span class=\"param-type\">(string)</span> <div data-render-html=\"/#synthetic\"><p>要填充的字符串 </p>\n</div></li>\n<li><span class=\"param-name\">[length&#x3D;0]</span> <span class=\"param-type\">(number)</span> <div data-render-html=\"/#synthetic\"><p>填充的长度 </p>\n</div></li>\n<li><span class=\"param-name\">[chars&#x3D;&#x27; &#x27;]</span> <span class=\"param-type\">(string)</span> <div data-render-html=\"/#synthetic\"><p>填充字符 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(string)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回填充后的字符串</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >pad</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'abc'</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >8</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => '  abc   '</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >pad</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'abc'</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >8</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'_-'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => '_-abc_-_'</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >pad</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'abc'</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 'abc'</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/padEnd",
  "html":"<div data-render-page=\"entry\"><h2>padEnd <a class=\"fa-link\" href=\"./padEnd\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L12328\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.padend\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.padEnd([string&#x3D;&#x27;&#x27;], [length&#x3D;0], [chars&#x3D;&#x27; &#x27;])</div>\n\n<div data-render-html=\"/padEnd\"><p>如果字符串长度小于 length 则在右侧填充字符。 如果超出长度则截断超出的部分。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">[string&#x3D;&#x27;&#x27;]</span> <span class=\"param-type\">(string)</span> <div data-render-html=\"/#synthetic\"><p>要填充的字符串 </p>\n</div></li>\n<li><span class=\"param-name\">[length&#x3D;0]</span> <span class=\"param-type\">(number)</span> <div data-render-html=\"/#synthetic\"><p>填充的长度 </p>\n</div></li>\n<li><span class=\"param-name\">[chars&#x3D;&#x27; &#x27;]</span> <span class=\"param-type\">(string)</span> <div data-render-html=\"/#synthetic\"><p>填充字符 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(string)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> Returns 返回填充后的字符串</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >padEnd</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'abc'</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >6</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 'abc   '</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >padEnd</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'abc'</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >6</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'_-'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 'abc_-_'</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >padEnd</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'abc'</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 'abc'</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/padStart",
  "html":"<div data-render-page=\"entry\"><h2>padStart <a class=\"fa-link\" href=\"./padStart\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L12354\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.padstart\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.padStart([string&#x3D;&#x27;&#x27;], [length&#x3D;0], [chars&#x3D;&#x27; &#x27;])</div>\n\n<div data-render-html=\"/padStart\"><p>如果字符串长度小于 length 则在左侧填充字符。 如果超出长度则截断超出的部分。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">[string&#x3D;&#x27;&#x27;]</span> <span class=\"param-type\">(string)</span> <div data-render-html=\"/#synthetic\"><p>要填充的字符串 </p>\n</div></li>\n<li><span class=\"param-name\">[length&#x3D;0]</span> <span class=\"param-type\">(number)</span> <div data-render-html=\"/#synthetic\"><p>填充的长度 </p>\n</div></li>\n<li><span class=\"param-name\">[chars&#x3D;&#x27; &#x27;]</span> <span class=\"param-type\">(string)</span> <div data-render-html=\"/#synthetic\"><p>填充字符 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(string)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> Returns 返回填充后的字符串</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >padStart</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'abc'</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >6</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => '   abc'</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >padStart</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'abc'</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >6</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'_-'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => '_-_abc'</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >padStart</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'abc'</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 'abc'</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/parseInt",
  "html":"<div data-render-page=\"entry\"><h2>parseInt <a class=\"fa-link\" href=\"./parseInt\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L12381\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.parseint\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.parseInt(string, [radix])</div>\n\n<div data-render-html=\"/parseInt\"><p>以指定的基数转换字符串为整数。\n如果基数是 <code>undefined</code> 或者 0，则基数默认是10，如果字符串是16进制，则基数为16。\n<br>\n<br>\n<strong>注意:</strong> 这个方法与 <a href=\"https://es5.github.io/#E\" target=\"_blank\">ES5 implementation</a>\n的 <code>parseInt</code> 一致</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">string</span> <span class=\"param-type\">(string)</span> <div data-render-html=\"/#synthetic\"><p>要转换的字符串 </p>\n</div></li>\n<li><span class=\"param-name\">[radix]</span> <span class=\"param-type\">(number)</span> <div data-render-html=\"/#synthetic\"><p>基数 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(number)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回转换后的整数</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >parseInt</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'08'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 8</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token string\" >'6'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'08'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'10'</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> _<span class=\"token punctuation\" >.</span>parseInt<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => [6, 8, 10]</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/repeat",
  "html":"<div data-render-page=\"entry\"><h2>repeat <a class=\"fa-link\" href=\"./repeat\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L12413\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.repeat\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.repeat([string&#x3D;&#x27;&#x27;], [n&#x3D;0])</div>\n\n<div data-render-html=\"/repeat\"><p>重复 N 次字符串</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">[string&#x3D;&#x27;&#x27;]</span> <span class=\"param-type\">(string)</span> <div data-render-html=\"/#synthetic\"><p>要重复的字符串 </p>\n</div></li>\n<li><span class=\"param-name\">[n&#x3D;0]</span> <span class=\"param-type\">(number)</span> <div data-render-html=\"/#synthetic\"><p>重复的次数 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(string)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回重复的字符串</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >repeat</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'*'</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => '***'</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >repeat</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'abc'</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 'abcabc'</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >repeat</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'abc'</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => ''</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/replace",
  "html":"<div data-render-page=\"entry\"><h2>replace <a class=\"fa-link\" href=\"./replace\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L12451\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.replace\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.replace([string&#x3D;&#x27;&#x27;], pattern)</div>\n\n<div data-render-html=\"/replace\"><p>替换字符串中匹配的内容为给定的内容\n<br>\n<br>\n<strong>注意:</strong> 这个方法基于 <a href=\"https://mdn.io/String/replace\" target=\"_blank\"><code>String#replace</code></a></p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">[string&#x3D;&#x27;&#x27;]</span> <span class=\"param-type\">(string)</span> <div data-render-html=\"/#synthetic\"><p>待替换的字符串 </p>\n</div></li>\n<li><span class=\"param-name\">pattern</span> <span class=\"param-type\">(RegExp|string)</span> <div data-render-html=\"/#synthetic\"><p>要匹配的内容 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(string)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回替换完成的字符串</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >replace</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'Hi Fred'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'Fred'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'Barney'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 'Hi Barney'</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/snakeCase",
  "html":"<div data-render-page=\"entry\"><h2>snakeCase <a class=\"fa-link\" href=\"./snakeCase\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L12477\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.snakecase\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.snakeCase([string&#x3D;&#x27;&#x27;])</div>\n\n<div data-render-html=\"/snakeCase\"><p>转换字符串为 <a href=\"https://en.wikipedia.org/wiki/Snake_case\" target=\"_blank\">snake case</a></p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">[string&#x3D;&#x27;&#x27;]</span> <span class=\"param-type\">(string)</span> <div data-render-html=\"/#synthetic\"><p>要转换的字符串 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(string)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回转换后的字符串</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >snakeCase</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'Foo Bar'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 'foo_bar'</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >snakeCase</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'fooBar'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 'foo_bar'</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >snakeCase</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'--foo-bar'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 'foo_bar'</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/split",
  "html":"<div data-render-page=\"entry\"><h2>split <a class=\"fa-link\" href=\"./split\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L12498\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.split\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.split([string&#x3D;&#x27;&#x27;], [separator], [limit])</div>\n\n<div data-render-html=\"/split\"><p>以 <code>separator</code> 拆分字符串\n<br>\n<br>\n<strong>注意:</strong> 这个方法基于 <a href=\"https://mdn.io/String/split\" target=\"_blank\"><code>String#split</code></a></p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">[string&#x3D;&#x27;&#x27;]</span> <span class=\"param-type\">(string)</span> <div data-render-html=\"/#synthetic\"><p>要拆分的字符串 </p>\n</div></li>\n<li><span class=\"param-name\">[separator]</span> <span class=\"param-type\">(RegExp|string)</span> <div data-render-html=\"/#synthetic\"><p>拆分的分隔符 </p>\n</div></li>\n<li><span class=\"param-name\">[limit]</span> <span class=\"param-type\">(number)</span> <div data-render-html=\"/#synthetic\"><p>限制的数量 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Array)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回拆分部分的字符串的数组</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >split</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'a-b-c'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'-'</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => ['a', 'b']</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/startCase",
  "html":"<div data-render-page=\"entry\"><h2>startCase <a class=\"fa-link\" href=\"./startCase\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L12521\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.startcase\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.startCase([string&#x3D;&#x27;&#x27;])</div>\n\n<div data-render-html=\"/startCase\"><p>转换字符串为 <a href=\"https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage\" target=\"_blank\">start case</a></p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">[string&#x3D;&#x27;&#x27;]</span> <span class=\"param-type\">(string)</span> <div data-render-html=\"/#synthetic\"><p>要转换的字符串 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(string)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回转换后的字符串</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >startCase</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'--foo-bar'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 'Foo Bar'</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >startCase</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'fooBar'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 'Foo Bar'</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >startCase</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'__foo_bar__'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 'Foo Bar'</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/startsWith",
  "html":"<div data-render-page=\"entry\"><h2>startsWith <a class=\"fa-link\" href=\"./startsWith\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L12546\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.startswith\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.startsWith([string&#x3D;&#x27;&#x27;], [target], [position&#x3D;0])</div>\n\n<div data-render-html=\"/startsWith\"><p>检查字符串是否以 <code>target</code> 开头。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">[string&#x3D;&#x27;&#x27;]</span> <span class=\"param-type\">(string)</span> <div data-render-html=\"/#synthetic\"><p>要检索的字符串 </p>\n</div></li>\n<li><span class=\"param-name\">[target]</span> <span class=\"param-type\">(string)</span> <div data-render-html=\"/#synthetic\"><p>要检查的字符串 </p>\n</div></li>\n<li><span class=\"param-name\">[position&#x3D;0]</span> <span class=\"param-type\">(number)</span> <div data-render-html=\"/#synthetic\"><p>检索的位置 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(boolean)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 如果符合条件返回<code>true</code>，否则返回 <code>false</code></p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >startsWith</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'abc'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'a'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => true</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >startsWith</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'abc'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'b'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => false</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >startsWith</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'abc'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'b'</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => true</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/template",
  "html":"<div data-render-page=\"entry\"><h2>template <a class=\"fa-link\" href=\"./template\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L12648\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.template\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.template([string&#x3D;&#x27;&#x27;], [options])</div>\n\n<div data-render-html=\"/template\"><p>创建一个预编译模板方法，可以插入数据到模板中 &quot;interpolate&quot; 分隔符相应的位置。\nHTML会在 &quot;escape&quot; 分隔符中转换为相应实体。\n在 &quot;evaluate&quot; 分隔符中允许执行JavaScript代码。\n在模板中可以自由访问变量。\n如果设置了选项对象，则会优先覆盖 <code>_.templateSettings</code> 的值。\n<br>\n<br>\n<strong>注意:</strong> 在开发过程中可以使用\n<a href=\"http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl\" target=\"_blank\">sourceURLs</a>\n便于调试。\n<br>\n<br>\n了解更多预编译模板的信息查看\n<a href=\"https://lodash.com/custom-builds\" target=\"_blank\">lodash的自定义构建文档</a>\n<br>\n<br>\n了解更多 Chrome 沙箱扩展的信息查看\n<a href=\"https://developer.chrome.com/extensions/sandboxingEval\" target=\"_blank\">Chrome的扩展文档</a></p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">[string&#x3D;&#x27;&#x27;]</span> <span class=\"param-type\">(string)</span> <div data-render-html=\"/#synthetic\"><p>模板字符串 </p>\n</div></li>\n<li><span class=\"param-name\">[options]</span> <span class=\"param-type\">(Object)</span> <div data-render-html=\"/#synthetic\"><p>选项对象 </p>\n</div></li>\n<li><span class=\"param-name\">[options.escape]</span> <span class=\"param-type\">(RegExp)</span> <div data-render-html=\"/#synthetic\"><p>&quot;escape&quot; 分隔符 </p>\n</div></li>\n<li><span class=\"param-name\">[options.evaluate]</span> <span class=\"param-type\">(RegExp)</span> <div data-render-html=\"/#synthetic\"><p>&quot;evaluate&quot; 分隔符 </p>\n</div></li>\n<li><span class=\"param-name\">[options.imports]</span> <span class=\"param-type\">(Object)</span> <div data-render-html=\"/#synthetic\"><p>导入对象到模板中作为自由变量 </p>\n</div></li>\n<li><span class=\"param-name\">[options.interpolate]</span> <span class=\"param-type\">(RegExp)</span> <div data-render-html=\"/#synthetic\"><p>&quot;interpolate&quot; 分隔符 </p>\n</div></li>\n<li><span class=\"param-name\">[options.sourceURL]</span> <span class=\"param-type\">(string)</span> <div data-render-html=\"/#synthetic\"><p>模板编译的来源URL </p>\n</div></li>\n<li><span class=\"param-name\">[options.variable]</span> <span class=\"param-type\">(string)</span> <div data-render-html=\"/#synthetic\"><p>数据对象的变量名 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Function)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回编译模板函数</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token comment\" spellcheck=\"true\">// 使用 \"interpolate\" 分隔符创建编译模板</span>\n<span class=\"token keyword\" >var</span> compiled <span class=\"token operator\" >=</span> _<span class=\"token punctuation\" >.</span><span class=\"token function\" >template</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'hello &lt;%= user %>!'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token function\" >compiled</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> <span class=\"token string\" >'user'</span><span class=\"token punctuation\" >:</span> <span class=\"token string\" >'fred'</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 'hello fred!'</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 使用 HTML \"escape\" 转义数据的值</span>\n<span class=\"token keyword\" >var</span> compiled <span class=\"token operator\" >=</span> _<span class=\"token punctuation\" >.</span><span class=\"token function\" >template</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'&lt;b>&lt;%- value %>&lt;/b>'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token function\" >compiled</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> <span class=\"token string\" >'value'</span><span class=\"token punctuation\" >:</span> <span class=\"token string\" >'&lt;script>'</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => '&lt;b>&amp;lt;script&amp;gt;&lt;/b>'</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 使用 \"evaluate\" 分隔符执行 JavaScript 和 生成HTML代码</span>\n<span class=\"token keyword\" >var</span> compiled <span class=\"token operator\" >=</span> _<span class=\"token punctuation\" >.</span><span class=\"token function\" >template</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'&lt;% _.forEach(users, function(user) { %>&lt;li>&lt;%- user %>&lt;/li>&lt;% }); %>'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token function\" >compiled</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> <span class=\"token string\" >'users'</span><span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >[</span><span class=\"token string\" >'fred'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'barney'</span><span class=\"token punctuation\" >]</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => '&lt;li>fred&lt;/li>&lt;li>barney&lt;/li>'</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 在 \"evaluate\" 分隔符中使用内部的 `print` 函数</span>\n<span class=\"token keyword\" >var</span> compiled <span class=\"token operator\" >=</span> _<span class=\"token punctuation\" >.</span><span class=\"token function\" >template</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'&lt;% print(\"hello \" + user); %>!'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token function\" >compiled</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> <span class=\"token string\" >'user'</span><span class=\"token punctuation\" >:</span> <span class=\"token string\" >'barney'</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 'hello barney!'</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 使用 ES 分隔符代替默认的 \"interpolate\" 分隔符</span>\n<span class=\"token keyword\" >var</span> compiled <span class=\"token operator\" >=</span> _<span class=\"token punctuation\" >.</span><span class=\"token function\" >template</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'hello ${ user }!'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token function\" >compiled</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> <span class=\"token string\" >'user'</span><span class=\"token punctuation\" >:</span> <span class=\"token string\" >'pebbles'</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 'hello pebbles!'</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 使用自定义的模板分隔符</span>\n_<span class=\"token punctuation\" >.</span>templateSettings<span class=\"token punctuation\" >.</span>interpolate <span class=\"token operator\" >=</span> <span class=\"token regex\" >/{{([\\s\\S]+?)}}/g</span><span class=\"token punctuation\" >;</span>\n<span class=\"token keyword\" >var</span> compiled <span class=\"token operator\" >=</span> _<span class=\"token punctuation\" >.</span><span class=\"token function\" >template</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'hello {{ user }}!'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token function\" >compiled</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> <span class=\"token string\" >'user'</span><span class=\"token punctuation\" >:</span> <span class=\"token string\" >'mustache'</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 'hello mustache!'</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 使用反斜杠符号作为纯文本处理</span>\n<span class=\"token keyword\" >var</span> compiled <span class=\"token operator\" >=</span> _<span class=\"token punctuation\" >.</span><span class=\"token function\" >template</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'&lt;%= \"\\\\&lt;%- value %\\\\>\" %>'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token function\" >compiled</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> <span class=\"token string\" >'value'</span><span class=\"token punctuation\" >:</span> <span class=\"token string\" >'ignored'</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => '&lt;%- value %>'</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 使用 `imports` 选项导入 `jq` 作为 `jQuery` 的别名</span>\n<span class=\"token keyword\" >var</span> text <span class=\"token operator\" >=</span> <span class=\"token string\" >'&lt;% jq.each(users, function(user) { %>&lt;li>&lt;%- user %>&lt;/li>&lt;% }); %>'</span><span class=\"token punctuation\" >;</span>\n<span class=\"token keyword\" >var</span> compiled <span class=\"token operator\" >=</span> _<span class=\"token punctuation\" >.</span><span class=\"token function\" >template</span><span class=\"token punctuation\" >(</span>text<span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'imports'</span><span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'jq'</span><span class=\"token punctuation\" >:</span> jQuery <span class=\"token punctuation\" >}</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token function\" >compiled</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> <span class=\"token string\" >'users'</span><span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >[</span><span class=\"token string\" >'fred'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'barney'</span><span class=\"token punctuation\" >]</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => '&lt;li>fred&lt;/li>&lt;li>barney&lt;/li>'</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 使用 `sourceURL` 选项指定模板的来源URL</span>\n<span class=\"token keyword\" >var</span> compiled <span class=\"token operator\" >=</span> _<span class=\"token punctuation\" >.</span><span class=\"token function\" >template</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'hello &lt;%= user %>!'</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'sourceURL'</span><span class=\"token punctuation\" >:</span> <span class=\"token string\" >'/basic/greeting.jst'</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token function\" >compiled</span><span class=\"token punctuation\" >(</span>data<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 在开发工具的 Sources 选项卡 或 Resources 面板中找到 \"greeting.jst\"</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 使用 `variable` 选项确保在编译模板中不声明变量</span>\n<span class=\"token keyword\" >var</span> compiled <span class=\"token operator\" >=</span> _<span class=\"token punctuation\" >.</span><span class=\"token function\" >template</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'hi &lt;%= data.user %>!'</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'variable'</span><span class=\"token punctuation\" >:</span> <span class=\"token string\" >'data'</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\ncompiled<span class=\"token punctuation\" >.</span>source<span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => function(data) {</span>\n<span class=\"token comment\" spellcheck=\"true\">//   var __t, __p = '';</span>\n<span class=\"token comment\" spellcheck=\"true\">//   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';</span>\n<span class=\"token comment\" spellcheck=\"true\">//   return __p;</span>\n<span class=\"token comment\" spellcheck=\"true\">// }</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 使用 `source` 特性内联编译模板</span>\n<span class=\"token comment\" spellcheck=\"true\">// 便以查看行号、错误信息、堆栈</span>\nfs<span class=\"token punctuation\" >.</span><span class=\"token function\" >writeFileSync</span><span class=\"token punctuation\" >(</span>path<span class=\"token punctuation\" >.</span><span class=\"token function\" >join</span><span class=\"token punctuation\" >(</span>cwd<span class=\"token punctuation\" >,</span> <span class=\"token string\" >'jst.js'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'\\\n  var JST = {\\\n    \"main\": '</span> <span class=\"token operator\" >+</span> _<span class=\"token punctuation\" >.</span><span class=\"token function\" >template</span><span class=\"token punctuation\" >(</span>mainText<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span>source <span class=\"token operator\" >+</span> <span class=\"token string\" >'\\\n  };\\\n'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/toLower",
  "html":"<div data-render-page=\"entry\"><h2>toLower <a class=\"fa-link\" href=\"./toLower\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L12773\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.tolower\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.toLower([string&#x3D;&#x27;&#x27;])</div>\n\n<div data-render-html=\"/toLower\"><p>转换整体的字符串为小写</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">[string&#x3D;&#x27;&#x27;]</span> <span class=\"param-type\">(string)</span> <div data-render-html=\"/#synthetic\"><p>要转换的字符串 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(string)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回小写的字符串</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >toLower</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'--Foo-Bar'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => '--foo-bar'</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >toLower</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'fooBar'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 'foobar'</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >toLower</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'__FOO_BAR__'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => '__foo_bar__'</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/toUpper",
  "html":"<div data-render-page=\"entry\"><h2>toUpper <a class=\"fa-link\" href=\"./toUpper\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L12796\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.toupper\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.toUpper([string&#x3D;&#x27;&#x27;])</div>\n\n<div data-render-html=\"/toUpper\"><p>转换整体的字符串为大写</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">[string&#x3D;&#x27;&#x27;]</span> <span class=\"param-type\">(string)</span> <div data-render-html=\"/#synthetic\"><p>要转换的字符串 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(string)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回大写的字符串</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >toUpper</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'--foo-bar'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => '--FOO-BAR'</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >toUpper</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'fooBar'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 'FOOBAR'</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >toUpper</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'__foo_bar__'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => '__FOO_BAR__'</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/trim",
  "html":"<div data-render-page=\"entry\"><h2>trim <a class=\"fa-link\" href=\"./trim\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L12821\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.trim\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.trim([string&#x3D;&#x27;&#x27;], [chars&#x3D;whitespace])</div>\n\n<div data-render-html=\"/trim\"><p>从字符串中移除前面和后面的空白 或 指定的字符。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">[string&#x3D;&#x27;&#x27;]</span> <span class=\"param-type\">(string)</span> <div data-render-html=\"/#synthetic\"><p>要处理的字符串 </p>\n</div></li>\n<li><span class=\"param-name\">[chars&#x3D;whitespace]</span> <span class=\"param-type\">(string)</span> <div data-render-html=\"/#synthetic\"><p>要处理的字符 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(string)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回处理后的字符串</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >trim</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'  abc  '</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 'abc'</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >trim</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'-_-abc-_-'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'_-'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 'abc'</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token string\" >'  foo  '</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'  bar  '</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> _<span class=\"token punctuation\" >.</span>trim<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => ['foo', 'bar']</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/trimEnd",
  "html":"<div data-render-page=\"entry\"><h2>trimEnd <a class=\"fa-link\" href=\"./trimEnd\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L12857\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.trimend\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.trimEnd([string&#x3D;&#x27;&#x27;], [chars&#x3D;whitespace])</div>\n\n<div data-render-html=\"/trimEnd\"><p>移除字符串后面的空白 或 指定的字符。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">[string&#x3D;&#x27;&#x27;]</span> <span class=\"param-type\">(string)</span> <div data-render-html=\"/#synthetic\"><p>要处理的字符串 </p>\n</div></li>\n<li><span class=\"param-name\">[chars&#x3D;whitespace]</span> <span class=\"param-type\">(string)</span> <div data-render-html=\"/#synthetic\"><p>要处理的字符 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(string)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回处理后的字符串</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >trimEnd</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'  abc  '</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => '  abc'</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >trimEnd</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'-_-abc-_-'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'_-'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => '-_-abc'</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/trimStart",
  "html":"<div data-render-page=\"entry\"><h2>trimStart <a class=\"fa-link\" href=\"./trimStart\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L12891\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.trimstart\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.trimStart([string&#x3D;&#x27;&#x27;], [chars&#x3D;whitespace])</div>\n\n<div data-render-html=\"/trimStart\"><p>移除字符串中前面的空白 或 指定的字符。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">[string&#x3D;&#x27;&#x27;]</span> <span class=\"param-type\">(string)</span> <div data-render-html=\"/#synthetic\"><p>要处理的字符串 </p>\n</div></li>\n<li><span class=\"param-name\">[chars&#x3D;whitespace]</span> <span class=\"param-type\">(string)</span> <div data-render-html=\"/#synthetic\"><p>要处理的字符 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(string)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回处理后的字符串</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >trimStart</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'  abc  '</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 'abc  '</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >trimStart</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'-_-abc-_-'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'_-'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 'abc-_-'</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/truncate",
  "html":"<div data-render-page=\"entry\"><h2>truncate <a class=\"fa-link\" href=\"./truncate\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L12942\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.truncate\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.truncate([string&#x3D;&#x27;&#x27;], [options])</div>\n\n<div data-render-html=\"/truncate\"><p>截断字符串，如果字符串超出了限定的最大值。\n被截断的字符串后面会以 <code>omission</code> 代替，<code>omission</code> 默认是 &quot;...&quot;。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">[string&#x3D;&#x27;&#x27;]</span> <span class=\"param-type\">(string)</span> <div data-render-html=\"/#synthetic\"><p>要截断的字符串 </p>\n</div></li>\n<li><span class=\"param-name\">[options]</span> <span class=\"param-type\">(Object)</span> <div data-render-html=\"/#synthetic\"><p>选项对象 </p>\n</div></li>\n<li><span class=\"param-name\">[options.length&#x3D;30]</span> <span class=\"param-type\">(number)</span> <div data-render-html=\"/#synthetic\"><p>允许的最大长度 </p>\n</div></li>\n<li><span class=\"param-name\">[options.omission&#x3D;&#x27;...&#x27;]</span> <span class=\"param-type\">(string)</span> <div data-render-html=\"/#synthetic\"><p>超出后的代替字符 </p>\n</div></li>\n<li><span class=\"param-name\">[options.separator]</span> <span class=\"param-type\">(RegExp|string)</span> <div data-render-html=\"/#synthetic\"><p>截断点 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(string)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回截断后的字符串</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >truncate</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'hi-diddly-ho there, neighborino'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 'hi-diddly-ho there, neighbo...'</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >truncate</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'hi-diddly-ho there, neighborino'</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >{</span>\n  <span class=\"token string\" >'length'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >24</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token string\" >'separator'</span><span class=\"token punctuation\" >:</span> <span class=\"token string\" >' '</span>\n<span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 'hi-diddly-ho there,...'</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >truncate</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'hi-diddly-ho there, neighborino'</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >{</span>\n  <span class=\"token string\" >'length'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >24</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token string\" >'separator'</span><span class=\"token punctuation\" >:</span> <span class=\"token regex\" >/,? +/</span>\n<span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 'hi-diddly-ho there...'</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >truncate</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'hi-diddly-ho there, neighborino'</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >{</span>\n  <span class=\"token string\" >'omission'</span><span class=\"token punctuation\" >:</span> <span class=\"token string\" >' [...]'</span>\n<span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 'hi-diddly-ho there, neig [...]'</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/unescape",
  "html":"<div data-render-page=\"entry\"><h2>unescape <a class=\"fa-link\" href=\"./unescape\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L13015\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.unescape\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.unescape([string&#x3D;&#x27;&#x27;])</div>\n\n<div data-render-html=\"/unescape\"><p>反向版 <code>_.escape</code>。\n这个方法转换 HTML 实体\n<code>&amp;amp;</code>, <code>&amp;lt;</code>, <code>&amp;gt;</code>, <code>&amp;quot;</code>, <code>&amp;#39;</code>, 以及 <code>&amp;#96;</code> 为对应的字符。\n<br>\n<br>\n<strong>注意:</strong> 不会转换其他的 HTML 实体，需要转换可以使用类似 <a href=\"https://mths.be/he\" target=\"_blank\">_he_</a> 的第三方库。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">[string&#x3D;&#x27;&#x27;]</span> <span class=\"param-type\">(string)</span> <div data-render-html=\"/#synthetic\"><p>要转换的字符串 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(string)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回转换后的字符串</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >unescape</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'fred, barney, &amp;amp; pebbles'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 'fred, barney, &amp; pebbles'</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/upperCase",
  "html":"<div data-render-page=\"entry\"><h2>upperCase <a class=\"fa-link\" href=\"./upperCase\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L13041\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.uppercase\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.upperCase([string&#x3D;&#x27;&#x27;])</div>\n\n<div data-render-html=\"/upperCase\"><p>转换字符串为空格分割的大写单词</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">[string&#x3D;&#x27;&#x27;]</span> <span class=\"param-type\">(string)</span> <div data-render-html=\"/#synthetic\"><p>要转换的字符串 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(string)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回大写单词</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >upperCase</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'--foo-bar'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 'FOO BAR'</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >upperCase</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'fooBar'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 'FOO BAR'</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >upperCase</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'__foo_bar__'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 'FOO BAR'</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/upperFirst",
  "html":"<div data-render-page=\"entry\"><h2>upperFirst <a class=\"fa-link\" href=\"./upperFirst\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L12268\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.upperfirst\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.upperFirst([string&#x3D;&#x27;&#x27;])</div>\n\n<div data-render-html=\"/upperFirst\"><p>转换首字母为大写。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">[string&#x3D;&#x27;&#x27;]</span> <span class=\"param-type\">(string)</span> <div data-render-html=\"/#synthetic\"><p>要转换的字符串 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(string)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回转换后的字符串</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >upperFirst</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'fred'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 'Fred'</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >upperFirst</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'FRED'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 'FRED'</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/words",
  "html":"<div data-render-page=\"entry\"><h2>words <a class=\"fa-link\" href=\"./words\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L13063\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.words\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.words([string&#x3D;&#x27;&#x27;], [pattern])</div>\n\n<div data-render-html=\"/words\"><p>拆分字符串中的词为数组</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">[string&#x3D;&#x27;&#x27;]</span> <span class=\"param-type\">(string)</span> <div data-render-html=\"/#synthetic\"><p>要处理的字符串 </p>\n</div></li>\n<li><span class=\"param-name\">[pattern]</span> <span class=\"param-type\">(RegExp|string)</span> <div data-render-html=\"/#synthetic\"><p>匹配模式 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Array)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 然后拆分后的数组</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >words</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'fred, barney, &amp; pebbles'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => ['fred', 'barney', 'pebbles']</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >words</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'fred, barney, &amp; pebbles'</span><span class=\"token punctuation\" >,</span> <span class=\"token regex\" >/[^, ]+/g</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => ['fred', 'barney', '&amp;', 'pebbles']</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/attempt",
  "html":"<div data-render-page=\"entry\"><h2>attempt <a class=\"fa-link\" href=\"./attempt\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L13095\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.attempt\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.attempt(func)</div>\n\n<div data-render-html=\"/attempt\"><p>尝试调用函数，返回结果 或者 错误对象。\n任何附加的参数都会在调用时传给函数。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">func</span> <span class=\"param-type\">(Function)</span> <div data-render-html=\"/#synthetic\"><p>要调用的函数 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(*)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回函数结果或者错误对象</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token comment\" spellcheck=\"true\">// 避免因为错误的选择器而抛出</span>\n<span class=\"token keyword\" >var</span> elements <span class=\"token operator\" >=</span> _<span class=\"token punctuation\" >.</span><span class=\"token function\" >attempt</span><span class=\"token punctuation\" >(</span><span class=\"token keyword\" >function</span><span class=\"token punctuation\" >(</span>selector<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span>\n  <span class=\"token keyword\" >return</span> document<span class=\"token punctuation\" >.</span><span class=\"token function\" >querySelectorAll</span><span class=\"token punctuation\" >(</span>selector<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'>_>'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n\n<span class=\"token keyword\" >if</span> <span class=\"token punctuation\" >(</span>_<span class=\"token punctuation\" >.</span><span class=\"token function\" >isError</span><span class=\"token punctuation\" >(</span>elements<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span>\n  elements <span class=\"token operator\" >=</span> <span class=\"token punctuation\" >[</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >;</span>\n<span class=\"token punctuation\" >}</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/bindAll",
  "html":"<div data-render-page=\"entry\"><h2>bindAll <a class=\"fa-link\" href=\"./bindAll\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L13128\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.bindall\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.bindAll(object, methodNames)</div>\n\n<div data-render-html=\"/bindAll\"><p>绑定对象的方法到对象本身，覆盖已存在的方法。\n<br>\n<br>\n<strong>注意:</strong> 这个方法不会设置 &quot;length&quot; 属性到约束的函数。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">object</span> <span class=\"param-type\">(Object)</span> <div data-render-html=\"/#synthetic\"><p>要绑定的对象 </p>\n</div></li>\n<li><span class=\"param-name\">methodNames</span> <span class=\"param-type\">(...(string|string[])</span> <div data-render-html=\"/#synthetic\"><p>要绑定的方法名 单独指定或指定在数组中。 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Object)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回对象</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token keyword\" >var</span> view <span class=\"token operator\" >=</span> <span class=\"token punctuation\" >{</span>\n  <span class=\"token string\" >'label'</span><span class=\"token punctuation\" >:</span> <span class=\"token string\" >'docs'</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token string\" >'onClick'</span><span class=\"token punctuation\" >:</span> <span class=\"token keyword\" >function</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span>\n    console<span class=\"token punctuation\" >.</span><span class=\"token function\" >log</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'clicked '</span> <span class=\"token operator\" >+</span> <span class=\"token keyword\" >this</span><span class=\"token punctuation\" >.</span>label<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n  <span class=\"token punctuation\" >}</span>\n<span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >;</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >bindAll</span><span class=\"token punctuation\" >(</span>view<span class=\"token punctuation\" >,</span> <span class=\"token string\" >'onClick'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token function\" >jQuery</span><span class=\"token punctuation\" >(</span>element<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >on</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'click'</span><span class=\"token punctuation\" >,</span> view<span class=\"token punctuation\" >.</span>onClick<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => logs 'clicked docs' when clicked</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/cond",
  "html":"<div data-render-page=\"entry\"><h2>cond <a class=\"fa-link\" href=\"./cond\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L13161\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.cond\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.cond(pairs)</div>\n\n<div data-render-html=\"/cond\"><p>创建一个函数。\n这个函数会遍历 <code>pairs</code>，并执行最先返回真值对应的函数，并绑定 <code>this</code> 及传入创建函数的参数。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">pairs</span> <span class=\"param-type\">(Array)</span> <div data-render-html=\"/#synthetic\"><p>判断函数对 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Function)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回新的函数</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token keyword\" >var</span> func <span class=\"token operator\" >=</span> _<span class=\"token punctuation\" >.</span><span class=\"token function\" >cond</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span>\n  <span class=\"token punctuation\" >[</span>_<span class=\"token punctuation\" >.</span><span class=\"token function\" >matches</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> <span class=\"token string\" >'a'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >,</span>           _<span class=\"token punctuation\" >.</span><span class=\"token function\" >constant</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'matches A'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token punctuation\" >[</span>_<span class=\"token punctuation\" >.</span><span class=\"token function\" >conforms</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> <span class=\"token string\" >'b'</span><span class=\"token punctuation\" >:</span> _<span class=\"token punctuation\" >.</span>isNumber <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >,</span> _<span class=\"token punctuation\" >.</span><span class=\"token function\" >constant</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'matches B'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token punctuation\" >[</span>_<span class=\"token punctuation\" >.</span><span class=\"token function\" >constant</span><span class=\"token punctuation\" >(</span><span class=\"token keyword\" >true</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >,</span>                _<span class=\"token punctuation\" >.</span><span class=\"token function\" >constant</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'no match'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >]</span>\n<span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n\n<span class=\"token function\" >func</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> <span class=\"token string\" >'a'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'b'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 输出：'matches A'</span>\n\n<span class=\"token function\" >func</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> <span class=\"token string\" >'a'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'b'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 输出：'matches B'</span>\n\n<span class=\"token function\" >func</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> <span class=\"token string\" >'a'</span><span class=\"token punctuation\" >:</span> <span class=\"token string\" >'1'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'b'</span><span class=\"token punctuation\" >:</span> <span class=\"token string\" >'2'</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 输出：'no match'</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/conforms",
  "html":"<div data-render-page=\"entry\"><h2>conforms <a class=\"fa-link\" href=\"./conforms\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L13203\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.conforms\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.conforms(source)</div>\n\n<div data-render-html=\"/conforms\"><p>创建一个函数。\n这个函数会调用 <code>source</code> 的属性名对应的 <code>predicate</code> 与传入对象相对应属性名的值进行 <code>predicate</code> 处理。\n如果都符合返回 <code>true</code>，否则返回 <code>false</code></p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">source</span> <span class=\"param-type\">(Object)</span> <div data-render-html=\"/#synthetic\"><p>包含 predicates 属性值的对象 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Function)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回新的函数</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token keyword\" >var</span> users <span class=\"token operator\" >=</span> <span class=\"token punctuation\" >[</span>\n  <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'user'</span><span class=\"token punctuation\" >:</span> <span class=\"token string\" >'barney'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'age'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >36</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'user'</span><span class=\"token punctuation\" >:</span> <span class=\"token string\" >'fred'</span><span class=\"token punctuation\" >,</span>   <span class=\"token string\" >'age'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >40</span> <span class=\"token punctuation\" >}</span>\n<span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >;</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >filter</span><span class=\"token punctuation\" >(</span>users<span class=\"token punctuation\" >,</span> _<span class=\"token punctuation\" >.</span><span class=\"token function\" >conforms</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> <span class=\"token string\" >'age'</span><span class=\"token punctuation\" >:</span> _<span class=\"token punctuation\" >.</span><span class=\"token function\" >partial</span><span class=\"token punctuation\" >(</span>_<span class=\"token punctuation\" >.</span>gt<span class=\"token punctuation\" >,</span> _<span class=\"token punctuation\" >,</span> <span class=\"token number\" >38</span><span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => [{ 'user': 'fred', 'age': 40 }]</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/constant",
  "html":"<div data-render-page=\"entry\"><h2>constant <a class=\"fa-link\" href=\"./constant\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L13223\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.constant\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.constant(value)</div>\n\n<div data-render-html=\"/constant\"><p>创建一个返回 <code>value</code> 的函数</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">value</span> <span class=\"param-type\">(*)</span> <div data-render-html=\"/#synthetic\"><p>要返回的值 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Function)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回新的函数</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token keyword\" >var</span> object <span class=\"token operator\" >=</span> <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'user'</span><span class=\"token punctuation\" >:</span> <span class=\"token string\" >'fred'</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >;</span>\n<span class=\"token keyword\" >var</span> getter <span class=\"token operator\" >=</span> _<span class=\"token punctuation\" >.</span><span class=\"token function\" >constant</span><span class=\"token punctuation\" >(</span>object<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n\n<span class=\"token function\" >getter</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span> <span class=\"token operator\" >===</span> object<span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => true</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/flow",
  "html":"<div data-render-page=\"entry\"><h2>flow <a class=\"fa-link\" href=\"./flow\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L13249\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.flow\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.flow([funcs])</div>\n\n<div data-render-html=\"/flow\"><p>创建一个函数。\n返回的结果是调用提供函数的结果，<code>this</code> 会绑定到创建函数。\n每一个连续调用，传入的参数都是前一个函数返回的结果。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">[funcs]</span> <span class=\"param-type\">(...(Function|Function[])</span> <div data-render-html=\"/#synthetic\"><p>要调用的函数 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Function)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回新的函数</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token keyword\" >function</span> <span class=\"token function\" >square</span><span class=\"token punctuation\" >(</span>n<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span>\n  <span class=\"token keyword\" >return</span> n <span class=\"token operator\" >*</span> n<span class=\"token punctuation\" >;</span>\n<span class=\"token punctuation\" >}</span>\n\n<span class=\"token keyword\" >var</span> addSquare <span class=\"token operator\" >=</span> _<span class=\"token punctuation\" >.</span><span class=\"token function\" >flow</span><span class=\"token punctuation\" >(</span>_<span class=\"token punctuation\" >.</span>add<span class=\"token punctuation\" >,</span> square<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token function\" >addSquare</span><span class=\"token punctuation\" >(</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 9</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/flowRight",
  "html":"<div data-render-page=\"entry\"><h2>flowRight <a class=\"fa-link\" href=\"./flowRight\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L13269\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.flowright\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.flowRight([funcs])</div>\n\n<div data-render-html=\"/flowRight\"><p>这个方法类似 <code>_.flow</code>，除了它调用函数的顺序是从右往左的。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">[funcs]</span> <span class=\"param-type\">(...(Function|Function[])</span> <div data-render-html=\"/#synthetic\"><p>要调用的函数 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Function)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回新的函数</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token keyword\" >function</span> <span class=\"token function\" >square</span><span class=\"token punctuation\" >(</span>n<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span>\n  <span class=\"token keyword\" >return</span> n <span class=\"token operator\" >*</span> n<span class=\"token punctuation\" >;</span>\n<span class=\"token punctuation\" >}</span>\n\n<span class=\"token keyword\" >var</span> addSquare <span class=\"token operator\" >=</span> _<span class=\"token punctuation\" >.</span><span class=\"token function\" >flowRight</span><span class=\"token punctuation\" >(</span>square<span class=\"token punctuation\" >,</span> _<span class=\"token punctuation\" >.</span>add<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token function\" >addSquare</span><span class=\"token punctuation\" >(</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 9</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/identity",
  "html":"<div data-render-page=\"entry\"><h2>identity <a class=\"fa-link\" href=\"./identity\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L13286\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.identity\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.identity(value)</div>\n\n<div data-render-html=\"/identity\"><p>这个方法返回首个提供的参数</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">value</span> <span class=\"param-type\">(*)</span> <div data-render-html=\"/#synthetic\"><p>任何值 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(*)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回 value</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token keyword\" >var</span> object <span class=\"token operator\" >=</span> <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'user'</span><span class=\"token punctuation\" >:</span> <span class=\"token string\" >'fred'</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >;</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >identity</span><span class=\"token punctuation\" >(</span>object<span class=\"token punctuation\" >)</span> <span class=\"token operator\" >===</span> object<span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => true</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/iteratee",
  "html":"<div data-render-page=\"entry\"><h2>iteratee <a class=\"fa-link\" href=\"./iteratee\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L13319\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.iteratee\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.iteratee([func&#x3D;_.identity])</div>\n\n<div data-render-html=\"/iteratee\"><p>创建一个调用 <code>func</code> 的函数。\n如果 <code>func</code> 是一个属性名，传入包含这个属性名的对象，回调返回对应属性名的值。\n如果 <code>func</code> 是一个对象，传入的元素有相同的对象属性，回调返回 <code>true</code>。\n其他情况返回 <code>false</code>。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">[func&#x3D;_.identity]</span> <span class=\"param-type\">(*)</span> <div data-render-html=\"/#synthetic\"><p>转换成 callback 的值 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Function)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回 callback.</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token keyword\" >var</span> users <span class=\"token operator\" >=</span> <span class=\"token punctuation\" >[</span>\n  <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'user'</span><span class=\"token punctuation\" >:</span> <span class=\"token string\" >'barney'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'age'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >36</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'user'</span><span class=\"token punctuation\" >:</span> <span class=\"token string\" >'fred'</span><span class=\"token punctuation\" >,</span>   <span class=\"token string\" >'age'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >40</span> <span class=\"token punctuation\" >}</span>\n<span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 创建一个自定义 iteratee</span>\n_<span class=\"token punctuation\" >.</span>iteratee <span class=\"token operator\" >=</span> _<span class=\"token punctuation\" >.</span><span class=\"token function\" >wrap</span><span class=\"token punctuation\" >(</span>_<span class=\"token punctuation\" >.</span>iteratee<span class=\"token punctuation\" >,</span> <span class=\"token keyword\" >function</span><span class=\"token punctuation\" >(</span>callback<span class=\"token punctuation\" >,</span> func<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span>\n  <span class=\"token keyword\" >var</span> p <span class=\"token operator\" >=</span> <span class=\"token regex\" >/^(\\S+)\\s*([&lt;>])\\s*(\\S+)$/</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >exec</span><span class=\"token punctuation\" >(</span>func<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n  <span class=\"token keyword\" >return</span> <span class=\"token operator\" >!</span>p <span class=\"token operator\" >?</span> <span class=\"token function\" >callback</span><span class=\"token punctuation\" >(</span>func<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >:</span> <span class=\"token keyword\" >function</span><span class=\"token punctuation\" >(</span>object<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span>\n    <span class=\"token keyword\" >return</span> <span class=\"token punctuation\" >(</span>p<span class=\"token punctuation\" >[</span><span class=\"token number\" >2</span><span class=\"token punctuation\" >]</span> <span class=\"token operator\" >==</span> <span class=\"token string\" >'>'</span> <span class=\"token operator\" >?</span> object<span class=\"token punctuation\" >[</span>p<span class=\"token punctuation\" >[</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >]</span> <span class=\"token operator\" >></span> p<span class=\"token punctuation\" >[</span><span class=\"token number\" >3</span><span class=\"token punctuation\" >]</span> <span class=\"token punctuation\" >:</span> object<span class=\"token punctuation\" >[</span>p<span class=\"token punctuation\" >[</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >]</span> <span class=\"token operator\" >&lt;</span> p<span class=\"token punctuation\" >[</span><span class=\"token number\" >3</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n  <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >;</span>\n<span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >filter</span><span class=\"token punctuation\" >(</span>users<span class=\"token punctuation\" >,</span> <span class=\"token string\" >'age > 36'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => [{ 'user': 'fred', 'age': 40 }]</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/matches",
  "html":"<div data-render-page=\"entry\"><h2>matches <a class=\"fa-link\" href=\"./matches\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L13344\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.matches\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.matches(source)</div>\n\n<div data-render-html=\"/matches\"><p>创建一个深比较的方法来比较给定的对象和 <code>source</code> 对象。\n如果给定的对象拥有相同的属性值返回 <code>true</code>，否则返回 <code>false</code>\n<br>\n<br>\n<strong>注意:</strong> 这个方法支持以 <code>_.isEqual</code> 的方式比较相同的值。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">source</span> <span class=\"param-type\">(Object)</span> <div data-render-html=\"/#synthetic\"><p>要匹配的源对象 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Function)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回新的函数</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token keyword\" >var</span> users <span class=\"token operator\" >=</span> <span class=\"token punctuation\" >[</span>\n  <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'user'</span><span class=\"token punctuation\" >:</span> <span class=\"token string\" >'barney'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'age'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >36</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'active'</span><span class=\"token punctuation\" >:</span> <span class=\"token keyword\" >true</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'user'</span><span class=\"token punctuation\" >:</span> <span class=\"token string\" >'fred'</span><span class=\"token punctuation\" >,</span>   <span class=\"token string\" >'age'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >40</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'active'</span><span class=\"token punctuation\" >:</span> <span class=\"token keyword\" >false</span> <span class=\"token punctuation\" >}</span>\n<span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >;</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >filter</span><span class=\"token punctuation\" >(</span>users<span class=\"token punctuation\" >,</span> _<span class=\"token punctuation\" >.</span><span class=\"token function\" >matches</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> <span class=\"token string\" >'age'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >40</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'active'</span><span class=\"token punctuation\" >:</span> <span class=\"token keyword\" >false</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => [{ 'user': 'fred', 'age': 40, 'active': false }]</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/matchesProperty",
  "html":"<div data-render-page=\"entry\"><h2>matchesProperty <a class=\"fa-link\" href=\"./matchesProperty\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L13370\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.matchesproperty\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.matchesProperty(path, srcValue)</div>\n\n<div data-render-html=\"/matchesProperty\"><p>创建一个深比较的方法来比较给定对象的 <code>path</code> 的值是否是 <code>srcValue</code>。\n如果是返回 <code>true</code>，否则返回 <code>false</code>\n<br>\n<br>\n<strong>注意:</strong> 这个方法支持以 <code>_.isEqual</code> 的方式比较相同的值。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">path</span> <span class=\"param-type\">(Array|string)</span> <div data-render-html=\"/#synthetic\"><p>给定对象的属性路径名 </p>\n</div></li>\n<li><span class=\"param-name\">srcValue</span> <span class=\"param-type\">(*)</span> <div data-render-html=\"/#synthetic\"><p>要匹配的值 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Function)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回新的函数</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token keyword\" >var</span> users <span class=\"token operator\" >=</span> <span class=\"token punctuation\" >[</span>\n  <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'user'</span><span class=\"token punctuation\" >:</span> <span class=\"token string\" >'barney'</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'user'</span><span class=\"token punctuation\" >:</span> <span class=\"token string\" >'fred'</span> <span class=\"token punctuation\" >}</span>\n<span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >;</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >find</span><span class=\"token punctuation\" >(</span>users<span class=\"token punctuation\" >,</span> _<span class=\"token punctuation\" >.</span><span class=\"token function\" >matchesProperty</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'user'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'fred'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => { 'user': 'fred' }</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/method",
  "html":"<div data-render-page=\"entry\"><h2>method <a class=\"fa-link\" href=\"./method\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L13397\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.method\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.method(path, [args])</div>\n\n<div data-render-html=\"/method\"><p>创建一个调用给定对象 <code>path</code> 上的函数。\n任何附加的参数都会传入这个调用函数中。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">path</span> <span class=\"param-type\">(Array|string)</span> <div data-render-html=\"/#synthetic\"><p>调用函数所在对象的路径 </p>\n</div></li>\n<li><span class=\"param-name\">[args]</span> <span class=\"param-type\">(...*)</span> <div data-render-html=\"/#synthetic\"><p>传递给调用函数的参数 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Function)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回新的函数</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token keyword\" >var</span> objects <span class=\"token operator\" >=</span> <span class=\"token punctuation\" >[</span>\n  <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'a'</span><span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'b'</span><span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'c'</span><span class=\"token punctuation\" >:</span> _<span class=\"token punctuation\" >.</span><span class=\"token function\" >constant</span><span class=\"token punctuation\" >(</span><span class=\"token number\" >2</span><span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >}</span> <span class=\"token punctuation\" >}</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'a'</span><span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'b'</span><span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'c'</span><span class=\"token punctuation\" >:</span> _<span class=\"token punctuation\" >.</span><span class=\"token function\" >constant</span><span class=\"token punctuation\" >(</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >}</span> <span class=\"token punctuation\" >}</span> <span class=\"token punctuation\" >}</span>\n<span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >;</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >map</span><span class=\"token punctuation\" >(</span>objects<span class=\"token punctuation\" >,</span> _<span class=\"token punctuation\" >.</span><span class=\"token function\" >method</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'a.b.c'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => [2, 1]</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >invokeMap</span><span class=\"token punctuation\" >(</span>_<span class=\"token punctuation\" >.</span><span class=\"token function\" >sortBy</span><span class=\"token punctuation\" >(</span>objects<span class=\"token punctuation\" >,</span> _<span class=\"token punctuation\" >.</span><span class=\"token function\" >method</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token string\" >'a'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'b'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'c'</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'a.b.c'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => [1, 2]</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/methodOf",
  "html":"<div data-render-page=\"entry\"><h2>methodOf <a class=\"fa-link\" href=\"./methodOf\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L13425\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.methodof\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.methodOf(object, [args])</div>\n\n<div data-render-html=\"/methodOf\"><p>反向版 <code>_.method</code>。\n这个创建一个函数调用给定 <code>object</code> 的 <code>path</code> 上的方法，\n任何附加的参数都会传入这个调用函数中。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">object</span> <span class=\"param-type\">(Object)</span> <div data-render-html=\"/#synthetic\"><p>要检索的对象 </p>\n</div></li>\n<li><span class=\"param-name\">[args]</span> <span class=\"param-type\">(...*)</span> <div data-render-html=\"/#synthetic\"><p>传递给调用函数的参数 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Function)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回新的函数</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token keyword\" >var</span> array <span class=\"token operator\" >=</span> _<span class=\"token punctuation\" >.</span><span class=\"token function\" >times</span><span class=\"token punctuation\" >(</span><span class=\"token number\" >3</span><span class=\"token punctuation\" >,</span> _<span class=\"token punctuation\" >.</span>constant<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >,</span>\n    object <span class=\"token operator\" >=</span> <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'a'</span><span class=\"token punctuation\" >:</span> array<span class=\"token punctuation\" >,</span> <span class=\"token string\" >'b'</span><span class=\"token punctuation\" >:</span> array<span class=\"token punctuation\" >,</span> <span class=\"token string\" >'c'</span><span class=\"token punctuation\" >:</span> array <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >;</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token string\" >'a[2]'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'c[0]'</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> _<span class=\"token punctuation\" >.</span><span class=\"token function\" >methodOf</span><span class=\"token punctuation\" >(</span>object<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => [2, 0]</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token punctuation\" >[</span><span class=\"token string\" >'a'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'2'</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >[</span><span class=\"token string\" >'c'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'0'</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> _<span class=\"token punctuation\" >.</span><span class=\"token function\" >methodOf</span><span class=\"token punctuation\" >(</span>object<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => [2, 0]</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/mixin",
  "html":"<div data-render-page=\"entry\"><h2>mixin <a class=\"fa-link\" href=\"./mixin\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L13464\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.mixin\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.mixin([object&#x3D;lodash], source, [options])</div>\n\n<div data-render-html=\"/mixin\"><p>添加来源对象自身的所有可枚举函数属性到目标对象。\n如果 <code>object</code> 是个函数，那么函数方法将被添加到原型链上。\n<br>\n<br>\n<strong>注意:</strong> 使用 <code>_.runInContext</code> 来创建原始的 <code>lodash</code> 函数来避免修改造成的冲突。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">[object&#x3D;lodash]</span> <span class=\"param-type\">(Function|Object)</span> <div data-render-html=\"/#synthetic\"><p>目标对象 </p>\n</div></li>\n<li><span class=\"param-name\">source</span> <span class=\"param-type\">(Object)</span> <div data-render-html=\"/#synthetic\"><p>来源对象 </p>\n</div></li>\n<li><span class=\"param-name\">[options]</span> <span class=\"param-type\">(Object)</span> <div data-render-html=\"/#synthetic\"><p>选项对象 </p>\n</div></li>\n<li><span class=\"param-name\">[options.chain&#x3D;true]</span> <span class=\"param-type\">(boolean)</span> <div data-render-html=\"/#synthetic\"><p>是否开启链式操作 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Function|Object)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回对象</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token keyword\" >function</span> <span class=\"token function\" >vowels</span><span class=\"token punctuation\" >(</span>string<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span>\n  <span class=\"token keyword\" >return</span> _<span class=\"token punctuation\" >.</span><span class=\"token function\" >filter</span><span class=\"token punctuation\" >(</span>string<span class=\"token punctuation\" >,</span> <span class=\"token keyword\" >function</span><span class=\"token punctuation\" >(</span>v<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span>\n    <span class=\"token keyword\" >return</span> <span class=\"token regex\" >/[aeiou]/i</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >test</span><span class=\"token punctuation\" >(</span>v<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n  <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token punctuation\" >}</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >mixin</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> <span class=\"token string\" >'vowels'</span><span class=\"token punctuation\" >:</span> vowels <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >vowels</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'fred'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => ['e']</span>\n\n<span class=\"token function\" >_</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'fred'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >vowels</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >value</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => ['e']</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >mixin</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> <span class=\"token string\" >'vowels'</span><span class=\"token punctuation\" >:</span> vowels <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'chain'</span><span class=\"token punctuation\" >:</span> <span class=\"token keyword\" >false</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token function\" >_</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'fred'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >vowels</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => ['e']</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/noConflict",
  "html":"<div data-render-page=\"entry\"><h2>noConflict <a class=\"fa-link\" href=\"./noConflict\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L13510\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.noconflict\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.noConflict()</div>\n\n<div data-render-html=\"/noConflict\"><p>释放 <code>_</code> 为原来的值，并返回一个 <code>lodash</code> 的引用</p>\n</div>\n\n<h3>返回值 <span class=\"return-type\">(Function)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回 <code>lodash</code> 函数</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token keyword\" >var</span> lodash <span class=\"token operator\" >=</span> _<span class=\"token punctuation\" >.</span><span class=\"token function\" >noConflict</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/noop",
  "html":"<div data-render-page=\"entry\"><h2>noop <a class=\"fa-link\" href=\"./noop\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L13530\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.noop\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.noop()</div>\n\n<div data-render-html=\"/noop\"><p>无论传递什么参数，都返回 <code>undefined</code>。</p>\n</div>\n\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token keyword\" >var</span> object <span class=\"token operator\" >=</span> <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'user'</span><span class=\"token punctuation\" >:</span> <span class=\"token string\" >'fred'</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >;</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >noop</span><span class=\"token punctuation\" >(</span>object<span class=\"token punctuation\" >)</span> <span class=\"token operator\" >===</span> undefined<span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => true</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/nthArg",
  "html":"<div data-render-page=\"entry\"><h2>nthArg <a class=\"fa-link\" href=\"./nthArg\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L13549\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.ntharg\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.nthArg([n&#x3D;0])</div>\n\n<div data-render-html=\"/nthArg\"><p>创建一个返回第 N 个参数的函数。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">[n&#x3D;0]</span> <span class=\"param-type\">(number)</span> <div data-render-html=\"/#synthetic\"><p>要返回参数的索引 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Function)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回新的函数</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token keyword\" >var</span> func <span class=\"token operator\" >=</span> _<span class=\"token punctuation\" >.</span><span class=\"token function\" >nthArg</span><span class=\"token punctuation\" >(</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n\n<span class=\"token function\" >func</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'a'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'b'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'c'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 'b'</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/over",
  "html":"<div data-render-page=\"entry\"><h2>over <a class=\"fa-link\" href=\"./over\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L13571\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.over\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.over(iteratees)</div>\n\n<div data-render-html=\"/over\"><p>创建一个传入提供的参数的函数并调用 <code>iteratees</code> 返回结果的函数。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">iteratees</span> <span class=\"param-type\">(...(Function|Function[])</span> <div data-render-html=\"/#synthetic\"><p>要调用的 iteratees </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Function)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回新的函数</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token keyword\" >var</span> func <span class=\"token operator\" >=</span> _<span class=\"token punctuation\" >.</span><span class=\"token function\" >over</span><span class=\"token punctuation\" >(</span>Math<span class=\"token punctuation\" >.</span>max<span class=\"token punctuation\" >,</span> Math<span class=\"token punctuation\" >.</span>min<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n\n<span class=\"token function\" >func</span><span class=\"token punctuation\" >(</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >4</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => [4, 1]</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/overEvery",
  "html":"<div data-render-page=\"entry\"><h2>overEvery <a class=\"fa-link\" href=\"./overEvery\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L13594\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.overevery\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.overEvery(predicates)</div>\n\n<div data-render-html=\"/overEvery\"><p>创建一个传入提供的参数的函数并调用 <code>iteratees</code> 判断是否 全部 都为真值的函数。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">predicates</span> <span class=\"param-type\">(...(Function|Function[])</span> <div data-render-html=\"/#synthetic\"><p>要调用的 predicates </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Function)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回新的函数</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token keyword\" >var</span> func <span class=\"token operator\" >=</span> _<span class=\"token punctuation\" >.</span><span class=\"token function\" >overEvery</span><span class=\"token punctuation\" >(</span>Boolean<span class=\"token punctuation\" >,</span> isFinite<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n\n<span class=\"token function\" >func</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'1'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => true</span>\n\n<span class=\"token function\" >func</span><span class=\"token punctuation\" >(</span><span class=\"token keyword\" >null</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => false</span>\n\n<span class=\"token function\" >func</span><span class=\"token punctuation\" >(</span><span class=\"token number\" >NaN</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => false</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/overSome",
  "html":"<div data-render-page=\"entry\"><h2>overSome <a class=\"fa-link\" href=\"./overSome\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L13617\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.oversome\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.overSome(predicates)</div>\n\n<div data-render-html=\"/overSome\"><p>创建一个传入提供的参数的函数并调用 <code>iteratees</code> 判断是否 存在 有真值的函数。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">predicates</span> <span class=\"param-type\">(...(Function|Function[])</span> <div data-render-html=\"/#synthetic\"><p>要调用的 predicates </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Function)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回新的函数</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token keyword\" >var</span> func <span class=\"token operator\" >=</span> _<span class=\"token punctuation\" >.</span><span class=\"token function\" >overSome</span><span class=\"token punctuation\" >(</span>Boolean<span class=\"token punctuation\" >,</span> isFinite<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n\n<span class=\"token function\" >func</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'1'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => true</span>\n\n<span class=\"token function\" >func</span><span class=\"token punctuation\" >(</span><span class=\"token keyword\" >null</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => true</span>\n\n<span class=\"token function\" >func</span><span class=\"token punctuation\" >(</span><span class=\"token number\" >NaN</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => false</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/property",
  "html":"<div data-render-page=\"entry\"><h2>property <a class=\"fa-link\" href=\"./property\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L13640\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.property\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.property(path)</div>\n\n<div data-render-html=\"/property\"><p>创建一个返回给定对象的 <code>path</code> 的值的函数。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">path</span> <span class=\"param-type\">(Array|string)</span> <div data-render-html=\"/#synthetic\"><p>要得到值的属性路径 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Function)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回新的函数</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token keyword\" >var</span> objects <span class=\"token operator\" >=</span> <span class=\"token punctuation\" >[</span>\n  <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'a'</span><span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'b'</span><span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'c'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span> <span class=\"token punctuation\" >}</span> <span class=\"token punctuation\" >}</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'a'</span><span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'b'</span><span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'c'</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span> <span class=\"token punctuation\" >}</span> <span class=\"token punctuation\" >}</span> <span class=\"token punctuation\" >}</span>\n<span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >;</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >map</span><span class=\"token punctuation\" >(</span>objects<span class=\"token punctuation\" >,</span> _<span class=\"token punctuation\" >.</span><span class=\"token function\" >property</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'a.b.c'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => [2, 1]</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >map</span><span class=\"token punctuation\" >(</span>_<span class=\"token punctuation\" >.</span><span class=\"token function\" >sortBy</span><span class=\"token punctuation\" >(</span>objects<span class=\"token punctuation\" >,</span> _<span class=\"token punctuation\" >.</span><span class=\"token function\" >property</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token string\" >'a'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'b'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'c'</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'a.b.c'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => [1, 2]</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/propertyOf",
  "html":"<div data-render-page=\"entry\"><h2>propertyOf <a class=\"fa-link\" href=\"./propertyOf\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L13664\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.propertyof\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.propertyOf(object)</div>\n\n<div data-render-html=\"/propertyOf\"><p>反向版  <code>_.property</code>。\n这个方法创建的函数返回给定 path 在对象上的值。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">object</span> <span class=\"param-type\">(Object)</span> <div data-render-html=\"/#synthetic\"><p>要检索的对象 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Function)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回新的函数</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\"><span class=\"token keyword\" >var</span> array <span class=\"token operator\" >=</span> <span class=\"token punctuation\" >[</span><span class=\"token number\" >0</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span>\n    object <span class=\"token operator\" >=</span> <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'a'</span><span class=\"token punctuation\" >:</span> array<span class=\"token punctuation\" >,</span> <span class=\"token string\" >'b'</span><span class=\"token punctuation\" >:</span> array<span class=\"token punctuation\" >,</span> <span class=\"token string\" >'c'</span><span class=\"token punctuation\" >:</span> array <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >;</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token string\" >'a[2]'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'c[0]'</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> _<span class=\"token punctuation\" >.</span><span class=\"token function\" >propertyOf</span><span class=\"token punctuation\" >(</span>object<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => [2, 0]</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token punctuation\" >[</span><span class=\"token string\" >'a'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'2'</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >[</span><span class=\"token string\" >'c'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'0'</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> _<span class=\"token punctuation\" >.</span><span class=\"token function\" >propertyOf</span><span class=\"token punctuation\" >(</span>object<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => [2, 0]</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/range",
  "html":"<div data-render-page=\"entry\"><h2>range <a class=\"fa-link\" href=\"./range\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L13708\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.range\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.range([start&#x3D;0], end, [step&#x3D;1])</div>\n\n<div data-render-html=\"/range\"><p>创建一个包含从 <code>start</code> 到 <code>end</code>，但不包含 <code>end</code> 本身范围数字的数组。\n如果 <code>start</code> 是负数，而 <code>end</code> 或 <code>step</code> 没有指定，那么 <code>step</code> 从 <code>-1</code> 为开始。\n如果 <code>end</code> 没有指定，<code>start</code> 设置为 <code>0</code>。\n如果 <code>end</code> 小于 <code>start</code>，会创建一个空数组，除非指定了 <code>step</code>。\n<br>\n<br>\n<strong>注意:</strong> JavaScript 遵循 IEEE-754 标准处理无法预料的浮点数结果。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">[start&#x3D;0]</span> <span class=\"param-type\">(number)</span> <div data-render-html=\"/#synthetic\"><p>开始的范围 </p>\n</div></li>\n<li><span class=\"param-name\">end</span> <span class=\"param-type\">(number)</span> <div data-render-html=\"/#synthetic\"><p>结束的范围 </p>\n</div></li>\n<li><span class=\"param-name\">[step&#x3D;1]</span> <span class=\"param-type\">(number)</span> <div data-render-html=\"/#synthetic\"><p>范围的增量 或者 减量 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Array)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回范围内数字组成的新数组</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >range</span><span class=\"token punctuation\" >(</span><span class=\"token number\" >4</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => [0, 1, 2, 3]</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >range</span><span class=\"token punctuation\" >(</span><span class=\"token operator\" >-</span><span class=\"token number\" >4</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => [0, -1, -2, -3]</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >range</span><span class=\"token punctuation\" >(</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >5</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => [1, 2, 3, 4]</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >range</span><span class=\"token punctuation\" >(</span><span class=\"token number\" >0</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >20</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >5</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => [0, 5, 10, 15]</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >range</span><span class=\"token punctuation\" >(</span><span class=\"token number\" >0</span><span class=\"token punctuation\" >,</span> <span class=\"token operator\" >-</span><span class=\"token number\" >4</span><span class=\"token punctuation\" >,</span> <span class=\"token operator\" >-</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => [0, -1, -2, -3]</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >range</span><span class=\"token punctuation\" >(</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >4</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => [1, 1, 1]</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >range</span><span class=\"token punctuation\" >(</span><span class=\"token number\" >0</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => []</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/rangeRight",
  "html":"<div data-render-page=\"entry\"><h2>rangeRight <a class=\"fa-link\" href=\"./rangeRight\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L13744\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.rangeright\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.rangeRight([start&#x3D;0], end, [step&#x3D;1])</div>\n\n<div data-render-html=\"/rangeRight\"><p>这个方法类似 <code>_.range</code>，\n除了它是降序生成值的。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">[start&#x3D;0]</span> <span class=\"param-type\">(number)</span> <div data-render-html=\"/#synthetic\"><p>开始的范围 </p>\n</div></li>\n<li><span class=\"param-name\">end</span> <span class=\"param-type\">(number)</span> <div data-render-html=\"/#synthetic\"><p>结束的范围 </p>\n</div></li>\n<li><span class=\"param-name\">[step&#x3D;1]</span> <span class=\"param-type\">(number)</span> <div data-render-html=\"/#synthetic\"><p>范围的增量 或者 减量 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Array)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回范围内数字组成的新数组</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >rangeRight</span><span class=\"token punctuation\" >(</span><span class=\"token number\" >4</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => [3, 2, 1, 0]</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >rangeRight</span><span class=\"token punctuation\" >(</span><span class=\"token operator\" >-</span><span class=\"token number\" >4</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => [-3, -2, -1, 0]</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >rangeRight</span><span class=\"token punctuation\" >(</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >5</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => [4, 3, 2, 1]</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >rangeRight</span><span class=\"token punctuation\" >(</span><span class=\"token number\" >0</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >20</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >5</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => [15, 10, 5, 0]</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >rangeRight</span><span class=\"token punctuation\" >(</span><span class=\"token number\" >0</span><span class=\"token punctuation\" >,</span> <span class=\"token operator\" >-</span><span class=\"token number\" >4</span><span class=\"token punctuation\" >,</span> <span class=\"token operator\" >-</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => [-3, -2, -1, 0]</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >rangeRight</span><span class=\"token punctuation\" >(</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >4</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => [1, 1, 1]</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >rangeRight</span><span class=\"token punctuation\" >(</span><span class=\"token number\" >0</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => []</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/runInContext",
  "html":"<div data-render-page=\"entry\"><h2>runInContext <a class=\"fa-link\" href=\"./runInContext\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L1300\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.runincontext\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.runInContext([context&#x3D;root])</div>\n\n<div data-render-html=\"/runInContext\"><p>创建一个给定上下文对象的原始的 <code>lodash</code> 函数。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">[context&#x3D;root]</span> <span class=\"param-type\">(Object)</span> <div data-render-html=\"/#synthetic\"><p>上下文对象 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Function)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回新的 <code>lodash</code> 对象</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >mixin</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> <span class=\"token string\" >'foo'</span><span class=\"token punctuation\" >:</span> _<span class=\"token punctuation\" >.</span><span class=\"token function\" >constant</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'foo'</span><span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n\n<span class=\"token keyword\" >var</span> lodash <span class=\"token operator\" >=</span> _<span class=\"token punctuation\" >.</span><span class=\"token function\" >runInContext</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\nlodash<span class=\"token punctuation\" >.</span><span class=\"token function\" >mixin</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> <span class=\"token string\" >'bar'</span><span class=\"token punctuation\" >:</span> lodash<span class=\"token punctuation\" >.</span><span class=\"token function\" >constant</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'bar'</span><span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >isFunction</span><span class=\"token punctuation\" >(</span>_<span class=\"token punctuation\" >.</span>foo<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => true</span>\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >isFunction</span><span class=\"token punctuation\" >(</span>_<span class=\"token punctuation\" >.</span>bar<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => false</span>\n\nlodash<span class=\"token punctuation\" >.</span><span class=\"token function\" >isFunction</span><span class=\"token punctuation\" >(</span>lodash<span class=\"token punctuation\" >.</span>foo<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => false</span>\nlodash<span class=\"token punctuation\" >.</span><span class=\"token function\" >isFunction</span><span class=\"token punctuation\" >(</span>lodash<span class=\"token punctuation\" >.</span>bar<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => true</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 使用 `context` 模拟 `Date#getTime` 调用 `_.now`</span>\n<span class=\"token keyword\" >var</span> mock <span class=\"token operator\" >=</span> _<span class=\"token punctuation\" >.</span><span class=\"token function\" >runInContext</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span>\n  <span class=\"token string\" >'Date'</span><span class=\"token punctuation\" >:</span> <span class=\"token keyword\" >function</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span>\n    <span class=\"token keyword\" >return</span> <span class=\"token punctuation\" >{</span> <span class=\"token string\" >'getTime'</span><span class=\"token punctuation\" >:</span> getTimeMock <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >;</span>\n  <span class=\"token punctuation\" >}</span>\n<span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 或者在 Node.js 中创建一个更高级的 `defer`</span>\n<span class=\"token keyword\" >var</span> defer <span class=\"token operator\" >=</span> _<span class=\"token punctuation\" >.</span><span class=\"token function\" >runInContext</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> <span class=\"token string\" >'setTimeout'</span><span class=\"token punctuation\" >:</span> setImmediate <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span>defer<span class=\"token punctuation\" >;</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/times",
  "html":"<div data-render-page=\"entry\"><h2>times <a class=\"fa-link\" href=\"./times\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L13764\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.times\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.times(n, [iteratee&#x3D;_.identity])</div>\n\n<div data-render-html=\"/times\"><p>调用 iteratee N 次，每次调用返回的结果存入到数组中。\niteratee 会传入1个参数：(index)。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">n</span> <span class=\"param-type\">(number)</span> <div data-render-html=\"/#synthetic\"><p>要调用  <code>iteratee</code> 的次数 </p>\n</div></li>\n<li><span class=\"param-name\">[iteratee&#x3D;_.identity]</span> <span class=\"param-type\">(Function)</span> <div data-render-html=\"/#synthetic\"><p>这个函数会处理每一个元素 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Array)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回调用结果的数组</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >times</span><span class=\"token punctuation\" >(</span><span class=\"token number\" >3</span><span class=\"token punctuation\" >,</span> String<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => ['0', '1', '2']</span>\n\n _<span class=\"token punctuation\" >.</span><span class=\"token function\" >times</span><span class=\"token punctuation\" >(</span><span class=\"token number\" >4</span><span class=\"token punctuation\" >,</span> _<span class=\"token punctuation\" >.</span><span class=\"token function\" >constant</span><span class=\"token punctuation\" >(</span><span class=\"token keyword\" >true</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => [true, true, true, true]</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/toPath",
  "html":"<div data-render-page=\"entry\"><h2>toPath <a class=\"fa-link\" href=\"./toPath\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L13807\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.topath\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.toPath(value)</div>\n\n<div data-render-html=\"/toPath\"><p>创建 <code>value</code> 为属性路径的数组</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">value</span> <span class=\"param-type\">(*)</span> <div data-render-html=\"/#synthetic\"><p>要转换的值 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(Array)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回包含属性路径的数组</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >toPath</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'a.b.c'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => ['a', 'b', 'c']</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >toPath</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'a[0].b.c'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => ['a', '0', 'b', 'c']</span>\n\n<span class=\"token keyword\" >var</span> path <span class=\"token operator\" >=</span> <span class=\"token punctuation\" >[</span><span class=\"token string\" >'a'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'b'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'c'</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span>\n    newPath <span class=\"token operator\" >=</span> _<span class=\"token punctuation\" >.</span><span class=\"token function\" >toPath</span><span class=\"token punctuation\" >(</span>path<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n\nconsole<span class=\"token punctuation\" >.</span><span class=\"token function\" >log</span><span class=\"token punctuation\" >(</span>newPath<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => ['a', 'b', 'c']</span>\n\nconsole<span class=\"token punctuation\" >.</span><span class=\"token function\" >log</span><span class=\"token punctuation\" >(</span>path <span class=\"token operator\" >===</span> newPath<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => false</span>\n</code></pre>\n</div>\n</div>" }
,{ "href":"/uniqueId",
  "html":"<div data-render-page=\"entry\"><h2>uniqueId <a class=\"fa-link\" href=\"./uniqueId\" title=\"Link to this entry.\">&#xf0c1;</a> <a href=\"https://github.com/lodash/lodash/blob/4.5.0正式版/lodash.src.js#L13828\" title=\"View in source.\" target=\"github\">source</a> <a href=\"https://www.npmjs.com/package/lodash.uniqueid\" title=\"See the npm package.\" target=\"npm\">npm</a></h2>\n<div class=\"signature\">_.uniqueId([prefix])</div>\n\n<div data-render-html=\"/uniqueId\"><p>创建唯一ID。\n如果提供了 <code>prefix</code>，会被添加到ID前缀上。</p>\n</div>\n\n<h3>参数</h3>\n    <ol>\n<li><span class=\"param-name\">[prefix]</span> <span class=\"param-type\">(string)</span> <div data-render-html=\"/#synthetic\"><p>要添加到ID前缀的值 </p>\n</div></li>\n    </ol>\n<h3>返回值 <span class=\"return-type\">(string)</span></h3>\n    <div class=\"returns\"> <div data-render-html=\"/#synthetic\"><p> 返回唯一ID</p>\n</div></div>\n<h3>示例</h3>\n    <div data-render-html=\"/#synthetic\"><pre><code class=\"lang-js\">_<span class=\"token punctuation\" >.</span><span class=\"token function\" >uniqueId</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'contact_'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => 'contact_104'</span>\n\n_<span class=\"token punctuation\" >.</span><span class=\"token function\" >uniqueId</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// => '105'</span>\n</code></pre>\n</div>\n</div>" }
]